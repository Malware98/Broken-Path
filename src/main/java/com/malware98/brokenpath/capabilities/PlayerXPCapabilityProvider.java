package com.malware98.brokenpath.capabilities;

import net.minecraft.core.Direction;
import net.minecraft.nbt.CompoundTag;
import net.minecraftforge.common.capabilities.Capability;
import net.minecraftforge.common.capabilities.ICapabilityProvider;
import net.minecraftforge.common.util.INBTSerializable;
import net.minecraftforge.common.util.LazyOptional;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import net.minecraft.world.entity.player.Player;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/*
 * Provee la capacidad (Capability) de experiencia (XP) a una entidad de jugador.
 * Implementa ICapabilityProvider para adjuntar la capacidad y INBTSerializable para su guardado/carga.
 */
public class PlayerXPCapabilityProvider implements ICapabilityProvider, INBTSerializable<CompoundTag> {

    // Referencia al jugador al que se adjunta la capacidad
    private final Player player;
    // Instancia LazyOptional de la interfaz IPlayerXP, que contiene los datos de XP
    private final LazyOptional<IPlayerXP> instance;

    // Constructor que inicializa el proveedor con una instancia de jugador
    public PlayerXPCapabilityProvider(Player player) {
        this.player = player;
        // Se inicializa LazyOptional, creando una nueva instancia de PlayerXP solo cuando sea necesario
        this.instance = LazyOptional.of(() -> new PlayerXP(this.player));
    }

    // Provee la capacidad solicitada si coincide con PLAYER_XP_CAPABILITY
    @Nonnull
    @Override
    public <T> LazyOptional<T> getCapability(@Nonnull Capability<T> cap, @Nullable Direction side) {
        // Devuelve la instancia de IPlayerXP si la capacidad solicitada es la de XP
        return cap == ModCapabilities.PLAYER_XP_CAPABILITY ? instance.cast() : LazyOptional.empty();
    }

    // Serializa los datos de XP de la capacidad a un CompoundTag
    @Override
    public CompoundTag serializeNBT() {
        // Obtiene la instancia de IPlayerXP y serializa sus datos
        return instance.orElseThrow(() -> new IllegalArgumentException("LazyOptional must not be empty!"))
                .serializeNBT();
    }

    // Deserializa los datos de XP de un CompoundTag a la capacidad
    @Override
    public void deserializeNBT(CompoundTag nbt) {
        // Obtiene la instancia de IPlayerXP y deserializa sus datos
        instance.orElseThrow(() -> new IllegalArgumentException("LazyOptional must not be empty!"))
                .deserializeNBT(nbt);
    }
}