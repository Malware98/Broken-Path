package com.malware98.brokenpath.capabilities;

import java.util.List;
import java.util.Map;
import java.util.Set;

import net.minecraft.nbt.CompoundTag; //
import net.minecraft.resources.ResourceKey; //
import net.minecraft.resources.ResourceLocation; //
import net.minecraft.world.level.Level; //
import net.minecraft.world.level.biome.Biome; //
import net.minecraftforge.common.util.INBTSerializable; //

/**
 * Interface for managing detailed player statistics.
 * Includes combat states, fundamental attributes, race/class information,
 * mastery points, professions, health/mana/vigor/protection stats,
 * luck, regeneration, hunger status, and NBT serialization for persistence.
 */
public interface IPlayerStats extends INBTSerializable<CompoundTag> {

    // --- Combat State Methods ---
    // Retrieves the last game tick when the player was in combat.
    long getLastCombatTick();
    // Sets the last game tick when the player was in combat.
    void setLastCombatTick(long tick);
    // Checks if the player is currently considered in combat.
    boolean isInCombat(long currentTick);
    // Sets the player's combat status to 'in combat'.
    void enterCombat(long currentTick);
    // Sets the player's combat status to 'out of combat'.
    void exitCombat();
    // Retrieves the game tick when the player last exited combat.
    long getLastCombatExitTick();

    // --- Core Attribute Methods ---
    // Retrieves the number of available attribute points.
    int getAttributePoints();
    // Sets the number of available attribute points.
    void setAttributePoints(int points);
    // Adds a specified amount of attribute points.
    void addAttributePoints(int amount);
    // Retrieves the value of the Constitution attribute.
    int getConstitution();
    // Sets the value of the Constitution attribute.
    void setConstitution(int constitution);
    // Retrieves the value of the Strength attribute.
    int getStrength();
    // Sets the value of the Strength attribute.
    void setStrength(int strength);
    // Retrieves the value of the Dexterity attribute.
    int getDexterity();
    // Sets the value of the Dexterity attribute.
    void setDexterity(int dexterity);
    // Retrieves the value of the Intelligence attribute.
    int getIntelligence();
    // Sets the value of the Intelligence attribute.
    void setIntelligence(int intelligence);

    // Spends attribute points on a specific attribute, applying configurable limits.
    boolean spendAttributePoints(String attributeName, int amount);

    // --- Race, Class, and Specialization Data ---
    // Retrieves the player's current race.
    String getRace();
    // Sets the player's race.
    void setRace(String race);
    // Retrieves the player's current class.
    String getPlayerClass();
    // Sets the player's class.
    void setPlayerClass(String playerClass);
    // Retrieves the player's current specialization.
    String getSpecialization();
    // Sets the player's specialization.
    void setSpecialization(String specialization);

    // --- Skill Points (for class abilities and professions) ---
    // Retrieves the number of available skill points.
    int getSkillPoints();
    // Adds a specified amount of skill points.
    void addSkillPoints(int amount);
    // Spends a specified amount of skill points.
    void spendSkillPoints(int amount);

    // --- Profession Methods ---
    // Retrieves a map of the player's professions and their levels.
    Map<String, Integer> getProfessions();
    // Sets the player's map of professions.
    void setProfessions(Map<String, Integer> professions);
    // Retrieves the level of a specific profession, or 0 if not found.
    int getProfessionLevel(String professionName);
    // Sets the level of a specific profession.
    void setProfessionLevel(String professionName, int level);
    // Adds or updates a profession and its level.
    void addOrUpdateProfession(String professionName, int level);
    // Removes a profession.
    void removeProfession(String professionName);

    // --- Primary Stat Implementations (Getters and Setters for Calculated Values) ---

    // --- Health Methods ---
    // Retrieves the player's current health.
    float getCurrentHealth();
    // Sets the player's current health.
    void setCurrentHealth(float health);
    // Sets the player's current health with an option to synchronize.
    void setCurrentHealth(float health, boolean doSync);
    // Retrieves the player's maximum health.
    float getMaxHealth();
    // Sets the player's maximum health.
    void setMaxHealth(float maxHealth);
    // Sets the player's maximum health with an option to synchronize.
    void setMaxHealth(float maxHealth, boolean doSync);

    // --- Protection (STR-based) Methods ---
    // Retrieves the player's current Strength-based protection.
    float getCurrentProtection();
    // Sets the player's current Strength-based protection.
    void setCurrentProtection(float protection);
    // Sets the player's current Strength-based protection with an option to synchronize.
    void setCurrentProtection(float protection, boolean doSync);
    // Retrieves the player's maximum Strength-based protection.
    float getMaxProtection();
    // Sets the player's maximum Strength-based protection.
    void setMaxProtection(float maxProtection);
    // Sets the player's maximum Strength-based protection with an option to synchronize.
    void setMaxProtection(float maxProtection, boolean doSync);

    // --- Innate Protection Methods ---
    // Retrieves the player's current innate protection.
    float getCurrentInnateProtection();
    // Sets the player's current innate protection.
    void setCurrentInnateProtection(float innateProtection);
    // Sets the player's current innate protection with an option to synchronize.
    void setCurrentInnateProtection(float innateProtection, boolean doSync);
    // Retrieves the player's maximum innate protection.
    float getMaxInnateProtection();
    // Sets the player's maximum innate protection.
    void setMaxInnateProtection(float maxInnateProtection);
    // Sets the player's maximum innate protection with an option to synchronize.
    void setMaxInnateProtection(float maxInnateProtection, boolean doSync);

    // --- Mana Methods ---
    // Retrieves the player's current mana.
    float getCurrentMana();
    // Sets the player's current mana.
    void setCurrentMana(float mana);
    // Sets the player's current mana with an option to synchronize.
    void setCurrentMana(float mana, boolean doSync);
    // Retrieves the player's maximum mana.
    float getMaxMana();
    // Sets the player's maximum mana.
    void setMaxMana(float maxMana);
    // Sets the player's maximum mana with an option to synchronize.
    void setMaxMana(float maxMana, boolean doSync);

    // --- Vigor Methods ---
    // Retrieves the player's current vigor.
    float getCurrentVigor();
    // Sets the player's current vigor.
    void setCurrentVigor(float vigor);
    // Sets the player's current vigor with an option to synchronize.
    void setCurrentVigor(float vigor, boolean doSync);
    // Retrieves the player's maximum vigor.
    float getMaxVigor();
    // Sets the player's maximum vigor.
    void setMaxVigor(float maxVigor);
    // Sets the player's maximum vigor with an option to synchronize.
    void setMaxVigor(float maxVigor, boolean doSync);

    // --- Favor (Luck) Methods ---
    // Retrieves the player's current favor value.
    float getFavor();
    // Sets the player's favor value.
    void setFavor(float favor);
    // Adds a specified amount to the player's favor.
    void addFavor(float amount);

    // --- Data Reset Methods ---
    // Resets all player data to default values.
    void resetData();
    // Resets only the player's class-specific data.
    void resetClassSpecificData();

    // --- Capability Management ---
    // Copies all data from another {@link IPlayerStats} instance.
    void copyFrom(IPlayerStats source);

    // --- Data Synchronization ---
    // Synchronizes all player stats data between the server and client.
    void sync();

    // Recalculates all maximum stats (health, mana, vigor, protection) based on attributes.
    void recalculateStats();

    // --- Favor Bonus Multiplier Methods ---
    // Retrieves the favor bonus multiplier.
    float getFavorBonusMultiplier();
    // Sets the favor bonus multiplier.
    void setFavorBonusMultiplier(float multiplier);
    // Applies a favor modifier based on an action key.
    void applyFavorModifier(String actionKey);

    // --- Regeneration Speed Bonus ---
    // Retrieves the bonus to regeneration speed (in ticks) from Constitution.
    float getRegenSpeedBonusTicks();

    // --- Resource Restoration Methods ---
    // Restores a specified amount of Strength-based protection.
    void restoreProtection(float amount);
    // Restores a specified amount of mana.
    void restoreMana(float amount);
    // Restores a specified amount of vigor.
    void restoreVigor(float amount);

    // Restores a specified amount of innate protection.
    void restoreInnateProtection(float amount);

    // --- Hunger State Methods ---
    // Retrieves the player's current penalized hunger stage (0, 1, 2, or 3).
    int getHungerStage();
    // Sets the player's penalized hunger stage.
    void setHungerStage(int hungerStage);

    // --- Continuous Resource Consumption Methods ---
    // Sets whether mana is being continuously consumed.
    void setManaBeingConsumed(boolean consuming);
    // Checks if mana is currently being continuously consumed.
    boolean isManaBeingConsumed();
    // Sets whether vigor is being continuously consumed.
    void setVigorBeingConsumed(boolean consuming);
    // Checks if vigor is currently being continuously consumed.
    boolean isVigorBeingConsumed();

    // --- Achievement Tracking Methods ---
    // Retrieves a map of all achievement progress (key: achievement ID, value: current progress).
    Map<String, Integer> getAchievementProgress();
    // Sets the progress for a specific achievement.
    void setAchievementProgress(String achievementKey, int progress);
    // Retrieves the current progress of a specific achievement.
    int getAchievementProgress(String achievementKey);
    // Retrieves a map of all completed achievement states (key: achievement ID, value: true if completed).
    Map<String, Boolean> getCompletedAchievements();
    // Marks a specific achievement as completed or not completed.
    void setAchievementCompleted(String achievementKey, boolean completed);
    // Checks if a specific achievement is completed.
    boolean isAchievementCompleted(String achievementKey);

    // --- Exploration and Crafting Tracking Methods ---
    // Retrieves a set of discovered biome ResourceKeys.
    Set<ResourceKey<Biome>> getDiscoveredBiomes();
    // Adds a discovered biome to the set.
    void addDiscoveredBiome(ResourceKey<Biome> biome);
    // Retrieves a set of visited dimension ResourceKeys.
    Set<ResourceKey<net.minecraft.world.level.Level>> getVisitedDimensions();
    // Adds a visited dimension to the set.
    void addVisitedDimension(ResourceKey<Level> dimension);
    // Retrieves a set of unique crafted item ResourceLocations.
    Set<ResourceLocation> getCraftedUniqueItems();
    // Adds a unique crafted item to the set.
    void addCraftedUniqueItem(ResourceLocation item);

    // --- Tamed Animals Tracking Methods ---
    // Retrieves a set of unique tamed animal entity IDs.
    Set<ResourceLocation> getTamedAnimals();
    // Adds a unique tamed animal entity ID to the set.
    void addTamedAnimal(ResourceLocation entityId);

    // --- Villager Trading Favor Cooldown Methods ---
    // Retrieves the number of trades since the last favor gain from a villager.
    int getVillagerTradesSinceLastFavor();
    // Sets the number of trades since the last favor gain from a villager.
    void setVillagerTradesSinceLastFavor(int count);
    // Retrieves the last game tick when favor was gained from a villager trade.
    long getLastVillagerFavorGainTick();
    // Sets the last game tick when favor was gained from a villager trade.
    void setLastVillagerFavorGainTick(long tick);

    // --- Chimera Chaotic Transformation Methods ---
    boolean startChaoticTransformation(long currentTick);
    void handleChaoticTransformationTick(long currentTick);
    boolean isInChaoticTransformation();
    long getChaoticTransformationEndTime();
    long getChaoticTransformationCooldownEndTime();
    Map<String, Float> getChaoticStatAdjustments();
    float getChaoticStatAdjustment(String statName);


    /**
     * Updates client-side player statistics from a synchronization packet.
     * This method is intended to be called on the client side only, after receiving
     * a SyncPlayerStatsPacket from the server. It does NOT trigger a sync back to server.
     * @param attributePoints The attribute points from the packet.
     * @param constitution Player's constitution.
     * @param strength Player's strength.
     * @param dexterity Player's dexterity.
     * @param intelligence Player's intelligence.
     * @param currentHealth Player's current health.
     * @param maxHealth Player's maximum health.
     * @param currentProtection Player's current strength-based protection.
     * @param maxProtection Player's maximum strength-based protection.
     * @param currentInnateProtection Player's current innate protection.
     * @param maxInnateProtection Player's maximum innate protection.
     * @param currentMana Player's current mana.
     * @param maxMana Player's maximum mana.
     * @param currentVigor Player's current vigor.
     * @param maxVigor Player's maximum vigor.
     * @param favor Player's favor value.
     * @param race Player's race.
     * @param playerClass Player's class.
     * @param specialization Player's specialization. // NEW: Add specialization parameter
     * @param skillPoints Player's skill points.
     * @param professions Map of player's professions and levels.
     * @param hungerStage Player's current hunger stage.
     * @param favorBonusMultiplier Player's favor bonus multiplier.
     * @param achievementProgress Map of achievement progress.
     * @param completedAchievements Map of completed achievements.
     * @param discoveredBiomesLocations List of discovered biome locations.
     * @param visitedDimensionsLocations List of visited dimension locations.
     * @param craftedUniqueItemsLocations List of crafted unique item locations.
     * @param tamedAnimalsLocations List of tamed animal locations.
     */
    void updateClientData(int attributePoints,
                          int constitution, int strength, int dexterity, int intelligence,
                          float currentHealth, float maxHealth,
                          float currentProtection, float maxProtection,
                          float currentInnateProtection, float maxInnateProtection,
                          float currentMana, float maxMana,
                          float currentVigor, float maxVigor,
                          float favor,
                          String race, String playerClass, String specialization, int skillPoints, // MODIFIED: Added specialization
                          Map<String, Integer> professions,
                          int hungerStage,
                          float favorBonusMultiplier,
                          Map<String, Integer> achievementProgress,
                          Map<String, Boolean> completedAchievements,
                          List<String> discoveredBiomesLocations,
                          List<String> visitedDimensionsLocations,
                          List<String> craftedUniqueItemsLocations,
                          List<String> tamedAnimalsLocations);
}