package com.malware98.brokenpath.capabilities;

import java.util.Map;
import net.minecraft.nbt.CompoundTag;
import net.minecraftforge.common.util.INBTSerializable;

public interface IPlayerStats extends INBTSerializable<CompoundTag> {

    //Métodos de estado de combate
    long getLastCombatTick();
    void setLastCombatTick(long tick);
    boolean isInCombat(long currentTick);
    void enterCombat(long currentTick);
    void exitCombat();
    long getLastCombatExitTick();

    //Métodos de Atributos Fundamentales
    int getAttributePoints();
    void setAttributePoints(int points);
    void addAttributePoints(int amount);
    int getConstitution();
    void setConstitution(int constitution);
    int getStrength();
    void setStrength(int strength);
    int getDexterity();
    void setDexterity(int dexterity);
    int getIntelligence();
    void setIntelligence(int intelligence);

    //Procedimiento para gastar puntos de Atributo
    boolean spendAttributePoints(String attributeName, int amount);

    //Datos Raza, Clase y Especialización
    String getRace();
    void setRace(String race);
    String getPlayerClass();
    void setPlayerClass(String playerClass);
    String getSpecialization();
    void setSpecialization(String specialization);

    // Puntos de maestría (Para las habilidades de clase y habilidades de Profesiones)
    int getSkillPoints();
    void addSkillPoints(int amount);
    void spendSkillPoints(int amount);

    //Métodos de Profesiones
    Map<String, Integer> getProfessions();
    void setProfessions(Map<String, Integer> professions);
    int getProfessionLevel(String professionName);
    void setProfessionLevel(String professionName, int level);
    void addOrUpdateProfession(String professionName, int level);
    void removeProfession(String professionName);

    // Implementación primaria de Estadísticas (Getters and Setters para valores calculados)
    float getCurrentHealth();
    void setCurrentHealth(float health);
    float getMaxHealth();
    void setMaxHealth(float maxHealth);

    float getCurrentProtection();
    void setCurrentProtection(float protection);
    float getMaxProtection();
    void setMaxProtection(float maxProtection);

    float getCurrentMana();
    void setCurrentMana(float mana);
    float getMaxMana();
    void setMaxMana(float maxMana);

    float getCurrentVigor();
    void setCurrentVigor(float vigor);
    float getMaxVigor();
    void setMaxVigor(float maxVigor);

    float getLuck();
    void setLuck(float luck);
    void addLuck(float amount);

    //Calcula y retorna el valor actual de la Protección Innata del jugador,
    float getInnateProtection();

    //Métodos de reset para Datos
    void resetData();
    void resetClassSpecificData();

    // Procedimiento para la Capability
    void copyFrom(IPlayerStats source);

    //Procedimiento para sincronizar XP y Nivel
    void sync();

    //Métodos de suerte
    float getLuckBonusMultiplier();
    void setLuckBonusMultiplier(float multiplier);
    void applyLuckModifier(String actionKey);

    //Bonificación a la Regeneración de Vida por CON
    float getRegenSpeedBonusTicks();

    //Activación de Efectos de Regeneración en estadísticas Personalizadas
    void restoreProtection(float amount);
    void restoreMana(float amount);
    void restoreVigor(float amount);

    //Obtiene el nivel actual de hambre penalizada del jugador. Niveles 0,1,2,3
    int getHungerStage();
    void setHungerStage(int hungerStage);
}