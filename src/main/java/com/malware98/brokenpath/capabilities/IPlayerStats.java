package com.malware98.brokenpath.capabilities;

import java.util.Map;
import java.util.Set;

import net.minecraft.nbt.CompoundTag;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.biome.Biome;
import net.minecraftforge.common.util.INBTSerializable;

/*
 * Interfaz para la gestión de las estadísticas detalladas de un jugador.
 * Incluye estados de combate, atributos fundamentales, información de raza/clase,
 * puntos de maestría, profesiones, estadísticas de salud/maná/vigor/protección,
 * suerte, regeneración y estado de hambre, así como la serialización NBT.
 */
public interface IPlayerStats extends INBTSerializable<CompoundTag> {

    // Métodos de estado de combate
    long getLastCombatTick(); // Obtiene el último tick en el que el jugador estuvo en combate.
    void setLastCombatTick(long tick); // Establece el último tick de combate.
    boolean isInCombat(long currentTick); // Comprueba si el jugador está actualmente en combate.
    void enterCombat(long currentTick); // Establece al jugador en estado de combate.
    void exitCombat(); // Saca al jugador del estado de combate.
    long getLastCombatExitTick(); // Obtiene el último tick en el que el jugador salió de combate.

    // Métodos de Atributos Fundamentales
    int getAttributePoints(); // Obtiene la cantidad de puntos de atributo disponibles.
    void setAttributePoints(int points); // Establece la cantidad de puntos de atributo.
    void addAttributePoints(int amount); // Añade puntos de atributo.
    int getConstitution(); // Obtiene el valor del atributo Constitución.
    void setConstitution(int constitution); // Establece el valor del atributo Constitución.
    int getStrength(); // Obtiene el valor del atributo Fuerza.
    void setStrength(int strength); // Establece el valor del atributo Fuerza.
    int getDexterity(); // Obtiene el valor del atributo Destreza.
    void setDexterity(int dexterity); // Establece el valor del atributo Destreza.
    int getIntelligence(); // Obtiene el valor del atributo Inteligencia.
    void setIntelligence(int intelligence); // Establece el valor del atributo Inteligencia.

    // Procedimiento para gastar puntos de Atributo
    boolean spendAttributePoints(String attributeName, int amount); // Gasta puntos en un atributo específico.

    // Datos Raza, Clase y Especialización
    String getRace(); // Obtiene la raza del jugador.
    void setRace(String race); // Establece la raza del jugador.
    String getPlayerClass(); // Obtiene la clase del jugador.
    void setPlayerClass(String playerClass); // Establece la clase del jugador.
    String getSpecialization(); // Obtiene la especialización del jugador.
    void setSpecialization(String specialization); // Establece la especialización del jugador.

    // Puntos de maestría (Para las habilidades de clase y habilidades de Profesiones)
    int getSkillPoints(); // Obtiene la cantidad de puntos de habilidad disponibles.
    void addSkillPoints(int amount); // Añade puntos de habilidad.
    void spendSkillPoints(int amount); // Gasta puntos de habilidad.

    // Métodos de Profesiones
    Map<String, Integer> getProfessions(); // Obtiene un mapa de las profesiones y sus niveles.
    void setProfessions(Map<String, Integer> professions); // Establece el mapa de profesiones.
    int getProfessionLevel(String professionName); // Obtiene el nivel de una profesión específica.
    void setProfessionLevel(String professionName, int level); // Establece el nivel de una profesión específica.
    void addOrUpdateProfession(String professionName, int level); // Añade o actualiza una profesión y su nivel.
    void removeProfession(String professionName); // Elimina una profesión.

    // Implementación primaria de Estadísticas (Getters and Setters para valores calculados)

    // Métodos para Salud
    float getCurrentHealth(); // Obtiene la salud actual del jugador.
    void setCurrentHealth(float health); // Establece la salud actual del jugador.
    void setCurrentHealth(float health, boolean doSync); // Establece la salud actual y opcionalmente sincroniza.
    float getMaxHealth(); // Obtiene la salud máxima del jugador.
    void setMaxHealth(float maxHealth); // Establece la salud máxima del jugador.
    void setMaxHealth(float maxHealth, boolean doSync); // Establece la salud máxima y opcionalmente sincroniza.

    // Métodos para Protección (basada en STR)
    float getCurrentProtection(); // Obtiene la protección actual basada en Fuerza.
    void setCurrentProtection(float protection); // Establece la protección actual basada en Fuerza.
    void setCurrentProtection(float protection, boolean doSync); // Establece la protección actual y opcionalmente sincroniza.
    float getMaxProtection(); // Obtiene la protección máxima basada en Fuerza.
    void setMaxProtection(float maxProtection); // Establece la protección máxima basada en Fuerza.
    void setMaxProtection(float maxProtection, boolean doSync); // Establece la protección máxima y opcionalmente sincroniza.

    // Métodos para Protección Innata
    float getCurrentInnateProtection(); // Obtiene la protección innata actual.
    void setCurrentInnateProtection(float innateProtection); // Establece la protección innata actual.
    void setCurrentInnateProtection(float innateProtection, boolean doSync); // Establece la protección innata y opcionalmente sincroniza.
    float getMaxInnateProtection(); // Obtiene la protección innata máxima.
    void setMaxInnateProtection(float maxInnateProtection); // Establece la protección innata máxima.
    void setMaxInnateProtection(float maxInnateProtection, boolean doSync); // Establece la protección innata y opcionalmente sincroniza.

    // Métodos para Maná
    float getCurrentMana(); // Obtiene el maná actual del jugador.
    void setCurrentMana(float mana); // Establece el maná actual del jugador.
    void setCurrentMana(float mana, boolean doSync); // Establece el maná actual y opcionalmente sincroniza.
    float getMaxMana(); // Obtiene el maná máximo del jugador.
    void setMaxMana(float maxMana); // Establece el maná máximo del jugador.
    void setMaxMana(float maxMana, boolean doSync); // Establece el maná máximo y opcionalmente sincroniza.

    // Métodos para Vigor
    float getCurrentVigor(); // Obtiene el vigor actual del jugador.
    void setCurrentVigor(float vigor); // Establece el vigor actual del jugador.
    void setCurrentVigor(float vigor, boolean doSync); // Establece el vigor actual y opcionalmente sincroniza.
    float getMaxVigor(); // Obtiene el vigor máximo del jugador.
    void setMaxVigor(float maxVigor); // Establece el vigor máximo del jugador.
    void setMaxVigor(float maxVigor, boolean doSync); // Establece el vigor máximo y opcionalmente sincroniza.

    // Métodos para el Favor (Suerte)
    float getFavor(); // Obtiene el valor de favor actual del jugador.
    void setFavor(float favor); // Establece el valor de favor del jugador.
    void addFavor(float amount); // Añade una cantidad al favor del jugador.

    // Métodos de reset para Datos
    void resetData(); // Reinicia todos los datos del jugador.
    void resetClassSpecificData(); // Reinicia los datos específicos de la clase del jugador.

    // Procedimiento para la Capability
    void copyFrom(IPlayerStats source); // Copia todos los datos de otra instancia de IPlayerStats.

    // Procedimiento para sincronizar XP y Nivel
    void sync(); // Sincroniza todos los datos de estadísticas del jugador entre el servidor y el cliente.

    // Proceso para recalcular todas las estadísticas máximas (salud, maná, vigor, protección)
    void recalculateStats(); // Recalcula todas las estadísticas máximas basadas en atributos.

    // Métodos de suerte
    float getFavorBonusMultiplier(); // Obtiene el multiplicador de bonificación de favor.
    void setFavorBonusMultiplier(float multiplier); // Establece el multiplicador de bonificación de favor.
    void applyFavorModifier(String actionKey); // Aplica un modificador de favor basado en una clave de acción.

    // Bonificación a la Regeneración de Vida por CON
    float getRegenSpeedBonusTicks(); // Obtiene la bonificación a la velocidad de regeneración por Constitución.

    // Activación de Efectos de Regeneración en estadísticas Personalizadas
    void restoreProtection(float amount); // Restaura una cantidad de protección basada en Fuerza.
    void restoreMana(float amount); // Restaura una cantidad de maná.
    void restoreVigor(float amount); // Restaura una cantidad de vigor.

    // Restaurar Protección Innata
    void restoreInnateProtection(float amount); // Restaura una cantidad de protección innata.

    // Obtiene el nivel actual de hambre penalizada del jugador. Niveles 0,1,2,3
    int getHungerStage(); // Obtiene la etapa actual de hambre penalizada.
    void setHungerStage(int hungerStage); // Establece la etapa de hambre penalizada.

    // Métodos para el consumo continuo de Maná y Vigor
    void setManaBeingConsumed(boolean consuming); // Establece si el maná está siendo consumido continuamente.
    boolean isManaBeingConsumed(); // Comprueba si el maná está siendo consumido continuamente.
    void setVigorBeingConsumed(boolean consuming); // Establece si el vigor está siendo consumido continuamente.
    boolean isVigorBeingConsumed(); // Comprueba si el vigor está siendo consumido continuamente.

    //Métodos para obtención y manejo de hitos
    Map<String, Integer> getAchievementProgress(); // Obtiene un mapa con el progreso de todos los hitos (clave: ID del hito, valor: progreso actual)
    void setAchievementProgress(String achievementKey, int progress); // Establece el progreso para un hito específico
    int getAchievementProgress(String achievementKey); // Obtiene el progreso actual de un hito específico
    Map<String, Boolean> getCompletedAchievements(); // Obtiene un mapa con el estado de compleción de todos los hitos (clave: ID del hito, valor: true si está completado)
    void setAchievementCompleted(String achievementKey, boolean completed); // Marca un hito como completado o no completado
    boolean isAchievementCompleted(String achievementKey); // Comprueba si un hito específico está completado


    // Métodos para persistencia de hitos específicos
    Set<ResourceKey<Biome>> getDiscoveredBiomes();
    void addDiscoveredBiome(ResourceKey<Biome> biome);
    Set<ResourceKey<net.minecraft.world.level.Level>> getVisitedDimensions();
    void addVisitedDimension(ResourceKey<Level> dimension);
    Set<ResourceLocation> getCraftedUniqueItems();
    void addCraftedUniqueItem(ResourceLocation item);
}