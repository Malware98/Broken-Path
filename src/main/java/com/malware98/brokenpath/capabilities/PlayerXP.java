package com.malware98.brokenpath.capabilities;

import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.config.AttributeConfig;
import com.malware98.brokenpath.data.config.MainModConfigManager;
import com.malware98.brokenpath.data.config.XpDataConfig;
import com.malware98.brokenpath.events.PlayerStatEventHandler;
import com.malware98.brokenpath.network.PacketHandler;
import com.malware98.brokenpath.network.messages.SyncPlayerXPPacket;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.entity.player.Player;

/**
 * Implements the {@link IPlayerXP} interface, managing a player's experience,
 * level, and XP debt. Handles XP gain, level-up logic, and data synchronization.
 */
public class PlayerXP implements IPlayerXP {

    // --- XP Data Fields ---
    private int experience; // Current experience points within the current level.
    private int level;      // Current level of the player.
    private int xpDebt;     // Player's XP debt.
    private final Player player; // Reference to the associated player.

    // --- Constructor ---
    /**
     * Initializes XP, level, and debt for a new player.
     * @param player The player associated with this capability.
     */
    public PlayerXP(Player player) {
        this.player = player;
        this.experience = 0;
        this.level = 1;
        this.xpDebt = 0;
    }

    // --- Getters ---
    @Override
    public int getExperience() { return experience; }
    @Override
    public int getLevel() { return level; }
    @Override
    public int getXPDebt() { return xpDebt; }

    // --- Setters ---
    @Override
    public void setExperience(int experience) {
        this.experience = experience;
        sync();
    }
    @Override
    public void setLevel(int level) {
        this.level = level;
        sync();
    }
    @Override
    public void setXPDebt(int xpDebt) {
        this.xpDebt = xpDebt;
        sync();
    }

    // --- Main XP Logic ---
    /**
     * Adds or subtracts experience from the player, handling XP debt and level-ups.
     * @param amount The amount of experience to add (can be negative for penalties).
     */
    @Override
    public void addExperience(int amount) {
        // Handle XP Debt First.
        if (this.xpDebt > 0) {
            this.xpDebt -= amount;
            if (this.xpDebt < 0) {
                amount = -this.xpDebt;
                this.xpDebt = 0;
            } else {
                amount = 0;
            }
        }

        // Handle Negative XP (Penalties).
        if (amount < 0) {
            this.experience += amount;
            if (this.experience < 0) {
                this.xpDebt += -this.experience;
                this.experience = 0;
            }
            if (this.level < MainModConfigManager.getInstance().maxLevel) {
                float penaltyPercentage = XpDataConfig.getInstance().getXpLossPercentageOnDeath();
                float maxDebtPercentage = XpDataConfig.getInstance().getXpMaxDebtPercentage();

                int xpPotencial = XpDataConfig.getInstance().getXpNeededForNextLevel(this.level);
                if (xpPotencial == 0 && this.level < MainModConfigManager.getInstance().maxLevel) {
                    xpPotencial = 1000;
                }

                int basePenalty = (int) (xpPotencial * penaltyPercentage);
                int maxAllowedDebt = (int) (xpPotencial * maxDebtPercentage);

                if (this.xpDebt < maxAllowedDebt) {
                    this.xpDebt += basePenalty;
                    if (this.xpDebt > maxAllowedDebt) {
                        this.xpDebt = maxAllowedDebt;
                    }
                }
            }
            sync();
            return;
        }

        // Handle Positive XP Gain.
        if (amount > 0) {
            if (level >= MainModConfigManager.getInstance().maxLevel) {
                sync();
                return;
            }

            this.experience += amount;
            boolean leveledUpThisCall = false;
            int xpNeededForNextLevel;

            while (level < MainModConfigManager.getInstance().maxLevel) {
                xpNeededForNextLevel = XpDataConfig.getInstance().getXpNeededForNextLevel(this.level);

                if (this.experience >= xpNeededForNextLevel) {
                    this.experience -= xpNeededForNextLevel;
                    this.level++;
                    leveledUpThisCall = true;

                    final int pointsToAward = AttributeConfig.getInstance().getAttributePointsForLevelRange(this.level);
                    if (pointsToAward > 0) {
                        player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                            playerStats.addAttributePoints(pointsToAward);
                        });
                    }
                } else {
                    break;
                }
            }

            if (level >= MainModConfigManager.getInstance().maxLevel) {
                this.level = MainModConfigManager.getInstance().maxLevel;
                this.experience = 0;
            }

            if (leveledUpThisCall) {
                PlayerStatEventHandler.recalculateAndApplyStats(player);
            }

            sync();
        }
    }

    /**
     * Resets player's experience, level, and XP debt to initial default values.
     */
    @Override
    public void resetXP() {
        this.experience = 0;
        this.level = 1;
        this.xpDebt = 0;
        sync();
    }

    /**
     * Copies XP, level, and debt data from another {@link IPlayerXP} instance.
     * @param source The source instance to copy from.
     */
    @Override
    public void copyFrom(IPlayerXP source) {
        this.experience = source.getExperience();
        this.level = source.getLevel();
        this.xpDebt = source.getXPDebt();
    }

    // --- Data Synchronization ---
    /**
     * Synchronizes player XP data from the server to the client.
     */
    @Override
    public void sync() {
        if (!player.level().isClientSide()) {
            if (player instanceof ServerPlayer serverPlayer) {
                int xpNeeded = XpDataConfig.getInstance().getXpNeededForNextLevel(this.level);
                PacketHandler.sendToPlayer(new SyncPlayerXPPacket(this.experience, this.level, this.xpDebt, xpNeeded), serverPlayer);
            }
        }
    }

    // --- NBT Serialization and Deserialization (Data Persistence) ---
    /**
     * Serializes player's XP data to a {@link CompoundTag} for saving.
     * @return A CompoundTag containing the serialized XP data.
     */
    @Override
    public CompoundTag serializeNBT() {
        CompoundTag tag = new CompoundTag();
        tag.putInt("brokenpath.player_xp", this.experience);
        tag.putInt("brokenpath.player_level", this.level);
        tag.putInt("brokenpath.player_xp_debt", this.xpDebt);
        return tag;
    }

    /**
     * Deserializes player's XP data from a {@link CompoundTag} when loading game saves.
     * @param nbt The CompoundTag containing the serialized XP data.
     */
    @Override
    public void deserializeNBT(CompoundTag nbt) {
        this.experience = nbt.getInt("brokenpath.player_xp");
        this.level = nbt.getInt("brokenpath.player_level");
        this.xpDebt = nbt.getInt("brokenpath.player_xp_debt");

        if (this.level > MainModConfigManager.getInstance().maxLevel) {
            this.level = MainModConfigManager.getInstance().maxLevel;
            this.experience = 0;
            this.xpDebt = 0;
        } else if (this.level < 1) {
            this.level = 1;
            this.experience = 0;
            this.xpDebt = 0;
        }
    }
}