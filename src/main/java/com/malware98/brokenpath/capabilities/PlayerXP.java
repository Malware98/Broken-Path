package com.malware98.brokenpath.capabilities;

import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.events.PlayerStatEventHandler;
import com.malware98.brokenpath.network.PacketHandler;
import com.malware98.brokenpath.network.messages.SyncPlayerXPPacket;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.entity.player.Player;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;

/*
 * Implementación de la interfaz IPlayerXP, que gestiona la experiencia,
 * el nivel y la deuda de XP de un jugador.
 * Se encarga de la lógica de ganancia de XP, subida de nivel y sincronización.
 */
public class PlayerXP implements IPlayerXP {

    // XP actual del jugador dentro del nivel actual
    private int experience;
    // Nivel actual del jugador
    private int level;
    // Deuda de XP del jugador (cantidad de XP que debe "pagar" antes de ganar más)
    private int xpDebt;
    // Referencia al jugador asociado con esta capacidad, necesaria para la sincronización
    private final Player player;

    // Constructor que inicializa los valores de XP, nivel y deuda para un nuevo jugador
    public PlayerXP(Player player) {
        this.player = player;
        this.experience = 0; // Se inicializa con 0 XP
        this.level = 1;      // Se inicia en Nivel 1
        this.xpDebt = 0;     // Se inicializa sin deuda
    }

    // --- Getters ---

    // Obtiene la experiencia actual del jugador
    @Override
    public int getExperience() {
        return experience;
    }

    // Obtiene el nivel actual del jugador
    @Override
    public int getLevel() {
        return level;
    }

    // Obtiene la deuda de XP actual del jugador
    @Override
    public int getXPDebt() {
        return xpDebt;
    }

    // --- Setters ---

    // Establece la experiencia actual del jugador y la sincroniza con el cliente
    @Override
    public void setExperience(int experience) {
        this.experience = experience;
        sync();
    }

    // Establece el nivel actual del jugador y lo sincroniza con el cliente
    @Override
    public void setLevel(int level) {
        this.level = level;
        sync();
    }

    // Establece la deuda de XP del jugador y la sincroniza con el cliente
    @Override
    public void setXPDebt(int xpDebt) {
        this.xpDebt = xpDebt;
        sync();
    }

    // --- Lógica Principal de XP ---

    // Añade o resta experiencia al jugador, manejando la deuda de XP y la subida de nivel
    @Override
    public void addExperience(int amount) {
        // Si hay deuda de XP, la XP ganada se usa primero para reducirla
        if (this.xpDebt > 0) {
            this.xpDebt -= amount;
            if (this.xpDebt < 0) {
                // Si la XP ganada excede la deuda, el excedente se convierte en XP positiva
                amount = -this.xpDebt; // 'amount' ahora representa el excedente positivo
                this.xpDebt = 0;
            } else {
                // Toda la XP se usó para reducir la deuda, no hay XP para ganar
                amount = 0;
            }
        }

        // Si la cantidad de XP es negativa (por penalización, como la muerte)
        if (amount < 0) {
            this.experience += amount; // Resta la XP
            if (this.experience < 0) {
                this.xpDebt += -this.experience; // Convierte el déficit en deuda de XP
                this.experience = 0; // La XP actual no puede ser negativa
            }
            // Cuando la XP es negativa, no hay subida de nivel, solo gestión de deuda/pérdida
            sync(); // Sincroniza la XP con el cliente después de la pérdida
            return;
        }

        // Lógica normal de ganancia de XP (solo si 'amount' es positivo después de gestionar la deuda)
        if (amount > 0) {
            // Si el jugador ya está en el nivel máximo, no gana más XP
            if (level >= ModConfigs.MAX_LEVEL) {
                sync();
                return;
            }

            this.experience += amount;
            boolean leveledUpThisCall = false; // Bandera para indicar si se subió de nivel en esta llamada
            int xpNeededForNextLevel;

            // Bucle que maneja múltiples subidas de nivel si se acumula suficiente XP
            while (level < ModConfigs.MAX_LEVEL) {
                xpNeededForNextLevel = ModConfigs.getInstance().getXPForNextLevel(this.level);
                if (this.experience >= xpNeededForNextLevel) {
                    this.experience -= xpNeededForNextLevel;
                    this.level++;
                    leveledUpThisCall = true; // Se subió de nivel en esta iteración del bucle

                    // Lógica para otorgar puntos de atributo al subir de nivel
                    final int pointsToAward = ModConfigs.getInstance().getAttributePointsForLevelRange(this.level);
                    if (pointsToAward > 0) {
                        player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                            playerStats.addAttributePoints(pointsToAward); // Añade puntos al pool disponible del jugador
                        });
                    }
                } else {
                    break; // No hay suficiente XP para el siguiente nivel, se sale del bucle
                }
            }

            // Asegura que el nivel y la XP no excedan los límites si se supera el nivel máximo
            if (level >= ModConfigs.MAX_LEVEL) {
                this.level = ModConfigs.MAX_LEVEL;
                this.experience = 0;
            }

            // Recalcula y aplica las estadísticas del jugador inmediatamente después de subir de nivel
            // Esto es crucial para actualizar atributos como la Protección Innata en el cliente.
            if (leveledUpThisCall) {
                PlayerStatEventHandler.recalculateAndApplyStats(player);
            }

            sync(); // Sincroniza la XP con el cliente después de todos los cálculos
        }
    }

    // Reinicia la experiencia, el nivel y la deuda de XP del jugador a sus valores iniciales
    @Override
    public void resetXP() {
        this.experience = 0;
        this.level = 1;
        this.xpDebt = 0;
        sync(); // Sincroniza los cambios con el cliente
    }

    // Copia los datos de XP, nivel y deuda de otra instancia de IPlayerXP
    @Override
    public void copyFrom(IPlayerXP source) {
        this.experience = source.getExperience();
        this.level = source.getLevel();
        this.xpDebt = source.getXPDebt();
        sync(); // Es importante sincronizar los datos con el cliente después de una copia
    }

    // Sincroniza los datos de XP del servidor al cliente
    @Override
    public void sync() {
        // Solo sincroniza si se ejecuta en el lado del servidor
        if (!player.level().isClientSide()) {
            // Envía un paquete de sincronización si el jugador es una instancia de ServerPlayer
            if (player instanceof ServerPlayer serverPlayer) {
                PacketHandler.sendToPlayer(new SyncPlayerXPPacket(this.experience, this.level, this.xpDebt), serverPlayer);
            }
        }
    }

    // --- Serialización y Deserialización (Persistencia de datos) ---

    // Serializa los datos de XP, nivel y deuda a un CompoundTag para guardado
    @Override
    public CompoundTag serializeNBT() {
        CompoundTag tag = new CompoundTag();
        tag.putInt("brokenpath.player_xp", this.experience);
        tag.putInt("brokenpath.player_level", this.level);
        tag.putInt("brokenpath.player_xp_debt", this.xpDebt);
        return tag;
    }

    // Deserializa los datos de XP, nivel y deuda desde un CompoundTag cargado
    @Override
    public void deserializeNBT(CompoundTag nbt) {
        this.experience = nbt.getInt("brokenpath.player_xp");
        this.level = nbt.getInt("brokenpath.player_level");
        this.xpDebt = nbt.getInt("brokenpath.player_xp_debt");

        // Asegura que el nivel no exceda el máximo o sea menor que 1 después de cargar
        if (this.level > ModConfigs.MAX_LEVEL) {
            this.level = ModConfigs.MAX_LEVEL;
            this.experience = 0;
            this.xpDebt = 0;
        } else if (this.level < 1) {
            this.level = 1;
            this.experience = 0;
            this.xpDebt = 0;
        }
        sync();
    }
}