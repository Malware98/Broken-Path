package com.malware98.brokenpath.capabilities;

import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.network.PacketHandler;
import com.malware98.brokenpath.network.messages.SyncPlayerXPPacket;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.entity.player.Player;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities; // Importación necesaria para acceder a PLAYER_DATA_CAPABILITY

public class PlayerXP implements IPlayerXP {
    private int experience; // XP actual del jugador en el nivel actual
    private int level;      // Nivel actual del jugador
    private final Player player; // Referencia al jugador para la sincronización

    public PlayerXP(Player player) {
        this.player = player;
        this.experience = 0; // Inicia con 0 XP
        this.level = 1;      // Inicia en Nivel 1
    }

    @Override
    public int getExperience() {
        return experience;
    }

    @Override
    public int getLevel() {
        return level;
    }

    @Override
    public void setExperience(int experience) {
        this.experience = experience;
        sync();
    }

    @Override
    public void setLevel(int level) {
        this.level = level;
        sync();
    }

    @Override
    public boolean addExperience(int amount) {
        if (amount < 0) {
            return false;
        }
        if (level >= ModConfigs.MAX_LEVEL) {
            return false;
        }

        this.experience += amount;
        boolean leveledUpThisCall = false; // Indica si se subió de nivel en esta llamada
        int xpNeededForNextLevel;

        // BUCLE CLAVE: Maneja múltiples subidas de nivel si se acumula suficiente XP
        while (level < ModConfigs.MAX_LEVEL) {
            xpNeededForNextLevel = ModConfigs.getInstance().getXPForNextLevel(this.level);
            if (this.experience >= xpNeededForNextLevel) {
                this.experience -= xpNeededForNextLevel;
                this.level++;
                leveledUpThisCall = true; // Se subió de nivel en esta iteración

                //Lógica para otorgar puntos de atributo al subir de nivel
                final int pointsToAward = ModConfigs.getInstance().getAttributePointsForLevelRange(this.level);
                if (pointsToAward > 0) {
                    player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                        playerStats.addAttributePoints(pointsToAward); // Llama al nuevo method en IPlayerStats
                    });
                }
            } else {
                break; // No hay suficiente XP para el siguiente nivel, salimos del bucle.
            }
        }

        // Si el jugador supera el nivel máximo, ajustamos la XP a 0 y el nivel al máximo.
        if (level >= ModConfigs.MAX_LEVEL) {
            this.level = ModConfigs.MAX_LEVEL;
            this.experience = 0;
        }

        sync(); // Sincroniza la XP con el cliente
        return leveledUpThisCall;
    }

    @Override
    public void resetXP() {
        this.experience = 0;
        this.level = 1;
        sync(); // Sincroniza los cambios
    }

    @Override
    public void copyFrom(IPlayerXP source) {
        this.experience = source.getExperience();
        this.level = source.getLevel();
        sync(); // Cuando se copia, es importante sincronizar los datos.
    }

    @Override
    public void sync() {
        if (!player.level().isClientSide()) {
            if (player instanceof ServerPlayer serverPlayer) {
                PacketHandler.sendToPlayer(new SyncPlayerXPPacket(this.experience, this.level), serverPlayer);
            }
        }
    }

   //Implementación del method serializeNBT() de INBTSerializable.
    @Override
    public CompoundTag serializeNBT() {
        CompoundTag tag = new CompoundTag();
        tag.putInt("brokenpath.player_xp", this.experience);
        tag.putInt("brokenpath.player_level", this.level);
        return tag;
    }

    //Implementación del method deserializeNBT(CompoundTag) de INBTSerializable.
    @Override
    public void deserializeNBT(CompoundTag nbt) {
        this.experience = nbt.getInt("brokenpath.player_xp");
        this.level = nbt.getInt("brokenpath.player_level");

        // Asegurarse de que el nivel no exceda el máximo o sea menor que 1.
        if (this.level > ModConfigs.MAX_LEVEL) {
            this.level = ModConfigs.MAX_LEVEL;
            this.experience = 0;
        } else if (this.level < 1) {
            this.level = 1;
            this.experience = 0;
        }
    }
}