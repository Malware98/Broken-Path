// PlayerXP.java
package com.malware98.brokenpath.capabilities;

import com.malware98.brokenpath.data.config.AttributeConfig;
import com.malware98.brokenpath.data.config.MainModConfigManager;
import com.malware98.brokenpath.data.config.XpDataConfig; // NEW: Import XpDataConfig
import com.malware98.brokenpath.events.PlayerStatEventHandler;
import com.malware98.brokenpath.network.PacketHandler;
import com.malware98.brokenpath.network.messages.SyncPlayerXPPacket;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.entity.player.Player;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;

import java.util.Optional;

/**
 * // Implements the {@link IPlayerXP} interface, managing a player's experience,
 * // level, and XP debt. This class handles XP gain, level-up logic, and data synchronization
 * // between the server and client.
 */
public class PlayerXP implements IPlayerXP {

    // // --- XP Data Fields ---
    // Current experience points within the player's current level.
    private int experience;
    // Current level of the player.
    private int level;
    // Player's XP debt: experience that must be "repaid" before earning new XP.
    private int xpDebt;
    // Reference to the associated player, required for synchronization.
    private final Player player;

    /**
     * // Constructor to initialize XP, level, and debt for a new player.
     * @param player The player associated with this capability.
     */
    public PlayerXP(Player player) {
        this.player = player;
        this.experience = 0; // Starts with 0 XP.
        this.level = 1;      // Starts at Level 1.
        this.xpDebt = 0;     // Starts with no XP debt.
    }

    // // --- Getters ---
    @Override
    public int getExperience() { return experience; }
    @Override
    public int getLevel() { return level; }
    @Override
    public int getXPDebt() { return xpDebt; }

    // // --- Setters ---
    @Override
    public void setExperience(int experience) {
        this.experience = experience;
        sync(); // Synchronize changes to the client.
    }
    @Override
    public void setLevel(int level) {
        this.level = level;
        sync(); // Synchronize changes to the client.
    }
    @Override
    public void setXPDebt(int xpDebt) {
        this.xpDebt = xpDebt;
        sync(); // Synchronize changes to the client.
    }

    // // --- Main XP Logic ---
    /**
     * // Adds or subtracts experience from the player, handling XP debt and level-ups.
     * // This method is the core logic for all XP modifications.
     * @param amount The amount of experience to add (can be negative for penalties).
     */
    @Override
    public void addExperience(int amount) {
        // // --- Handle XP Debt First ---
        // If the player has XP debt, incoming positive XP is first used to reduce the debt.
        if (this.xpDebt > 0) {
            this.xpDebt -= amount;
            if (this.xpDebt < 0) {
                // If gained XP exceeds debt, the surplus becomes positive XP.
                amount = -this.xpDebt;
                this.xpDebt = 0;
            } else {
                // All XP was consumed by debt, no positive XP remains.
                amount = 0;
            }
        }

        // // --- Handle Negative XP (Penalties) ---
        // If the amount is negative (e.g., from death penalties), subtract directly from XP.
        // If XP falls below zero, the deficit becomes XP debt.
        if (amount < 0) {
            this.experience += amount;
            if (this.experience < 0) {
                this.xpDebt += -this.experience; // Convert deficit into debt.
                this.experience = 0; // XP cannot be negative.
            }
            // Apply death penalty for XP if the player is not at max level (this logic was originally in ModCapabilityEventHandler).
            if (this.level < MainModConfigManager.getInstance().maxLevel) {
                float penaltyPercentage = XpDataConfig.getInstance().getXpLossPercentageOnDeath();
                float maxDebtPercentage = XpDataConfig.getInstance().getXpMaxDebtPercentage();

                // Calculate potential XP to determine penalty scale.
                // Use the XP needed for the current level to scale debt, or next level if already gained some XP for current.
                int xpPotencial = XpDataConfig.getInstance().getXpNeededForNextLevel(this.level);
                if (xpPotencial == 0 && this.level < MainModConfigManager.getInstance().maxLevel) { // Fallback for level 1 or if XP for next level is 0.
                    xpPotencial = 1000; // Default fallback XP.
                }

                int basePenalty = (int) (xpPotencial * penaltyPercentage);
                int maxAllowedDebt = (int) (xpPotencial * maxDebtPercentage);

                // Only apply penalty if current debt is below the max allowed debt.
                if (this.xpDebt < maxAllowedDebt) {
                    this.xpDebt += basePenalty; // Add to debt from the penalty.
                    // Clamp XP debt to the maximum allowed.
                    if (this.xpDebt > maxAllowedDebt) {
                        this.xpDebt = maxAllowedDebt;
                    }
                }
            }
            sync(); // Sync after any XP loss or debt change.
            return;
        }

        // // --- Handle Positive XP Gain (Normal Progression) ---
        if (amount > 0) {
            // Prevent XP gain if player is already at the maximum level.
            if (level >= MainModConfigManager.getInstance().maxLevel) {
                sync();
                return;
            }

            this.experience += amount;
            boolean leveledUpThisCall = false; // Flag to track if a level-up occurred.
            int xpNeededForNextLevel;

            // Loop to handle multiple level-ups if enough XP is gained at once.
            // This prevents "wasted" XP when a large amount is gained.
            while (level < MainModConfigManager.getInstance().maxLevel) {
                xpNeededForNextLevel = XpDataConfig.getInstance().getXpNeededForNextLevel(this.level);

                if (this.experience >= xpNeededForNextLevel) {
                    this.experience -= xpNeededForNextLevel;
                    this.level++;
                    leveledUpThisCall = true; // Mark that a level-up happened.

                    // Award attribute points when leveling up.
                    final int pointsToAward = AttributeConfig.getInstance().getAttributePointsForLevelRange(this.level);
                    if (pointsToAward > 0) {
                        player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                            playerStats.addAttributePoints(pointsToAward);
                        });
                    }
                } else {
                    break; // Not enough XP for the next level, exit loop.
                }
            }

            // Ensure level and XP don't exceed max limits if max level is reached.
            if (level >= MainModConfigManager.getInstance().maxLevel) {
                this.level = MainModConfigManager.getInstance().maxLevel;
                this.experience = 0;
            }

            // Recalculate and apply player stats immediately after a level-up.
            // This is crucial for updating derived stats (e.g., Max Health, Innate Protection)
            // and reflecting them on the client.
            if (leveledUpThisCall) {
                PlayerStatEventHandler.recalculateAndApplyStats(player);
            }

            sync(); // Synchronize all final XP and level changes to the client.
        }
    }

    /**
     * // Resets player's experience, level, and XP debt to their initial default values.
     */
    @Override
    public void resetXP() {
        this.experience = 0;
        this.level = 1;
        this.xpDebt = 0;
        sync(); // Synchronize reset values.
    }

    /**
     * // Copies XP, level, and debt data from another {@link IPlayerXP} instance.
     * @param source The source instance to copy from.
     */
    @Override
    public void copyFrom(IPlayerXP source) {
        this.experience = source.getExperience();
        this.level = source.getLevel();
        this.xpDebt = source.getXPDebt();
    }

    // // --- Data Synchronization ---
    /**
     * // Synchronizes player XP data from the server to the client.
     * // This ensures the client's UI always displays the most current XP information.
     * // Only runs on the server side to prevent client-side desyncs.
     */
    @Override
    public void sync() {
        if (!player.level().isClientSide()) {
            if (player instanceof ServerPlayer serverPlayer) {
                // Calculate XP needed for next level. If at MAX_LEVEL, it's 0.
                int xpNeeded = XpDataConfig.getInstance().getXpNeededForNextLevel(this.level);
                PacketHandler.sendToPlayer(new SyncPlayerXPPacket(this.experience, this.level, this.xpDebt, xpNeeded), serverPlayer);
            }
        }
    }

    // // --- NBT Serialization and Deserialization (Data Persistence) ---
    /**
     * // Serializes player's XP data (experience, level, debt) to a {@link CompoundTag} for saving.
     * @return A CompoundTag containing the serialized XP data.
     */
    @Override
    public CompoundTag serializeNBT() {
        CompoundTag tag = new CompoundTag();
        tag.putInt("brokenpath.player_xp", this.experience);
        tag.putInt("brokenpath.player_level", this.level);
        tag.putInt("brokenpath.player_xp_debt", this.xpDebt);
        return tag;
    }

    /**
     * // Deserializes player's XP data from a {@link CompoundTag} when loading game saves.
     * // Includes validation to ensure loaded levels are within acceptable bounds.
     * @param nbt The CompoundTag containing the serialized XP data.
     */
    @Override
    public void deserializeNBT(CompoundTag nbt) {
        this.experience = nbt.getInt("brokenpath.player_xp");
        this.level = nbt.getInt("brokenpath.player_level");
        this.xpDebt = nbt.getInt("brokenpath.player_xp_debt");

        // Validate loaded level to prevent out-of-bounds issues.
        if (this.level > MainModConfigManager.getInstance().maxLevel) {
            this.level = MainModConfigManager.getInstance().maxLevel;
            this.experience = 0;
            this.xpDebt = 0;
        } else if (this.level < 1) {
            this.level = 1;
            this.experience = 0;
            this.xpDebt = 0;
        }
    }
}
