package com.malware98.brokenpath.capabilities;

import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import net.minecraft.core.Direction;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.world.entity.player.Player;
import net.minecraftforge.common.capabilities.Capability;
import net.minecraftforge.common.capabilities.ICapabilityProvider;
import net.minecraftforge.common.util.INBTSerializable;
import net.minecraftforge.common.util.LazyOptional;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/*
 * Clase que proporciona capacidades (capabilities) a un jugador en el mod "BrokenPath".
 * Gestiona la inicialización, acceso y serialización/deserialización
 * de la capacidad de estadísticas del jugador (PlayerStats).
 */
public class PlayerCapabilityProvider implements ICapabilityProvider, INBTSerializable<CompoundTag> {

    // Declara la instancia del jugador a la que se asocian las capacidades.
    private final Player player;
    // Declara una instancia perezosa (LazyOptional) de IPlayerStats.
    private final LazyOptional<IPlayerStats> instance;

    // Constructor que recibe la instancia del jugador.
    public PlayerCapabilityProvider(Player player) {
        this.player = player;
        // Inicializa LazyOptional, creando una nueva instancia de PlayerStats con el jugador.
        this.instance = LazyOptional.of(() -> new PlayerStats(this.player));
    }

    // Proporciona la capacidad solicitada.
    @Nonnull
    @Override
    public <T> LazyOptional<T> getCapability(@Nonnull Capability<T> cap, @Nullable Direction side) {
        // Devuelve la capacidad de datos del jugador si coincide, de lo contrario, un LazyOptional vacío.
        return cap == ModCapabilities.PLAYER_DATA_CAPABILITY ? instance.cast() : LazyOptional.empty();
    }

    // Serializa los datos de la capacidad a una CompoundTag.
    @Override
    public CompoundTag serializeNBT() {
        // Serializa los datos de la instancia de PlayerStats, lanzando una excepción si es nula.
        return instance.orElseThrow(() -> new IllegalArgumentException("LazyOptional must not be empty!"))
                .serializeNBT();
    }

    // Deserializa los datos de una CompoundTag a la capacidad.
    @Override
    public void deserializeNBT(CompoundTag nbt) {
        // Deserializa los datos en la instancia de PlayerStats, lanzando una excepción si es nula.
        instance.orElseThrow(() -> new IllegalArgumentException("LazyOptional must not be empty!"))
                .deserializeNBT(nbt);
    }
}