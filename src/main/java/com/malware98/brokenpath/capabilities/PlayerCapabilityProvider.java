package com.malware98.brokenpath.capabilities;

import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import net.minecraft.core.Direction;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.world.entity.player.Player;
import net.minecraftforge.common.capabilities.Capability;
import net.minecraftforge.common.capabilities.ICapabilityProvider;
import net.minecraftforge.common.util.INBTSerializable;
import net.minecraftforge.common.util.LazyOptional;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

public class PlayerCapabilityProvider implements ICapabilityProvider, INBTSerializable<CompoundTag> {

    private final Player player;
    // Instancia de PlayerStats, que implementa IPlayerStats
    // El LazyOptional pasa 'player' al constructor de PlayerStats
    private final LazyOptional<IPlayerStats> instance;

    //Constructor que recibe la instancia del jugador
    public PlayerCapabilityProvider(Player player) {
        this.player = player;
        // El LazyOptional se inicializa aquí, pasando 'this.player'
        this.instance = LazyOptional.of(() -> new PlayerStats(this.player));
    }

    @Nonnull
    @Override
    public <T> LazyOptional<T> getCapability(@Nonnull Capability<T> cap, @Nullable Direction side) {
        // Refiere correctamente a PLAYER_DATA_CAPABILITY como se definió en ModCapabilities.java
        return cap == ModCapabilities.PLAYER_DATA_CAPABILITY ? instance.cast() : LazyOptional.empty();
    }

    @Override
    public CompoundTag serializeNBT() {
        // Serialización correcta de la instancia PlayerStats
        return instance.orElseThrow(() -> new IllegalArgumentException("LazyOptional must not be empty!"))
                .serializeNBT();
    }

    @Override
    public void deserializeNBT(CompoundTag nbt) {
        // Deserialize correctamente la instancia de PlayerStats
        instance.orElseThrow(() -> new IllegalArgumentException("LazyOptional must not be empty!"))
                .deserializeNBT(nbt);
    }
}