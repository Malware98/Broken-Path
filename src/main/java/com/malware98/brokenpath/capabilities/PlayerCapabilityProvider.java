package com.malware98.brokenpath.capabilities;

import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import net.minecraft.core.Direction;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.world.entity.player.Player;
import net.minecraftforge.common.capabilities.Capability;
import net.minecraftforge.common.capabilities.ICapabilityProvider;
import net.minecraftforge.common.util.INBTSerializable;
import net.minecraftforge.common.util.LazyOptional;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/**
 * Provides the custom player statistics Capability (PlayerStats) to a player entity.
 * Implements {@link ICapabilityProvider} to attach the capability to a player
 * and {@link INBTSerializable} for saving and loading player stat data to/from NBT.
 */
public class PlayerCapabilityProvider implements ICapabilityProvider, INBTSerializable<CompoundTag> {

    // --- Fields ---
    // Reference to the player entity this capability is attached to.
    private final Player player;
    // LazyOptional instance of the IPlayerStats interface, holding the actual player stats data.
    // LazyOptional ensures the PlayerStats instance is created only when it's first accessed,
    // optimizing resource usage.
    private final LazyOptional<IPlayerStats> instance;

    /**
     * Constructor to initialize the capability provider with a player instance.
     * @param player The player entity associated with this capability.
     */
    public PlayerCapabilityProvider(Player player) {
        this.player = player;
        this.instance = LazyOptional.of(() -> new PlayerStats(this.player));
    }

    // --- Capability Provision ---
    /**
     * Provides the requested capability.
     * @param cap The capability being queried.
     * @param side The direction from which the capability is being queried (can be null).
     * @return A LazyOptional containing the capability instance if it matches PLAYER_DATA_CAPABILITY, otherwise empty.
     */
    @Nonnull
    @Override
    public <T> LazyOptional<T> getCapability(@Nonnull Capability<T> cap, @Nullable Direction side) {
        // Return the IPlayerStats instance if the queried capability is the player data capability.
        return cap == ModCapabilities.PLAYER_DATA_CAPABILITY ? instance.cast() : LazyOptional.empty();
    }

    // --- NBT Serialization (Saving Data) ---
    /**
     * Serializes the player stats data from the capability to a {@link CompoundTag}.
     * This is called by Forge when the player data needs to be saved.
     * @return A CompoundTag containing the serialized player stats data.
     */
    @Override
    public CompoundTag serializeNBT() {
        // Retrieve the IPlayerStats instance and serialize its data.
        return instance.orElseThrow(() -> new IllegalArgumentException("LazyOptional must not be empty!"))
                .serializeNBT();
    }

    // --- NBT Deserialization (Loading Data) ---
    /**
     * Deserializes the player stats data from a {@link CompoundTag} to the capability.
     * This is called by Forge when player data is loaded.
     * @param nbt The CompoundTag containing the serialized player stats data.
     */
    @Override
    public void deserializeNBT(CompoundTag nbt) {
        // Retrieve the IPlayerStats instance and deserialize the NBT data into it.
        instance.orElseThrow(() -> new IllegalArgumentException("LazyOptional must not be empty!"))
                .deserializeNBT(nbt);
    }
}