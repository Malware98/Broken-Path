package com.malware98.brokenpath.data;

import com.malware98.brokenpath.BrokenPath;
import net.minecraft.core.registries.Registries;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.damagesource.DamageType;
import net.minecraftforge.registries.DeferredRegister;

/**
 * Centralizes the definition of {@link ResourceKey}s for custom damage types in "BrokenPath".
 * These ResourceKeys serve as unique identifiers for damage types,
 * whose specific properties are configured via data-driven JSON files.
 */
public class ModDamageTypes {
    // DeferredRegister for registering custom damage types.
    public static final DeferredRegister<DamageType> DAMAGE_TYPES =
            DeferredRegister.create(Registries.DAMAGE_TYPE, BrokenPath.MOD_ID);

    // --- Physical Damage Types ---
    /**
     * ResourceKey for slashing damage.
     * Represents damage from cutting weapons like swords.
     */
    public static final ResourceKey<DamageType> SLASHING =
            ResourceKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "slashing"));
    /**
     * ResourceKey for piercing damage.
     * Represents damage from thrusting weapons like arrows or spears.
     */
    public static final ResourceKey<DamageType> PIERCING =
            ResourceKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "piercing"));
    /**
     * ResourceKey for blunt damage.
     * Represents damage from crushing weapons like maces or hammers.
     */
    public static final ResourceKey<DamageType> BLUNT =
            ResourceKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "blunt"));

    // --- Magic Damage Types ---
    /**
     * ResourceKey for fire magic damage.
     */
    public static final ResourceKey<DamageType> FIRE_MAGIC =
            ResourceKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "fire_magic"));
    /**
     * ResourceKey for ice magic damage.
     */
    public static final ResourceKey<DamageType> ICE_MAGIC =
            ResourceKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "ice_magic"));
    /**
     * ResourceKey for electric magic damage.
     */
    public static final ResourceKey<DamageType> ELECTRIC_MAGIC =
            ResourceKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "electric_magic"));
    /**
     * ResourceKey for dark magic damage.
     */
    public static final ResourceKey<DamageType> DARK_MAGIC =
            ResourceKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "dark_magic"));
    /**
     * ResourceKey for sonic magic damage.
     */
    public static final ResourceKey<DamageType> SONIC_MAGIC =
            ResourceKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "sonic_magic"));
    /**
     * ResourceKey for radiant magic damage.
     */
    public static final ResourceKey<DamageType> RADIANT_MAGIC =
            ResourceKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "radiant_magic"));
    /**
     * ResourceKey for arcane magic damage.
     */
    public static final ResourceKey<DamageType> ARCANE_MAGIC =
            ResourceKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "arcane_magic"));

    // --- Special Damage Types ---
    /**
     * ResourceKey for chaotic damage.
     * Intended for unpredictable or untyped damage sources.
     */
    public static final ResourceKey<DamageType> CHAOTIC =
            ResourceKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "chaotic"));
    /**
     * ResourceKey for true damage.
     * This damage type is designed to ignore armor, effects, and invulnerability frames.
     */
    public static final ResourceKey<DamageType> TRUE_DAMAGE =
            ResourceKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "true_damage"));

    // Note: DamageType instances are not directly registered here.
    // Their detailed configuration (e.g., exhaustion, message_id, scaling, effects)
    // is defined through JSON files located in `data/<mod id>/damage_type/`.
}