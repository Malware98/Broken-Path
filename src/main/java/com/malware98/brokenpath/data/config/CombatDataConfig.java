package com.malware98.brokenpath.data.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;

/**
 * Manages configurable values related to combat mechanics.
 * Includes settings for damage penetration.
 * Implements the Singleton pattern.
 */
public class CombatDataConfig {

    // --- Singleton Instance ---
    private static CombatDataConfig INSTANCE;

    // --- Logger ---
    private static final Logger LOGGER = LogManager.getLogger(BrokenPath.MOD_ID + "_CombatDataConfig");

    // --- Gson Instance ---
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    // --- Configuration File Path ---
    private static final String CONFIG_FILE_NAME = "brokenpath_combat_settings.json";
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // --- Configuration Values ---
    public float damagePenetrationPercentage; // Percentage of damage that ignores protection.

    // --- Constructor ---
    private CombatDataConfig() {
        initializeDefaults();
    }

    // --- Singleton Access Method ---
    public static CombatDataConfig getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new CombatDataConfig();
        }
        return INSTANCE;
    }

    // --- Default Initialization ---
    private void initializeDefaults() {
        damagePenetrationPercentage = 0.25f; // Default: 25% of damage ignores protection.
    }

    // --- Configuration Loading/Saving ---
    /**
     * Loads combat configurations from 'brokenpath_combat_settings.json'.
     */
    public void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                CombatDataConfig loadedConfig = GSON.fromJson(reader, CombatDataConfig.class);
                if (loadedConfig != null) {
                    this.damagePenetrationPercentage = loadedConfig.damagePenetrationPercentage;
                } else {
                    LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default combat configurations.", CONFIG_FILE_NAME);
                    initializeDefaults();
                }
            } catch (Exception e) {
                LOGGER.error("Error parsing or reading combat configuration file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                initializeDefaults();
            }
        } else {
            LOGGER.info("Combat configuration file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            saveConfig();
        }

        if (this.damagePenetrationPercentage < 0.0f || this.damagePenetrationPercentage > 1.0f) {
            this.damagePenetrationPercentage = 0.25f;
        }
    }

    /**
     * Saves the current combat configuration to 'brokenpath_combat_settings.json'.
     */
    public void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(this, writer);
        } catch (IOException e) {
            LOGGER.error("Failed to save combat configuration file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // --- Getters for Configuration Values ---
    public float getDamagePenetrationPercentage() { return damagePenetrationPercentage; }
}