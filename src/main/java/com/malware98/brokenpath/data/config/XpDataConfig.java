// XpDataConfig.java
package com.malware98.brokenpath.data.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * // --- XP Data Configuration ---
 * // Manages all configurable values related to player experience point (XP) progression.
 * // This includes the XP formula for leveling, smelting XP rewards, and death penalties.
 * // Implements the Singleton pattern for consistent access.
 */
public class XpDataConfig {

    // // --- Singleton Instance ---
    private static XpDataConfig INSTANCE;

    // // --- Logger ---
    private static final Logger LOGGER = LogManager.getLogger(BrokenPath.MOD_ID + "_XpDataConfig");

    // // --- Gson Instance ---
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    // // --- Configuration File Path ---
    private static final String CONFIG_FILE_NAME = "brokenpath_xp_settings.json";
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // // --- Configuration Values ---
    public XpProgressionSettings xpProgression;
    public Map<String, Integer> smeltingXpRewards;
    public float xpLossPercentageOnDeath;
    public float xpMaxDebtPercentage;
    public int defaultSmeltingXp;

    /**
     * // --- Private Constructor for Singleton ---
     * // Initializes default values for XP configurations.
     */
    private XpDataConfig() {
        initializeDefaults();
    }

    /**
     * // --- Singleton Access Method ---
     * @return The singleton instance of XpDataConfig.
     */
    public static XpDataConfig getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new XpDataConfig();
        }
        return INSTANCE;
    }

    /**
     * // --- Default Initialization Logic ---
     * // Sets up all XP-related configuration values with their default settings.
     */
    private void initializeDefaults() {
        xpProgression = new XpProgressionSettings();
        smeltingXpRewards = new HashMap<>();

        // Default XP Progression Settings
        xpProgression.baseXp = 100.0f;
        xpProgression.linearXpCoefficient = 50.0f;
        xpProgression.polynomialXpCoefficient = 1.2f;
        xpProgression.polynomialXpExponent = 2.5f;
        xpProgression.minXpPerLevel = 100;

        // Default Smelting XP Rewards
        smeltingXpRewards.put("minecraft:iron_ingot", 2);
        smeltingXpRewards.put("minecraft:gold_ingot", 3);
        smeltingXpRewards.put("minecraft:copper_ingot", 1);
        smeltingXpRewards.put("minecraft:cooked_beef", 1);
        smeltingXpRewards.put("minecraft:charcoal", 1);
        smeltingXpRewards.put("minecraft:lapis_lazuli", 2);
        smeltingXpRewards.put("minecraft:redstone", 2);
        smeltingXpRewards.put("minecraft:emerald", 2);
        smeltingXpRewards.put("minecraft:diamond", 4);
        smeltingXpRewards.put("minecraft:coal", 1);
        smeltingXpRewards.put("minecraft:quartz", 2);
        smeltingXpRewards.put("minecraft:netherite_scrap", 10);
        smeltingXpRewards.put("minecraft:cooked_porkchop", 1);
        smeltingXpRewards.put("minecraft:cooked_chicken", 1);
        smeltingXpRewards.put("minecraft:cooked_mutton", 1);
        smeltingXpRewards.put("minecraft:cooked_rabbit", 1);
        smeltingXpRewards.put("minecraft:cooked_fish", 1);
        smeltingXpRewards.put("minecraft:cooked_salmon", 1);
        smeltingXpRewards.put("minecraft:baked_potato", 1);
        smeltingXpRewards.put("minecraft:dried_kelp", 1);
        smeltingXpRewards.put("minecraft:stone", 1);
        smeltingXpRewards.put("minecraft:smooth_stone", 1);
        smeltingXpRewards.put("minecraft:brick", 1);
        smeltingXpRewards.put("minecraft:nether_brick", 1);
        smeltingXpRewards.put("minecraft:green_dye", 1);
        smeltingXpRewards.put("minecraft:sponge", 1);
        smeltingXpRewards.put("minecraft:glass", 1);

        // XP Loss and Debt Settings
        xpLossPercentageOnDeath = 0.10f; // Percentage of current XP lost upon death.
        xpMaxDebtPercentage = 0.15f; // Maximum XP debt that can be accumulated.
        defaultSmeltingXp = 1; // Default XP for smelting if not specifically listed.
    }

    /**
     * // --- Load Configuration from JSON ---
     * // Loads XP configurations from 'brokenpath_xp_settings.json'.
     */
    public void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                XpDataConfig loadedConfig = GSON.fromJson(reader, XpDataConfig.class);
                if (loadedConfig != null) {
                    this.xpProgression = Optional.ofNullable(loadedConfig.xpProgression).orElseGet(XpProgressionSettings::new);
                    this.smeltingXpRewards = Optional.ofNullable(loadedConfig.smeltingXpRewards).orElseGet(HashMap::new);
                    this.xpLossPercentageOnDeath = loadedConfig.xpLossPercentageOnDeath;
                    this.xpMaxDebtPercentage = loadedConfig.xpMaxDebtPercentage;
                    this.defaultSmeltingXp = loadedConfig.defaultSmeltingXp;
                } else {
                    LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default XP configurations.", CONFIG_FILE_NAME);
                    initializeDefaults();
                }
            } catch (Exception e) { // Catching generic Exception for robustness against JsonSyntaxException or IOException
                LOGGER.error("Error parsing or reading XP configuration file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                initializeDefaults();
            }
        } else {
            LOGGER.info("XP configuration file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            saveConfig(); // Create new file with defaults
        }

        // Post-load safety net for critical values
        if (this.xpLossPercentageOnDeath < 0.0f) this.xpLossPercentageOnDeath = 0.10f;
        if (this.xpMaxDebtPercentage < 0.0f) this.xpMaxDebtPercentage = 0.15f;
    }

    /**
     * // --- Save Configuration to JSON ---
     * // Saves the current XP configuration to 'brokenpath_xp_settings.json'.
     */
    public void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(this, writer);
        } catch (IOException e) {
            LOGGER.error("Failed to save XP configuration file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // // --- Getters for Configuration Values ---

    /**
     * // Calculates the amount of XP required for the next player level based on a configurable formula.
     * @param currentLevel The player's current level.
     * @return The XP needed to reach the next level. Returns 0 if the player is already at the maximum level.
     */
    public int getXpNeededForNextLevel(int currentLevel) {
        if (currentLevel >= MainModConfigManager.getInstance().maxLevel) {
            return 0; // No more XP needed at max level.
        }

        final float A = xpProgression.baseXp;
        final float B = xpProgression.linearXpCoefficient;
        final float C = xpProgression.polynomialXpCoefficient;
        final float EXP = xpProgression.polynomialXpExponent;

        // Formula: XP_Needed = A + (B * Level) + (C * Level^EXP)
        double xpNeededDouble = A + (B * currentLevel) + (C * Math.pow(currentLevel, EXP));

        int xpNeeded = (int) Math.round(xpNeededDouble);

        // Ensure a minimum XP per level.
        if (xpNeeded < xpProgression.minXpPerLevel) {
            xpNeeded = xpProgression.minXpPerLevel;
        }
        return xpNeeded;
    }

    public Map<String, Integer> getSmeltingXpRewards() { return smeltingXpRewards; }
    public float getXpLossPercentageOnDeath() { return xpLossPercentageOnDeath; }
    public float getXpMaxDebtPercentage() { return xpMaxDebtPercentage; }
    public int getDefaultSmeltingXp() { return defaultSmeltingXp; }

    // // --- Nested Class for XP Progression Settings ---
    /**
     * // Represents the configurable settings for XP progression formula.
     */
    public static class XpProgressionSettings {
        public float baseXp;
        public float linearXpCoefficient;
        public float polynomialXpCoefficient;
        public float polynomialXpExponent;
        public int minXpPerLevel;

        public XpProgressionSettings() {}
    }
}
