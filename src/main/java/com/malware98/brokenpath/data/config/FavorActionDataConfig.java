// FavorActionDataConfig.java
package com.malware98.brokenpath.data.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * // --- Favor Action Data Configuration ---
 * // Manages configurable modifiers to player Favor (luck) based on specific in-game actions.
 * // This includes actions like taming animals, trading with villagers, killing certain entities, etc.
 * // Implements the Singleton pattern for consistent access.
 */
public class FavorActionDataConfig {

    // // --- Singleton Instance ---
    private static FavorActionDataConfig INSTANCE;

    // // --- Logger ---
    private static final Logger LOGGER = LogManager.getLogger(BrokenPath.MOD_ID + "_FavorActionDataConfig");

    // // --- Gson Instance ---
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    // // --- Configuration File Path ---
    private static final String CONFIG_FILE_NAME = "brokenpath_favor_action_modifiers.json";
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // // --- Configuration Values ---
    public Map<String, Float> favorActionModifiers;

    /**
     * // --- Private Constructor for Singleton ---
     * // Initializes default values for favor action modifiers.
     */
    private FavorActionDataConfig() {
        initializeDefaults();
    }

    /**
     * // --- Singleton Access Method ---
     * @return The singleton instance of FavorActionDataConfig.
     */
    public static FavorActionDataConfig getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new FavorActionDataConfig();
        }
        return INSTANCE;
    }

    /**
     * // --- Default Initialization Logic ---
     * // Sets up all default favor action modifiers.
     */
    private void initializeDefaults() {
        favorActionModifiers = new HashMap<>();

        // Default Favor Action Modifiers
        favorActionModifiers.put("TAME_WOLF", 1.5f);
        favorActionModifiers.put("TAME_CAT", 1.5f);
        favorActionModifiers.put("TAME_HORSE", 1.5f);
        favorActionModifiers.put("TAME_DONKEY", 1.5f);
        favorActionModifiers.put("TAME_MULE", 1.5f);
        favorActionModifiers.put("TAME_LLAMA", 1.5f);
        favorActionModifiers.put("FEED_CHICKEN", 1.0f);
        favorActionModifiers.put("FEED_COW", 1.0f);
        favorActionModifiers.put("FEED_PIG", 1.0f);
        favorActionModifiers.put("FEED_SHEEP", 1.0f);
        favorActionModifiers.put("FEED_PARROT", 1.0f);
        favorActionModifiers.put("FEED_PANDA", 1.0f);
        favorActionModifiers.put("FEED_FOX", 1.0f);

        favorActionModifiers.put("KILL_WOLF", -2.5f);
        favorActionModifiers.put("KILL_CAT", -2.5f);
        favorActionModifiers.put("KILL_HORSE", -2.5f);
        favorActionModifiers.put("KILL_DONKEY", -2.5f);
        favorActionModifiers.put("KILL_MULE", -2.5f);
        favorActionModifiers.put("KILL_LLAMA", -2.5f);
        favorActionModifiers.put("KILL_PARROT", -2.5f);
        favorActionModifiers.put("KILL_PANDA", -2.5f);
        favorActionModifiers.put("KILL_FOX", -2.5f);

        favorActionModifiers.put("TRADE_FARMER", 0.75f);
        favorActionModifiers.put("TRADE_FISHERMAN", 0.75f);
        favorActionModifiers.put("TRADE_SHEPHERD", 0.75f);
        favorActionModifiers.put("TRADE_LEATHERWORKER", 0.75f);
        favorActionModifiers.put("TRADE_MASON", 0.75f);

        favorActionModifiers.put("TRADE_CARTOGRAPHER", 1.0f);
        favorActionModifiers.put("TRADE_FLETCHER", 1.0f);
        favorActionModifiers.put("TRADE_BUTCHER", 1.0f);
        favorActionModifiers.put("TRADE_TOOLSMITH", 1.25f);
        favorActionModifiers.put("TRADE_WEAPONSMITH", 1.25f);

        favorActionModifiers.put("TRADE_LIBRARIAN", 1.75f);
        favorActionModifiers.put("TRADE_CLERIC", 1.75f);
        favorActionModifiers.put("TRADE_ARMORER", 1.75f);
        favorActionModifiers.put("DEFEND_RAID", 15.0f);

        favorActionModifiers.put("TRADE_VILLAGER", 0.5f); // Generic fallback

        favorActionModifiers.put("ATTACK_VILLAGER", -1.5f);
        favorActionModifiers.put("ATTACK_FARMER", -2.0f);
        favorActionModifiers.put("ATTACK_FISHERMAN", -2.0f);
        favorActionModifiers.put("ATTACK_SHEPHERD", -2.0f);
        favorActionModifiers.put("ATTACK_LEATHERWORKER", -2.0f);
        favorActionModifiers.put("ATTACK_MASON", -2.0f);
        favorActionModifiers.put("ATTACK_CARTOGRAPHER", -2.5f);
        favorActionModifiers.put("ATTACK_FLETCHER", -2.5f);
        favorActionModifiers.put("ATTACK_BUTCHER", -2.5f);
        favorActionModifiers.put("ATTACK_TOOLSMITH", -3.0f);
        favorActionModifiers.put("ATTACK_WEAPONSMITH", -3.0f);
        favorActionModifiers.put("ATTACK_ARMORER", -3.0f);
        favorActionModifiers.put("ATTACK_LIBRARIAN", -3.5f);
        favorActionModifiers.put("ATTACK_CLERIC", -4.0f);
        favorActionModifiers.put("KILL_VILLAGER", -7.5f);
        favorActionModifiers.put("DESTROY_VILLAGE_BLOCK", -2.5f);

        favorActionModifiers.put("REPAIR_GOLEM", 0.5f);

        favorActionModifiers.put("DAMAGE_GOLEM", -1.0f);
        favorActionModifiers.put("SHEAR_SNOW_GOLEM_PUMPKIN", -2.5f);
        favorActionModifiers.put("KILL_GOLEM", -5.0f);
    }

    /**
     * // --- Load Configuration from JSON ---
     * // Loads favor action modifiers from 'brokenpath_favor_action_modifiers.json'.
     */
    public void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                FavorActionDataConfig loadedConfig = GSON.fromJson(reader, FavorActionDataConfig.class);
                if (loadedConfig != null && loadedConfig.favorActionModifiers != null) {
                    this.favorActionModifiers = loadedConfig.favorActionModifiers;
                } else {
                    LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default favor action modifiers.", CONFIG_FILE_NAME);
                    initializeDefaults();
                }
            } catch (Exception e) { // Catching generic Exception for robustness against JsonSyntaxException or IOException
                LOGGER.error("Error parsing or reading favor action modifiers file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                initializeDefaults();
            }
        } else {
            LOGGER.info("Favor action modifiers file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            saveConfig(); // Create new file with defaults
        }
    }

    /**
     * // --- Save Configuration to JSON ---
     * // Saves the current favor action modifiers to 'brokenpath_favor_action_modifiers.json'.
     */
    public void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(this, writer);
        } catch (IOException e) {
            LOGGER.error("Failed to save favor action modifiers file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // // --- Getters for Configuration Values ---

    /**
     * // Retrieves the favor modification value for a specific action.
     * @param actionKey The key identifying the action (e.g., "TAME_WOLF").
     * @return The float value by which Favor should be modified, or 0.0f if the action is not defined.
     */
    public float getFavorModifier(String actionKey) {
        return favorActionModifiers.getOrDefault(actionKey.toUpperCase(), 0.0f);
    }
}
