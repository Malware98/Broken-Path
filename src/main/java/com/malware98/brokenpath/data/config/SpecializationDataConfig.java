package com.malware98.brokenpath.data.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

/**
 * Manages configurable values related to player specializations, including flat stat bonuses.
 * Implements the Singleton pattern.
 */
public class SpecializationDataConfig {

    // --- Singleton Instance ---
    private static SpecializationDataConfig INSTANCE;

    // --- Logger ---
    private static final Logger LOGGER = LogManager.getLogger(BrokenPath.MOD_ID + "_SpecializationDataConfig");

    // --- Gson Instance ---
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    // --- Configuration File Path ---
    private static final String CONFIG_FILE_NAME = "brokenpath_player_specializations.json";
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // --- Configuration Values ---
    public Map<String, SpecializationSettings> specializationSettings;

    // --- Constructor ---
    private SpecializationDataConfig() {
        initializeDefaults();
    }

    // --- Singleton Access Method ---
    public static SpecializationDataConfig getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new SpecializationDataConfig();
        }
        return INSTANCE;
    }

    // --- Default Initialization ---
    private void initializeDefaults() {
        specializationSettings = new HashMap<>();
        float bonusValue = 30.0f;

        // CHAMPION Specializations
        specializationSettings.put("LEGION_OF_THE_BASTION", new SpecializationSettings("PROTECTION", bonusValue));
        specializationSettings.put("LEGION_OF_THE_SUN", new SpecializationSettings("MANA", bonusValue));
        specializationSettings.put("LEGION_OF_THE_OATH", new SpecializationSettings("VIGOR", bonusValue));

        // SORCERER Specializations
        specializationSettings.put("ACADEMY_OF_THE_ECLIPSE", new SpecializationSettings("HEALTH", bonusValue));
        specializationSettings.put("ACADEMY_OF_OBLIVION", new SpecializationSettings("PROTECTION", bonusValue));
        specializationSettings.put("ACADEMY_OF_LIGHTNING", new SpecializationSettings("VIGOR", bonusValue));

        // BERSERKER Specializations
        specializationSettings.put("BLAZING_SHADOW_CLAN", new SpecializationSettings("MANA", bonusValue));
        specializationSettings.put("BLOODY_FANG_CLAN", new SpecializationSettings("HEALTH", bonusValue));
        specializationSettings.put("BESTIAL_PATH_CLAN", new SpecializationSettings("PROTECTION", bonusValue));

        // SHAMAN Specializations
        specializationSettings.put("SHARPENED_BONE_TRIBE", new SpecializationSettings("MANA", bonusValue));
        specializationSettings.put("ETERNAL_GUARD_TRIBE", new SpecializationSettings("HEALTH", bonusValue));
        specializationSettings.put("WITHERED_VOICE_TRIBE", new SpecializationSettings("PROTECTION", bonusValue));

        // EXPLORER Specializations
        specializationSettings.put("POISON_FANG_PATH", new SpecializationSettings("MANA", bonusValue));
        specializationSettings.put("HUNTERS_PATH", new SpecializationSettings("HEALTH", bonusValue));
        specializationSettings.put("BREEZE_PATH", new SpecializationSettings("PROTECTION", bonusValue));

        // CHANNELER Specializations
        specializationSettings.put("SERENE_TIDE_CIRCLE", new SpecializationSettings("VIGOR", bonusValue));
        specializationSettings.put("STORMY_LIGHTNING_CIRCLE", new SpecializationSettings("PROTECTION", bonusValue));
        specializationSettings.put("SLEEPING_SWAMP_CIRCLE", new SpecializationSettings("HEALTH", bonusValue));

        // VESTAL Specializations
        specializationSettings.put("WHITE_FLAME_BEACON", new SpecializationSettings("PROTECTION", bonusValue));
        specializationSettings.put("GOLDEN_MANTLE_BEACON", new SpecializationSettings("VIGOR", bonusValue));
        specializationSettings.put("CELESTIAL_JUDGMENT_BEACON", new SpecializationSettings("MANA", bonusValue));

        // TECHNOMANCER Specializations
        specializationSettings.put("ZERO_APPROACH_PROTOCOL", new SpecializationSettings("HEALTH", bonusValue));
        specializationSettings.put("BINARY_INTERFERENCE_PROTOCOL", new SpecializationSettings("MANA", bonusValue));
        specializationSettings.put("ALPHA_ASSISTANCE_PROTOCOL", new SpecializationSettings("VIGOR", bonusValue));

        // NO_SPECIALIZATION entry
        specializationSettings.put("NO_SPECIALIZATION", new SpecializationSettings("", 0.0f));
    }

    // --- Configuration Loading/Saving ---
    /**
     * Loads specialization configurations from 'brokenpath_player_specializations.json'.
     */
    public void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                SpecializationDataConfig loadedConfig = GSON.fromJson(reader, SpecializationDataConfig.class);
                if (loadedConfig != null && loadedConfig.specializationSettings != null) {
                    this.specializationSettings = loadedConfig.specializationSettings;
                } else {
                    LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default specialization configurations.", CONFIG_FILE_NAME);
                    initializeDefaults();
                }
            } catch (Exception e) {
                LOGGER.error("Error parsing or reading specialization configuration file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                initializeDefaults();
            }
        } else {
            LOGGER.info("Specialization configuration file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            saveConfig();
        }
    }

    /**
     * Saves the current specialization configuration to 'brokenpath_player_specializations.json'.
     */
    public void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(this, writer);
        } catch (IOException e) {
            LOGGER.error("Failed to save specialization configuration file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // --- Getters for Configuration Values ---
    /**
     * Retrieves the settings for a specific specialization.
     * @param specializationName The name of the specialization.
     * @return The SpecializationSettings object, or default empty settings if not found.
     */
    public SpecializationSettings getSpecializationSettings(String specializationName) {
        return specializationSettings.getOrDefault(specializationName.toUpperCase(), new SpecializationSettings());
    }

    // --- Nested Class for Specialization Settings ---
    /**
     * Represents the configurable settings for a single player specialization.
     */
    public static class SpecializationSettings {
        public String statBonusName; // The name of the stat that receives the flat bonus
        public float statBonusValue; // The value of the fixed flat bonus

        public SpecializationSettings() {
            this.statBonusName = "";
            this.statBonusValue = 0.0f;
        }

        public SpecializationSettings(String statBonusName, float statBonusValue) {
            this.statBonusName = statBonusName;
            this.statBonusValue = statBonusValue;
        }

        public String getStatBonusName() { return statBonusName; }
        public float getStatBonusValue() { return statBonusValue; }
    }
}