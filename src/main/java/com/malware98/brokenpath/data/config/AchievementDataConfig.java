package com.malware98.brokenpath.data.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

/**
 * Manages configurable values related to mod-specific achievements.
 * Includes XP rewards and completion thresholds.
 * Implements the Singleton pattern.
 */
public class AchievementDataConfig {

    // --- Singleton Instance ---
    private static AchievementDataConfig INSTANCE;

    // --- Logger ---
    private static final Logger LOGGER = LogManager.getLogger(BrokenPath.MOD_ID + "_AchievementDataConfig");

    // --- Gson Instance ---
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    // --- Configuration File Path ---
    private static final String CONFIG_FILE_NAME = "brokenpath_achievement_rewards.json";
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // --- Configuration Values ---
    public Map<String, AchievementConfig> achievements;

    // --- Constructor ---
    private AchievementDataConfig() {
        initializeDefaults();
    }

    // --- Singleton Access Method ---
    public static AchievementDataConfig getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new AchievementDataConfig();
        }
        return INSTANCE;
    }

    // --- Default Initialization ---
    private void initializeDefaults() {
        achievements = new HashMap<>();

        achievements.put("EXPLORATION_ROOT", new AchievementConfig(20, 1));
        achievements.put("EXPLORER_NOVICE", new AchievementConfig(10, 5));
        achievements.put("LOCAL_ADVENTURER", new AchievementConfig(50, 10));
        achievements.put("ACCOMPLISHED_CARTOGRAPHER", new AchievementConfig(100, 15));
        achievements.put("UNKNOWN_PIONEER", new AchievementConfig(200, 1));

        achievements.put("FLEDGLING_ADVOCATE", new AchievementConfig(40, 10));
        achievements.put("CREATURE_HUNTER", new AchievementConfig(90, 50));
        achievements.put("THREATS_EXTERMINATOR", new AchievementConfig(300, 200));
        achievements.put("SHADOWS_TERROR", new AchievementConfig(600, 500));
        achievements.put("MASACRE_MASTER", new AchievementConfig(1000, 1000));

        achievements.put("ROCK_FINDER", new AchievementConfig(10, 64));
        achievements.put("AMATEUR_EXCAVATOR", new AchievementConfig(60, 100));
        achievements.put("SKILLED_MINERALOGIST", new AchievementConfig(180, 500));
        achievements.put("GEOLOGIST_EXPERT", new AchievementConfig(350, 1000));
        achievements.put("MINING_MASTER", new AchievementConfig(700, 2500));
        achievements.put("HIDDEN_TREASURE", new AchievementConfig(250, 50));
        achievements.put("MASTER_OBSIDIAN", new AchievementConfig(150, 20));

        achievements.put("NOVICE_SOWER", new AchievementConfig(30, 50));
        achievements.put("DEDICATED_FARMER", new AchievementConfig(80, 200));
        achievements.put("ACCOMPLISHED_AGRONOMIST", new AchievementConfig(180, 500));
        achievements.put("HARVEST_POWER", new AchievementConfig(350, 1000));
        achievements.put("BEAST_TAMER", new AchievementConfig(100, 3));
        achievements.put("TIRELESS_SHEPHERD", new AchievementConfig(200, 10));
        achievements.put("SUCCESSFUL_BREEDER", new AchievementConfig(150, 20));

        achievements.put("NOVICE_CRAFTER", new AchievementConfig(20, 25));
        achievements.put("CREATIVE_CRAFTER", new AchievementConfig(50, 50));
        achievements.put("ARTISAN_APPRENTICE", new AchievementConfig(100, 100));
        achievements.put("MASTER_CRAFTSMAN", new AchievementConfig(250, 150));
        achievements.put("ART_KITCHEN", new AchievementConfig(70, 50));
        achievements.put("TIRELESS_FURNACE", new AchievementConfig(160, 200));

        achievements.put("FIRST_STEPS", new AchievementConfig(10, 100));
        achievements.put("CONSTANT_WALKER", new AchievementConfig(100, 1000));
        achievements.put("TIRELESS_TRAVELER", new AchievementConfig(250, 5000));
        achievements.put("HUNGER_RESISTANT", new AchievementConfig(180, 1));
        achievements.put("A_WHOLE_DAY", new AchievementConfig(50, 1));
        achievements.put("ONE_WEEK_WORLD", new AchievementConfig(200, 7));
        achievements.put("IM_STILL_ALIVE", new AchievementConfig(800, 30));
        achievements.put("SURVIVAL_ROOT", new AchievementConfig(10, 1));
    }

    // --- Configuration Loading/Saving ---
    /**
     * Loads achievement configurations from 'brokenpath_achievement_rewards.json'.
     */
    public void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                AchievementDataConfig loadedConfig = GSON.fromJson(reader, AchievementDataConfig.class);
                if (loadedConfig != null && loadedConfig.achievements != null) {
                    this.achievements = loadedConfig.achievements;
                } else {
                    LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default achievement configurations.", CONFIG_FILE_NAME);
                    initializeDefaults();
                }
            } catch (Exception e) {
                LOGGER.error("Error parsing or reading achievement configuration file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                initializeDefaults();
            }
        } else {
            LOGGER.info("Achievement configuration file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            saveConfig();
        }
    }

    /**
     * Saves the current achievement configuration to 'brokenpath_achievement_rewards.json'.
     */
    public void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(this, writer);
        } catch (IOException e) {
            LOGGER.error("Failed to save achievement configuration file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // --- Getters for Configuration Values ---
    /**
     * Gets the achievement configuration for a specific achievement key.
     * @param achievementKey The key identifier of the achievement.
     * @return The AchievementConfig for the specified achievement, or null if not found.
     */
    public AchievementConfig getAchievementConfig(String achievementKey) {
        return achievements.get(achievementKey.toUpperCase());
    }

    // --- Nested Class for Achievement Settings ---
    /**
     * Represents the configurable settings for a single achievement.
     */
    public static class AchievementConfig {
        public int xpReward; // XP awarded when the achievement is completed.
        public int threshold; // The numerical value required to trigger the achievement.

        public AchievementConfig() {}

        public AchievementConfig(int xpReward, int threshold) {
            this.xpReward = xpReward;
            this.threshold = threshold;
        }
    }
}