package com.malware98.brokenpath.data.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;

/**
 * Manages configurable values related to villager trading interactions.
 * Includes cooldowns for favor gain and default XP rewards.
 * Implements the Singleton pattern.
 */
public class VillagerTradeDataConfig {

    // --- Singleton Instance ---
    private static VillagerTradeDataConfig INSTANCE;

    // --- Logger ---
    private static final Logger LOGGER = LogManager.getLogger(BrokenPath.MOD_ID + "_VillagerTradeDataConfig");

    // --- Gson Instance ---
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    // --- Configuration File Path ---
    private static final String CONFIG_FILE_NAME = "brokenpath_villager_trade_settings.json";
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // --- Configuration Values ---
    public int tradeFavorCooldownTicks;
    public int maxTradesBeforeCooldown;
    public int defaultTradeXp;

    // --- Constructor ---
    private VillagerTradeDataConfig() {
        initializeDefaults();
    }

    // --- Singleton Access Method ---
    public static VillagerTradeDataConfig getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new VillagerTradeDataConfig();
        }
        return INSTANCE;
    }

    // --- Default Initialization ---
    private void initializeDefaults() {
        tradeFavorCooldownTicks = 20 * 60 * 5; // 5 minutes in ticks
        maxTradesBeforeCooldown = 10;
        defaultTradeXp = 5;
    }

    // --- Configuration Loading/Saving ---
    /**
     * Loads villager trade configurations from 'brokenpath_villager_trade_settings.json'.
     */
    public void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                VillagerTradeDataConfig loadedConfig = GSON.fromJson(reader, VillagerTradeDataConfig.class);
                if (loadedConfig != null) {
                    this.tradeFavorCooldownTicks = loadedConfig.tradeFavorCooldownTicks;
                    this.maxTradesBeforeCooldown = loadedConfig.maxTradesBeforeCooldown;
                    this.defaultTradeXp = loadedConfig.defaultTradeXp;
                } else {
                    LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default villager trade configurations.", CONFIG_FILE_NAME);
                    initializeDefaults();
                }
            } catch (Exception e) {
                LOGGER.error("Error parsing or reading villager trade configuration file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                initializeDefaults();
            }
        } else {
            LOGGER.info("Villager trade configuration file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            saveConfig();
        }

        if (this.tradeFavorCooldownTicks < 0) this.tradeFavorCooldownTicks = 20 * 60 * 5;
        if (this.maxTradesBeforeCooldown < 0) this.maxTradesBeforeCooldown = 10;
        if (this.defaultTradeXp < 0) this.defaultTradeXp = 5;
    }

    /**
     * Saves the current villager trade configuration to 'brokenpath_villager_trade_settings.json'.
     */
    public void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(this, writer);
        } catch (IOException e) {
            LOGGER.error("Failed to save villager trade configuration file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // --- Getters for Configuration Values ---
    public int getTradeFavorCooldownTicks() { return tradeFavorCooldownTicks; }
    public int getMaxTradesBeforeCooldown() { return maxTradesBeforeCooldown; }
    public int getDefaultTradeXp() { return defaultTradeXp; }
}