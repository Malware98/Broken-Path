// AttributeConfig.java
package com.malware98.brokenpath.data.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * // --- Attribute Configuration ---
 * // Manages all configurable values related to player core attributes (Constitution, Strength, Dexterity, Intelligence).
 * // This includes attribute multipliers, manual allocation limits, and level-based point progression.
 * // Implements the Singleton pattern for consistent access.
 */
public class AttributeConfig {

    // // --- Singleton Instance ---
    // The single instance of AttributeConfig.
    private static AttributeConfig INSTANCE;

    // // --- Logger ---
    private static final Logger LOGGER = LogManager.getLogger(BrokenPath.MOD_ID + "_AttributeConfig");

    // // --- Gson Instance ---
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    // // --- Configuration File Path ---
    private static final String CONFIG_FILE_NAME = "brokenpath_player_stats_attributes.json";
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // // --- Configuration Values ---
    public Map<String, Integer> manualAllocationLimit;
    public float conMultiplier;
    public float strMultiplier;
    public float intMultiplier;
    public float dexMultiplier;
    public float innateProtectionPerLevelIncrease;
    public Map<String, Integer> levelProgression;

    /**
     * // --- Private Constructor for Singleton ---
     * // Initializes default values for attribute configurations.
     */
    private AttributeConfig() {
        initializeDefaults();
    }

    /**
     * // --- Singleton Access Method ---
     * @return The singleton instance of AttributeConfig.
     */
    public static AttributeConfig getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new AttributeConfig();
        }
        return INSTANCE;
    }

    /**
     * // --- Default Initialization Logic ---
     * // Sets up all attribute-related configuration values with their default settings.
     * // These values are based on the final agreed-upon table.
     */
    private void initializeDefaults() {
        manualAllocationLimit = new HashMap<>();
        levelProgression = new HashMap<>();

        // Default Attribute Allocation Limits (max 50 points per attribute)
        manualAllocationLimit.put("CONSTITUTION", 50);
        manualAllocationLimit.put("STRENGTH", 50);
        manualAllocationLimit.put("DEXTERITY", 50);
        manualAllocationLimit.put("INTELLIGENCE", 50);

        // Global multipliers for attribute points to stats (initial placeholder values)
        // These will be calculated and refined in a later step based on desired ranges.
        conMultiplier = 2.0f; // Placeholder value, will be calculated later
        strMultiplier = 2.0f; // Placeholder value, will be calculated later
        intMultiplier = 2.0f; // Placeholder value, will be calculated later
        dexMultiplier = 2.0f; // Placeholder value, will be calculated later

        // Global Innate Protection per level increase
        innateProtectionPerLevelIncrease = 0.2f; // Placeholder value, will be calculated later

        // Attribute Point Allocation per Level Progression (Total 150 points at level 50)
        levelProgression.put("1-1", 0);
        levelProgression.put("2-10", 1);   // 9 levels * 1 point = 9 points
        levelProgression.put("11-20", 2);  // 10 levels * 2 points = 20 points
        levelProgression.put("21-30", 3);  // 10 levels * 3 points = 30 points
        levelProgression.put("31-40", 4);  // 10 levels * 4 points = 40 points
        levelProgression.put("41-49", 5);  // 9 levels * 5 points = 45 points
        levelProgression.put("50-50", 6);  // 1 level * 6 points = 6 points
        // Total points = 9 + 20 + 30 + 40 + 45 + 6 = 150 points
    }

    /**
     * // --- Load Configuration from JSON ---
     * // Loads attribute configurations from 'brokenpath_player_stats_attributes.json'.
     */
    public void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                AttributeConfig loadedConfig = GSON.fromJson(reader, AttributeConfig.class);
                if (loadedConfig != null) {
                    // Update current instance's fields with loaded values, using Optionals for robustness
                    this.manualAllocationLimit = Optional.ofNullable(loadedConfig.manualAllocationLimit).orElseGet(HashMap::new);
                    this.conMultiplier = loadedConfig.conMultiplier;
                    this.strMultiplier = loadedConfig.strMultiplier;
                    this.intMultiplier = loadedConfig.intMultiplier;
                    this.dexMultiplier = loadedConfig.dexMultiplier;
                    this.innateProtectionPerLevelIncrease = loadedConfig.innateProtectionPerLevelIncrease;
                    this.levelProgression = Optional.ofNullable(loadedConfig.levelProgression).orElseGet(HashMap::new);
                } else {
                    LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default attribute configurations.", CONFIG_FILE_NAME);
                    initializeDefaults(); // Re-initialize defaults if JSON is empty/invalid
                }
            } catch (Exception e) { // Catching generic Exception for robustness against JsonSyntaxException or IOException
                LOGGER.error("Error parsing or reading attribute configuration file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                initializeDefaults(); // Re-initialize defaults on error
            }
        } else {
            LOGGER.info("Attribute configuration file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            saveConfig(); // Create new file with defaults
        }

        // Post-load safety net for critical values
        // Ensure multipliers are not zero if they somehow got corrupted
        if (this.conMultiplier == 0.0f) this.conMultiplier = 2.0f; // Default placeholder
        if (this.strMultiplier == 0.0f) this.strMultiplier = 2.0f; // Default placeholder
        if (this.intMultiplier == 0.0f) this.intMultiplier = 2.0f; // Default placeholder
        if (this.dexMultiplier == 0.0f) this.dexMultiplier = 2.0f; // Default placeholder
        if (this.innateProtectionPerLevelIncrease == 0.0f) this.innateProtectionPerLevelIncrease = 0.2f; // Default placeholder
    }

    /**
     * // --- Save Configuration to JSON ---
     * // Saves the current attribute configuration to 'brokenpath_player_stats_attributes.json'.
     */
    public void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(this, writer);
        } catch (IOException e) {
            LOGGER.error("Failed to save attribute configuration file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // // --- Getters for Configuration Values ---
    public int getManualAllocationLimit(String attributeName) {
        return manualAllocationLimit.getOrDefault(attributeName.toUpperCase(), 1);
    }
    public float getConMultiplier() { return conMultiplier; }
    public float getStrMultiplier() { return strMultiplier; }
    public float getIntMultiplier() { return intMultiplier; }
    public float getDexMultiplier() { return dexMultiplier; }
    public float getInnateProtectionPerLevelIncrease() { return innateProtectionPerLevelIncrease; }
    public Map<String, Integer> getLevelProgression() { return levelProgression; }

    /**
     * // Retrieves the number of fundamental attribute points granted to the player
     * // for reaching a specific level, based on configured level ranges.
     * @param level The player's current level.
     * @return The number of attribute points awarded for that level range. Returns 0 if the level
     * // does not fall into any defined range or if there's a parsing error.
     */
    public int getAttributePointsForLevelRange(int level) {
        for (Map.Entry<String, Integer> entry : levelProgression.entrySet()) {
            String[] range = entry.getKey().split("-");
            try {
                int min = Integer.parseInt(range[0]);
                int max = Integer.parseInt(range[1]);
                if (level >= min && level <= max) {
                    return entry.getValue();
                }
            } catch (NumberFormatException e) {
                LOGGER.error("Error parsing level range in attribute configuration: {}. Error: {}", entry.getKey(), e.getMessage());
            }
        }
        return 0;
    }
}
