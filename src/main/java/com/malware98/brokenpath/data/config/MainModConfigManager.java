// MainModConfigManager.java
package com.malware98.brokenpath.data.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;

/**
 * // --- Main Configuration Manager ---
 * // This class serves as the central orchestrator for loading and saving all
 * // mod configurations from various JSON files. It implements the Singleton pattern
 * // to ensure a single, consistent access point for all configuration data.
 * // This class also holds global mod-level constants like the maximum player level.
 */
public class MainModConfigManager {

    // // --- Singleton Instance ---
    // The single instance of MainModConfigManager.
    private static MainModConfigManager INSTANCE;

    // // --- Logger ---
    // Logger for this configuration manager.
    private static final Logger LOGGER = LogManager.getLogger(BrokenPath.MOD_ID + "_Config");

    // // --- Gson Instance ---
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    // // --- Configuration File Paths ---
    // Name of the primary configuration file located in the Forge config directory.
    private static final String MAIN_CONFIG_FILE_NAME = "brokenpath_main_settings.json";
    // Full path to the main configuration file.
    private static final Path MAIN_CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(MAIN_CONFIG_FILE_NAME);

    // // --- Global Mod Constants ---
    // Maximum player level attainable in the mod's progression system.
    public int maxLevel = 50;
    // Maximum multiplier for the Favor bonus system, capping how much Favor can amplify effects.
    public float maxFavorBonusMultiplier = 2.0f;


    /**
     * // --- Private Constructor for Singleton ---
     * // Initializes default values for the main configuration.
     */
    private MainModConfigManager() {
        // Default values for global constants.
        this.maxLevel = 50;
        this.maxFavorBonusMultiplier = 2.0f;
    }

    /**
     * // --- Singleton Access Method ---
     * // Provides the single instance of MainModConfigManager.
     * // If no instance exists, a new one is created.
     * @return The singleton instance of MainModConfigManager.
     */
    public static MainModConfigManager getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new MainModConfigManager();
        }
        return INSTANCE;
    }

    /**
     * // --- Load All Configurations ---
     * // This method is the entry point for loading all distinct configuration files.
     * // It ensures that default files are created if they don't exist and handles basic loading.
     */
    public static void loadAllConfigs() {
        LOGGER.info("Loading all Broken Path mod configurations...");
        // Load the main configuration settings first.
        getInstance().loadMainConfig();

        // --- Loading other configs ---
        AttributeConfig.getInstance().loadConfig();
        RaceDataConfig.getInstance().loadConfig();
        ClassDataConfig.getInstance().loadConfig();
        SpecializationDataConfig.getInstance().loadConfig();
        AffinityTierDataConfig.getInstance().loadConfig();
        RegenDataConfig.getInstance().loadConfig();
        CombatDataConfig.getInstance().loadConfig();
        XpDataConfig.getInstance().loadConfig();
        VillagerTradeDataConfig.getInstance().loadConfig();
        AchievementDataConfig.getInstance().loadConfig();
        ChimeraFormDataConfig.getInstance().loadConfig(); // Loaded ChimeraFormDataConfig
    }

    /**
     * // --- Save All Configurations ---
     * // This method is the entry point for saving all distinct configuration files.
     */
    public static void saveAllConfigs() {
        LOGGER.info("Saving all Broken Path mod configurations...");
        // Save the main configuration settings first.
        getInstance().saveMainConfig();

        // --- Saving other configs ---
        AttributeConfig.getInstance().saveConfig();
        RaceDataConfig.getInstance().saveConfig();
        ClassDataConfig.getInstance().saveConfig();
        SpecializationDataConfig.getInstance().saveConfig();
        AffinityTierDataConfig.getInstance().saveConfig();
        RegenDataConfig.getInstance().saveConfig();
        CombatDataConfig.getInstance().saveConfig();
        XpDataConfig.getInstance().saveConfig();
        VillagerTradeDataConfig.getInstance().saveConfig();
        AchievementDataConfig.getInstance().saveConfig();
        ChimeraFormDataConfig.getInstance().saveConfig(); // Saved ChimeraFormDataConfig
    }

    /**
     * // --- Load Main Config ---
     * // Loads the main mod configuration from its JSON file.
     * // If the file does not exist, is empty, or malformed, it loads defaults and saves.
     */
    private void loadMainConfig() {
        File configFile = MAIN_CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                // Temporarily store loaded config to check if it's null before assigning to INSTANCE
                MainModConfigManager loadedConfig = GSON.fromJson(reader, MainModConfigManager.class);
                if (loadedConfig != null) {
                    // Update current instance's fields with loaded values
                    this.maxLevel = loadedConfig.maxLevel;
                    this.maxFavorBonusMultiplier = loadedConfig.maxFavorBonusMultiplier;
                } else {
                    LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default main configurations.", MAIN_CONFIG_FILE_NAME);
                    // Defaults are already set in constructor if loadedConfig is null.
                }
            } catch (Exception e) { // Catching generic Exception for robustness against JsonSyntaxException or IOException
                LOGGER.error("Error parsing or reading main configuration file '{}'. Loading default main configurations. Error: {}", MAIN_CONFIG_FILE_NAME, e.getMessage());
                // Defaults are already set in constructor.
            }
        } else {
            LOGGER.info("Main configuration file '{}' not found. Creating with default configurations.", MAIN_CONFIG_FILE_NAME);
            saveMainConfig(); // Save the newly generated default configuration.
        }
    }

    /**
     * // --- Save Main Config ---
     * // Saves the current main mod configuration to its JSON file.
     */
    private void saveMainConfig() {
        File configFile = MAIN_CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(this, writer);
        } catch (IOException e) {
            LOGGER.error("Failed to save main configuration file '{}'. Error: {}", MAIN_CONFIG_FILE_NAME, e.getMessage());
        }
    }
}
