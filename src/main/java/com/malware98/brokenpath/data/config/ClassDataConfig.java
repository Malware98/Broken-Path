package com.malware98.brokenpath.data.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

/**
 * Manages configurable values related to player classes.
 * Includes flat stat bonuses (main affinity bonus and secondary class bonus).
 * Implements the Singleton pattern.
 */
public class ClassDataConfig {

    // --- Singleton Instance ---
    private static ClassDataConfig INSTANCE;

    // --- Logger ---
    private static final Logger LOGGER = LogManager.getLogger(BrokenPath.MOD_ID + "_ClassDataConfig");

    // --- Gson Instance ---
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    // --- Configuration File Path ---
    private static final String CONFIG_FILE_NAME = "brokenpath_player_classes.json";
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // --- Configuration Values ---
    public Map<String, ClassSettings> classSettings;

    // --- Constructor ---
    private ClassDataConfig() {
        initializeDefaults();
    }

    // --- Singleton Access Method ---
    public static ClassDataConfig getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new ClassDataConfig();
        }
        return INSTANCE;
    }

    // --- Default Initialization ---
    private void initializeDefaults() {
        classSettings = new HashMap<>();

        // CHAMPION: Affinity on Health, Class Bonus on Protection
        classSettings.put("CHAMPION", new ClassSettings("HEALTH", 30.0f, "PROTECTION", 30.0f));

        // SORCERER: Affinity on Mana, Class Bonus on Vigor
        classSettings.put("SORCERER", new ClassSettings("MANA", 30.0f, "VIGOR", 30.0f));

        // BERSERKER: Affinity on Vigor, Class Bonus on Health
        classSettings.put("BERSERKER", new ClassSettings("HEALTH", 30.0f, "VIGOR", 30.0f));

        // SHAMAN: Affinity on Vigor, Class Bonus on Protection
        classSettings.put("SHAMAN", new ClassSettings("HEALTH", 30.0f, "VIGOR", 30.0f));

        // EXPLORER: Affinity on Vigor, Class Bonus on Protection
        classSettings.put("EXPLORER", new ClassSettings("VIGOR", 30.0f, "PROTECTION", 30.0f));

        // CHANNELER: Affinity on Mana, Class Bonus on Health
        classSettings.put("CHANNELER", new ClassSettings("MANA", 30.0f, "HEALTH", 30.0f));

        // VESTAL: Affinity on Health, Class Bonus on Mana
        classSettings.put("VESTAL", new ClassSettings("MANA", 30.0f, "PROTECTION", 30.0f));

        // TECHNOMANCER: Affinity on Protection, Class Bonus on Vigor
        classSettings.put("TECHNOMANCER", new ClassSettings("PROTECTION", 30.0f, "MANA", 30.0f));
    }

    // --- Configuration Loading/Saving ---
    /**
     * Loads class configurations from 'brokenpath_player_classes.json'.
     */
    public void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                ClassDataConfig loadedConfig = GSON.fromJson(reader, ClassDataConfig.class);
                if (loadedConfig != null && loadedConfig.classSettings != null) {
                    this.classSettings = loadedConfig.classSettings;
                } else {
                    LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default class configurations.", CONFIG_FILE_NAME);
                    initializeDefaults();
                }
            } catch (Exception e) {
                LOGGER.error("Error parsing or reading class configuration file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                initializeDefaults();
            }
        } else {
            LOGGER.info("Class configuration file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            saveConfig();
        }
    }

    /**
     * Saves the current class configuration to 'brokenpath_player_classes.json'.
     */
    public void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(this, writer);
        } catch (IOException e) {
            LOGGER.error("Failed to save class configuration file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // --- Getters for Configuration Values ---
    /**
     * Retrieves the settings for a specific class.
     * @param className The name of the class.
     * @return The ClassSettings object, or a default empty settings if not found.
     */
    public ClassSettings getClassSettings(String className) {
        return classSettings.getOrDefault(className.toUpperCase(), new ClassSettings());
    }

    // --- Nested Class for Class Settings ---
    /**
     * Represents the configurable settings for a single player class.
     */
    public static class ClassSettings {
        public String affinityStatName; // The name of the stat that receives the affinity bonus
        public float affinityStatBonusValue; // The value of the fixed affinity bonus
        public String classBonusStatName; // The name of the stat that receives the general class bonus
        public float classBonusStatValue; // The value of the fixed general class bonus

        public ClassSettings() {
            this.affinityStatName = "";
            this.affinityStatBonusValue = 0.0f;
            this.classBonusStatName = "";
            this.classBonusStatValue = 0.0f;
        }

        public ClassSettings(String affinityStatName, float affinityStatBonusValue,
                             String classBonusStatName, float classBonusStatValue) {
            this.affinityStatName = affinityStatName;
            this.affinityStatBonusValue = affinityStatBonusValue;
            this.classBonusStatName = classBonusStatName;
            this.classBonusStatValue = classBonusStatValue;
        }

        public String getAffinityStatName() { return affinityStatName; }
        public float getAffinityStatBonusValue() { return affinityStatBonusValue; }
        public String getClassBonusStatName() { return classBonusStatName; }
        public float getClassBonusStatValue() { return classBonusStatValue; }
    }
}