// RegenDataConfig.java
package com.malware98.brokenpath.data.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;

/**
 * // --- Regeneration Data Configuration ---
 * // Manages all configurable values related to health, mana, vigor, and protection regeneration.
 * // Also includes settings for hunger penalties on regeneration and passive exhaustion.
 * // Implements the Singleton pattern for consistent access.
 */
public class RegenDataConfig {

    // // --- Singleton Instance ---
    private static RegenDataConfig INSTANCE;

    // // --- Logger ---
    private static final Logger LOGGER = LogManager.getLogger(BrokenPath.MOD_ID + "_RegenDataConfig");

    // // --- Gson Instance ---
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    // // --- Configuration File Path ---
    private static final String CONFIG_FILE_NAME = "brokenpath_regeneration_settings.json";
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // // --- Configuration Values ---
    public int baseRegenPulseCooldownTicks;

    public float healthAmountToHealPerPulse;
    public int healthMinFoodLevelForRegen;
    public int healthDelayAfterCombatTicks;
    public float healthRegenAmountPerConPoint;

    public float regenEffectHealingBonusMultiplier;

    public float innateProtectionAmountPerPulse;
    public int innateProtectionDelayAfterCombatTicks;

    public float manaRegenOutOfCombatBase;
    public float manaRegenInCombatBase;
    public float manaRegenBonusPerInt;
    public int manaDelayAfterCombatTicks;

    public float vigorRegenOutOfCombatBase;
    public float vigorRegenInCombatBase;
    public float vigorRegenBonusPerDex;
    public int vigorDelayAfterCombatTicks;

    public int protectionRegenSlowCooldownTicks;
    public float protectionAmountPerSlowPulse;
    public float protectionRestoreAmountPerAbility;

    public float manaAmountPerEffectPulse;
    public float vigorAmountPerEffectPulse;

    public float hungryModerateVigorRegenPenalty;
    public float hungryIntenseVigorRegenPenalty;
    public float starvingVigorRegenPenalty;
    public int starvingDamageIntervalTicks;
    public float starvingDamageAmount;

    public float baseHungerConsumptionPerHealthRegenPulse;
    public float hungerConsumptionPerConPointScaling;
    public float maxHungerConsumptionPerPulse;

    public float hungryModeratePassiveExhaustionPerTick;
    public float hungryIntensePassiveExhaustionPerTick;
    public float starvingPassiveExhaustionPerTick;


    /**
     * // --- Private Constructor for Singleton ---
     * // Initializes default values for regeneration configurations.
     */
    private RegenDataConfig() {
        initializeDefaults();
    }

    /**
     * // --- Singleton Access Method ---
     * @return The singleton instance of RegenDataConfig.
     */
    public static RegenDataConfig getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new RegenDataConfig();
        }
        return INSTANCE;
    }

    /**
     * // --- Default Initialization Logic ---
     * // Sets up all regeneration-related configuration values with their default settings.
     */
    private void initializeDefaults() {
        baseRegenPulseCooldownTicks = 20;

        healthAmountToHealPerPulse = 0.03f;
        healthMinFoodLevelForRegen = 12;
        healthDelayAfterCombatTicks = 100;
        healthRegenAmountPerConPoint = 0.05f;

        regenEffectHealingBonusMultiplier = 1.2f;

        innateProtectionAmountPerPulse = 0.2f;
        innateProtectionDelayAfterCombatTicks = 100;

        manaRegenOutOfCombatBase = 0.03f;
        manaRegenInCombatBase = 0.015f;
        manaRegenBonusPerInt = 0.05f;
        manaDelayAfterCombatTicks = 100;

        vigorRegenOutOfCombatBase = 0.03f;
        vigorRegenInCombatBase = 0.015f;
        vigorRegenBonusPerDex = 0.05f;
        vigorDelayAfterCombatTicks = 100;

        protectionRegenSlowCooldownTicks = 60;
        protectionAmountPerSlowPulse = 1.0f;
        protectionRestoreAmountPerAbility = 5.0f;

        manaAmountPerEffectPulse = 0.5f;
        vigorAmountPerEffectPulse = 0.75f;

        hungryModerateVigorRegenPenalty = -0.15f;
        hungryIntenseVigorRegenPenalty = -0.40f;
        starvingVigorRegenPenalty = -0.40f;
        starvingDamageIntervalTicks = 80;
        starvingDamageAmount = 1.0f;

        baseHungerConsumptionPerHealthRegenPulse = 0.5f;
        hungerConsumptionPerConPointScaling = 0.05f;
        maxHungerConsumptionPerPulse = 3.0f;

        hungryModeratePassiveExhaustionPerTick = 0.005f;
        hungryIntensePassiveExhaustionPerTick = 0.01f;
        starvingPassiveExhaustionPerTick = 0.02f;
    }

    /**
     * // --- Load Configuration from JSON ---
     * // Loads regeneration configurations from 'brokenpath_regeneration_settings.json'.
     */
    public void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                RegenDataConfig loadedConfig = GSON.fromJson(reader, RegenDataConfig.class);
                if (loadedConfig != null) {
                    // Update all fields from loaded config
                    this.baseRegenPulseCooldownTicks = loadedConfig.baseRegenPulseCooldownTicks;
                    this.healthAmountToHealPerPulse = loadedConfig.healthAmountToHealPerPulse;
                    this.healthMinFoodLevelForRegen = loadedConfig.healthMinFoodLevelForRegen;
                    this.healthDelayAfterCombatTicks = loadedConfig.healthDelayAfterCombatTicks;
                    this.healthRegenAmountPerConPoint = loadedConfig.healthRegenAmountPerConPoint;
                    this.regenEffectHealingBonusMultiplier = loadedConfig.regenEffectHealingBonusMultiplier;
                    this.innateProtectionAmountPerPulse = loadedConfig.innateProtectionAmountPerPulse;
                    this.innateProtectionDelayAfterCombatTicks = loadedConfig.innateProtectionDelayAfterCombatTicks;
                    this.manaRegenOutOfCombatBase = loadedConfig.manaRegenOutOfCombatBase;
                    this.manaRegenInCombatBase = loadedConfig.manaRegenInCombatBase;
                    this.manaRegenBonusPerInt = loadedConfig.manaRegenBonusPerInt;
                    this.manaDelayAfterCombatTicks = loadedConfig.manaDelayAfterCombatTicks;
                    this.vigorRegenOutOfCombatBase = loadedConfig.vigorRegenOutOfCombatBase;
                    this.vigorRegenInCombatBase = loadedConfig.vigorRegenInCombatBase;
                    this.vigorRegenBonusPerDex = loadedConfig.vigorRegenBonusPerDex;
                    this.vigorDelayAfterCombatTicks = loadedConfig.vigorDelayAfterCombatTicks;
                    this.protectionRegenSlowCooldownTicks = loadedConfig.protectionRegenSlowCooldownTicks;
                    this.protectionAmountPerSlowPulse = loadedConfig.protectionAmountPerSlowPulse;
                    this.protectionRestoreAmountPerAbility = loadedConfig.protectionRestoreAmountPerAbility;
                    this.manaAmountPerEffectPulse = loadedConfig.manaAmountPerEffectPulse;
                    this.vigorAmountPerEffectPulse = loadedConfig.vigorAmountPerEffectPulse;
                    this.hungryModerateVigorRegenPenalty = loadedConfig.hungryModerateVigorRegenPenalty;
                    this.hungryIntenseVigorRegenPenalty = loadedConfig.hungryIntenseVigorRegenPenalty;
                    this.starvingVigorRegenPenalty = loadedConfig.starvingVigorRegenPenalty;
                    this.starvingDamageIntervalTicks = loadedConfig.starvingDamageIntervalTicks;
                    this.starvingDamageAmount = loadedConfig.starvingDamageAmount;
                    this.baseHungerConsumptionPerHealthRegenPulse = loadedConfig.baseHungerConsumptionPerHealthRegenPulse;
                    this.hungerConsumptionPerConPointScaling = loadedConfig.hungerConsumptionPerConPointScaling;
                    this.maxHungerConsumptionPerPulse = loadedConfig.maxHungerConsumptionPerPulse;
                    this.hungryModeratePassiveExhaustionPerTick = loadedConfig.hungryModeratePassiveExhaustionPerTick;
                    this.hungryIntensePassiveExhaustionPerTick = loadedConfig.hungryIntensePassiveExhaustionPerTick;
                    this.starvingPassiveExhaustionPerTick = loadedConfig.starvingPassiveExhaustionPerTick;
                } else {
                    LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default regeneration configurations.", CONFIG_FILE_NAME);
                    initializeDefaults();
                }
            } catch (Exception e) { // Catching generic Exception for robustness against JsonSyntaxException or IOException
                LOGGER.error("Error parsing or reading regeneration configuration file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                initializeDefaults();
            }
        } else {
            LOGGER.info("Regeneration configuration file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            saveConfig(); // Create new file with defaults
        }
    }

    /**
     * // --- Save Configuration to JSON ---
     * // Saves the current regeneration configuration to 'brokenpath_regeneration_settings.json'.
     */
    public void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(this, writer);
        } catch (IOException e) {
            LOGGER.error("Failed to save regeneration configuration file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // // --- Getters for Configuration Values ---

    public int getBaseRegenPulseCooldownTicks() { return baseRegenPulseCooldownTicks; }

    public float getHealthAmountToHealPerPulse() { return healthAmountToHealPerPulse; }
    public int getHealthMinFoodLevelForRegen() { return healthMinFoodLevelForRegen; }
    public int getHealthDelayAfterCombatTicks() { return healthDelayAfterCombatTicks; }
    public float getHealthRegenAmountPerConPoint() { return healthRegenAmountPerConPoint; }

    public float getRegenEffectHealingBonusMultiplier() { return regenEffectHealingBonusMultiplier; }

    public float getInnateProtectionAmountPerPulse() { return innateProtectionAmountPerPulse; }
    public int getInnateProtectionDelayAfterCombatTicks() { return innateProtectionDelayAfterCombatTicks; }

    public float getManaRegenOutOfCombatBase() { return manaRegenOutOfCombatBase; }
    public float getManaRegenInCombatBase() { return manaRegenInCombatBase; }
    public float getManaRegenBonusPerInt() { return manaRegenBonusPerInt; }
    public int getManaDelayAfterCombatTicks() { return manaDelayAfterCombatTicks; }

    public float getVigorRegenOutOfCombatBase() { return vigorRegenOutOfCombatBase; }
    public float getVigorRegenInCombatBase() { return vigorRegenInCombatBase; }
    public float getVigorRegenBonusPerDex() { return vigorRegenBonusPerDex; }
    public int getVigorDelayAfterCombatTicks() { return vigorDelayAfterCombatTicks; }

    public int getProtectionRegenSlowCooldownTicks() { return protectionRegenSlowCooldownTicks; }
    public float getProtectionAmountPerSlowPulse() { return protectionAmountPerSlowPulse; }
    public float getProtectionRestoreAmountPerAbility() { return protectionRestoreAmountPerAbility; }

    public float getManaAmountPerEffectPulse() { return manaAmountPerEffectPulse; }
    public float getVigorAmountPerEffectPulse() { return vigorAmountPerEffectPulse; }

    public float getHungryModerateVigorRegenPenalty() { return hungryModerateVigorRegenPenalty; }
    public float getHungryIntenseVigorRegenPenalty() { return hungryIntenseVigorRegenPenalty; }
    public float getStarvingVigorRegenPenalty() { return starvingVigorRegenPenalty; }
    public int getStarvingDamageIntervalTicks() { return starvingDamageIntervalTicks; }
    public float getStarvingDamageAmount() { return starvingDamageAmount; }

    public float getBaseHungerConsumptionPerHealthRegenPulse() { return baseHungerConsumptionPerHealthRegenPulse; }
    public float getHungerConsumptionPerConPointScaling() { return hungerConsumptionPerConPointScaling; }
    public float getMaxHungerConsumptionPerPulse() { return maxHungerConsumptionPerPulse; }

    public float getHungryModeratePassiveExhaustionPerTick() { return hungryModeratePassiveExhaustionPerTick; }
    public float getHungryIntensePassiveExhaustionPerTick() { return hungryIntensePassiveExhaustionPerTick; }
    public float getStarvingPassiveExhaustionPerTick() { return starvingPassiveExhaustionPerTick; }
}
