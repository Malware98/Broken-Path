package com.malware98.brokenpath.data.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

/**
 * Manages configurable parameters for the Chimera's "Chaotic Transformation" forms.
 * Includes settings for random stat changes, duration, and cooldown.
 * Implements the Singleton pattern.
 */
public class ChimeraFormDataConfig {

    // --- Singleton Instance ---
    private static ChimeraFormDataConfig INSTANCE;

    // --- Logger ---
    private static final Logger LOGGER = LogManager.getLogger(BrokenPath.MOD_ID + "_ChimeraFormDataConfig");

    // --- Gson Instance ---
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    // --- Configuration File Path ---
    private static final String CONFIG_FILE_NAME = "brokenpath_chimera_forms.json";
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // --- Configuration Values ---
    public Map<String, ChaoticTransformationSettings> transformationSettings;

    // --- Constructor ---
    private ChimeraFormDataConfig() {
        initializeDefaults();
    }

    // --- Singleton Access Method ---
    public static ChimeraFormDataConfig getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new ChimeraFormDataConfig();
        }
        return INSTANCE;
    }

    // --- Default Initialization ---
    private void initializeDefaults() {
        transformationSettings = new HashMap<>();

        // Default "Base Form" (No active transformation)
        transformationSettings.put("BASE_FORM", new ChaoticTransformationSettings(
                0.0f,
                0.0f,
                0,
                0,
                0 // minPositiveAdjustments
        ));

        // Chaotic Transformation settings
        transformationSettings.put("CHAOTIC_TRANSFORMATION", new ChaoticTransformationSettings(
                -0.15f, // Minimum random percentage change (-15%)
                0.15f,  // Maximum random percentage change (+15%)
                2400,   // Duration in ticks (2 minutes)
                24000,   // Cooldown in ticks (20 minutes)
                2       // Minimum number of positive adjustments (e.g., at least 2 stats get a buff)
        ));
    }

    // --- Configuration Loading/Saving ---
    /**
     * Loads Chimera form configurations from 'brokenpath_chimera_forms.json'.
     */
    public void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                ChimeraFormDataConfig loadedConfig = GSON.fromJson(reader, ChimeraFormDataConfig.class);
                if (loadedConfig != null && loadedConfig.transformationSettings != null) {
                    this.transformationSettings = loadedConfig.transformationSettings;
                } else {
                    LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default Chimera form configurations.", CONFIG_FILE_NAME);
                    initializeDefaults();
                }
            } catch (Exception e) {
                LOGGER.error("Error parsing or reading Chimera form configuration file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                initializeDefaults();
            }
        } else {
            LOGGER.info("Chimera form configuration file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            saveConfig();
        }
    }

    /**
     * Saves the current Chimera form configuration to 'brokenpath_chimera_forms.json'.
     */
    public void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(this, writer);
        } catch (IOException e) {
            LOGGER.error("Failed to save Chimera form configuration file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // --- Getters for Configuration Values ---
    /**
     * Retrieves the settings for a specific Chimera transformation.
     * @param formName The name of the transformation.
     * @return The ChaoticTransformationSettings object, or default empty settings if not found.
     */
    public ChaoticTransformationSettings getTransformationSettings(String formName) {
        // MODIFIED: Ensure default settings are returned if form not found or for BASE_FORM if not explicitly configured.
        return transformationSettings.getOrDefault(formName.toUpperCase(), new ChaoticTransformationSettings(0,0,0,0,0));
    }

    // --- Nested Class for Chaotic Transformation Settings ---
    /**
     * Represents the configurable parameters for a Chimera's chaotic transformation.
     */
    public static class ChaoticTransformationSettings {
        public float randomChangePercentageMin;  // Minimum random percentage change to apply to stats
        public float randomChangePercentageMax;  // Maximum random percentage change to apply to stats
        public int durationTicks;                // Duration of the transformation in ticks
        public int cooldownTicks;                // Cooldown after transformation ends in ticks
        public int minPositiveAdjustments;       // Minimum number of stats that must receive a positive adjustment

        public ChaoticTransformationSettings() {}

        public ChaoticTransformationSettings(float randomChangePercentageMin, float randomChangePercentageMax,
                                             int durationTicks, int cooldownTicks) {
            this(randomChangePercentageMin, randomChangePercentageMax, durationTicks, cooldownTicks, 0); // Default to 0 minPositiveAdjustments
        }

        public ChaoticTransformationSettings(float randomChangePercentageMin, float randomChangePercentageMax,
                                             int durationTicks, int cooldownTicks, int minPositiveAdjustments) {
            this.randomChangePercentageMin = randomChangePercentageMin;
            this.randomChangePercentageMax = randomChangePercentageMax;
            this.durationTicks = durationTicks;
            this.cooldownTicks = cooldownTicks;
            this.minPositiveAdjustments = minPositiveAdjustments;
        }

        public float getRandomChangePercentageMin() { return randomChangePercentageMin; }
        public float getRandomChangePercentageMax() { return randomChangePercentageMax; }
        public int getDurationTicks() { return durationTicks; }
        public int getCooldownTicks() { return cooldownTicks; }
        public int getMinPositiveAdjustments() { return minPositiveAdjustments; }
    }
}