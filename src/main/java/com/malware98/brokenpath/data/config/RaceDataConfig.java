// RaceDataConfig.java
package com.malware98.brokenpath.data.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

/**
 * // --- Race Data Configuration ---
 * // Manages all configurable values related to player races.
 * // This includes their base statistics (health, protection, mana, vigor, innate protection, favor).
 * // Affinity is now handled directly via AffinityMappingConfig, so tags are no longer part of race settings.
 * // Implements the Singleton pattern for consistent access.
 */
public class RaceDataConfig {

    // // --- Singleton Instance ---
    private static RaceDataConfig INSTANCE;

    // // --- Logger ---
    private static final Logger LOGGER = LogManager.getLogger(BrokenPath.MOD_ID + "_RaceDataConfig");

    // // --- Gson Instance ---
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    // // --- Configuration File Path ---
    private static final String CONFIG_FILE_NAME = "brokenpath_player_races.json";
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // // --- Configuration Values ---
    public Map<String, RaceSettings> raceSettings;

    /**
     * // --- Private Constructor for Singleton ---
     * // Initializes default values for race configurations.
     */
    private RaceDataConfig() {
        initializeDefaults();
    }

    /**
     * // --- Singleton Access Method ---
     * @return The singleton instance of RaceDataConfig.
     */
    public static RaceDataConfig getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new RaceDataConfig();
        }
        return INSTANCE;
    }

    /**
     * // --- Default Initialization Logic ---
     * // Sets up all race-related configuration values with their default settings.
     * // These values are based on the final agreed-upon table.
     */
    private void initializeDefaults() {
        raceSettings = new HashMap<>();

        // SPIRIT: Safety race, no tags, basic stats.
        raceSettings.put("SPIRIT", new RaceSettings(
                20.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
        ));

        // HUMAN: Versatile and adaptable.
        raceSettings.put("HUMAN", new RaceSettings(
                20.0f, 10.0f, 0.0f, 25.0f, 25.0f, 70.0f
        ));

        // ELF: Arcane master, physically fragile.
        raceSettings.put("ELF", new RaceSettings(
                14.0f, 4.0f, 0.0f, 45.0f, 18.0f, 10.0f
        ));

        // ORC: Brute force warriors and physical endurance.
        raceSettings.put("ORC", new RaceSettings(
                30.0f, 12.0f, 0.0f, 0.0f, 40.0f, 40.0f
        ));

        // DRACONID: Hybrids of resistance and elemental magic.
        raceSettings.put("DRACONID", new RaceSettings(
                20.0f, 0.0f, 16.0f, 35.0f, 20.0f, 30.0f
        ));

        // CHIMERA: Agile base by default.
        raceSettings.put("CHIMERA", new RaceSettings(
                18.0f, 3.0f, 5.0f, 20.0f, 40.0f, 60.0f
        ));

        // TRITON: Masters of aquatic combat and diplomacy, grace on land and sea.
        raceSettings.put("TRITON", new RaceSettings(
                20.0f, 0.0f, 6.0f, 30.0f, 30.0f, 80.0f
        ));

        // AASIMAR: Bearers of celestial light, protectors with unbreakable morale.
        raceSettings.put("AASIMAR", new RaceSettings(
                22.0f, 4.0f, 10.0f, 22.0f, 16.0f, 100.0f
        ));

        // ANDROID: Embodied precision, designed for impeccable logic tasks.
        raceSettings.put("ANDROID", new RaceSettings(
                10.0f, 12.0f, 20.0f, 0.0f, 20.0f, 70.0f
        ));
    }

    /**
     * // --- Load Configuration from JSON ---
     * // Loads race configurations from 'brokenpath_player_races.json'.
     */
    public void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                RaceDataConfig loadedConfig = GSON.fromJson(reader, RaceDataConfig.class);
                if (loadedConfig != null && loadedConfig.raceSettings != null) {
                    this.raceSettings = loadedConfig.raceSettings;
                    // Tags are no longer part of RaceSettings.
                } else {
                    LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default race configurations.", CONFIG_FILE_NAME);
                    initializeDefaults();
                }
            } catch (Exception e) { // Catching generic Exception for robustness against JsonSyntaxException or IOException
                LOGGER.error("Error parsing or reading race configuration file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                initializeDefaults();
            }
        } else {
            LOGGER.info("Race configuration file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            saveConfig(); // Create new file with defaults
        }
    }

    /**
     * // --- Save Configuration to JSON ---
     * // Saves the current race configuration to 'brokenpath_player_races.json'.
     */
    public void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(this, writer);
        } catch (IOException e) {
            LOGGER.error("Failed to save race configuration file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // // --- Getters for Configuration Values ---

    /**
     * // Retrieves the settings for a specific race.
     * @param raceName The name of the race (e.g., "HUMAN", "ELF").
     * @return The RaceSettings object for the specified race, or SPIRIT settings if not found.
     */
    public RaceSettings getRaceSettings(String raceName) {
        return raceSettings.getOrDefault(raceName.toUpperCase(), raceSettings.get("SPIRIT"));
    }

    // // --- Nested Class for Race Settings ---
    /**
     * // Represents the configurable settings for a single player race.
     */
    public static class RaceSettings {
        public float health;
        public float protection;
        public float protectionInnate;
        public float mana;
        public float vigor;
        public float favor;
        // public List<String> tags; // REMOVED: Tags are no longer part of RaceSettings for affinity

        // Constructor for Gson deserialization (needs to be public and no-arg for default values if present in JSON)
        public RaceSettings() {
            // this.tags = new ArrayList<>(); // REMOVED: Tags list initialization
        }

        // Updated constructor signature: Removed List<String> tags parameter
        public RaceSettings(float health, float protection, float protectionInnate, float mana, float vigor, float favor) {
            this.health = health;
            this.protection = protection;
            this.protectionInnate = protectionInnate;
            this.mana = mana;
            this.vigor = vigor;
            this.favor = favor;
        }

        // Getters for easy access to race specific stats
        public float getHealth() { return health; }
        public float getProtection() { return protection; }
        public float getProtectionInnate() { return protectionInnate; }
        public float getMana() { return mana; }
        public float getVigor() { return vigor; }
        public float getFavor() { return favor; }
        // public List<String> getTags() { return tags; } // REMOVED: Tags getter
    }
}
