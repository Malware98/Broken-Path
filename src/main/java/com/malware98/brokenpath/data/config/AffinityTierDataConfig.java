package com.malware98.brokenpath.data.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;

/**
 * Manages configurable flat bonus values for each affinity tier (Ideal, Efficient, Acceptable, Deficient).
 * These bonuses are delivered upon class and specialization selection.
 * Implements the Singleton pattern.
 */
public class AffinityTierDataConfig {

    // --- Singleton Instance ---
    private static AffinityTierDataConfig INSTANCE;

    // --- Logger ---
    private static final Logger LOGGER = LogManager.getLogger(BrokenPath.MOD_ID + "_AffinityTierDataConfig");

    // --- Gson Instance ---
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    // --- Configuration File Path ---
    private static final String CONFIG_FILE_NAME = "brokenpath_affinity_tiers.json";
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // --- Configuration Values ---
    public float idealTierBonusClass;
    public float idealTierBonusSpecialization;

    public float efficientTierBonusClass;
    public float efficientTierBonusSpecialization;

    public float acceptableTierBonusClass;
    public float acceptableTierBonusSpecialization;

    public float deficientTierBonusClass;
    public float deficientTierBonusSpecialization;

    // --- Constructor ---
    private AffinityTierDataConfig() {
        initializeDefaults();
    }

    // --- Singleton Access Method ---
    public static AffinityTierDataConfig getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new AffinityTierDataConfig();
        }
        return INSTANCE;
    }

    // --- Default Initialization ---
    private void initializeDefaults() {
        // Tier "Ideal" (4 matching tags) - Total +90 points, split +45 for class, +45 for specialization
        idealTierBonusClass = 45.0f;
        idealTierBonusSpecialization = 45.0f;

        // Tier "Efficient" (3 matching tags) - Total +60 points, split +30 for class, +30 for specialization
        efficientTierBonusClass = 30.0f;
        efficientTierBonusSpecialization = 30.0f;

        // Tier "Acceptable" (2 matching tags) - Total +30 points, split +15 for class, +15 for specialization
        acceptableTierBonusClass = 15.0f;
        acceptableTierBonusSpecialization = 15.0f;

        // Tier "Deficient" (0-1 matching tags) - Total +0 points
        deficientTierBonusClass = 0.0f;
        deficientTierBonusSpecialization = 0.0f;
    }

    // --- Configuration Loading/Saving ---
    /**
     * Loads affinity tier configurations from 'brokenpath_affinity_tiers.json'.
     */
    public void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                AffinityTierDataConfig loadedConfig = GSON.fromJson(reader, AffinityTierDataConfig.class);
                if (loadedConfig != null) {
                    this.idealTierBonusClass = loadedConfig.idealTierBonusClass;
                    this.idealTierBonusSpecialization = loadedConfig.idealTierBonusSpecialization;
                    this.efficientTierBonusClass = loadedConfig.efficientTierBonusClass;
                    this.efficientTierBonusSpecialization = loadedConfig.efficientTierBonusSpecialization;
                    this.acceptableTierBonusClass = loadedConfig.acceptableTierBonusClass;
                    this.acceptableTierBonusSpecialization = loadedConfig.acceptableTierBonusSpecialization;
                    this.deficientTierBonusClass = loadedConfig.deficientTierBonusClass;
                    this.deficientTierBonusSpecialization = loadedConfig.deficientTierBonusSpecialization;
                } else {
                    LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default affinity tier configurations.", CONFIG_FILE_NAME);
                    initializeDefaults();
                }
            } catch (Exception e) {
                LOGGER.error("Error parsing or reading affinity tier configuration file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                initializeDefaults();
            }
        } else {
            LOGGER.info("Affinity tier configuration file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            saveConfig();
        }

        if (this.idealTierBonusClass < 0) this.idealTierBonusClass = 45.0f;
        if (this.efficientTierBonusClass < 0) this.efficientTierBonusClass = 30.0f;
        if (this.acceptableTierBonusClass < 0) this.acceptableTierBonusClass = 15.0f;
    }

    /**
     * Saves the current affinity tier configuration to 'brokenpath_affinity_tiers.json'.
     */
    public void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(this, writer);
        } catch (IOException e) {
            LOGGER.error("Failed to save affinity tier configuration file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // --- Getters for Configuration Values ---
    /**
     * Retrieves the class selection bonus value for a given affinity tier.
     * @param affinityTier The affinity tier as a string.
     * @return The flat bonus value applied on class selection.
     */
    public float getClassSelectionTierBonus(String affinityTier) {
        switch (affinityTier.toUpperCase()) {
            case "IDEAL": return idealTierBonusClass;
            case "EFFICIENT": return efficientTierBonusClass;
            case "ACCEPTABLE": return acceptableTierBonusClass;
            case "DEFICIENT": return deficientTierBonusClass;
            default: return 0.0f;
        }
    }

    /**
     * Retrieves the specialization selection bonus value for a given affinity tier.
     * @param affinityTier The affinity tier as a string.
     * @return The flat bonus value applied on specialization selection.
     */
    public float getSpecializationSelectionTierBonus(String affinityTier) {
        switch (affinityTier.toUpperCase()) {
            case "IDEAL": return idealTierBonusSpecialization;
            case "EFFICIENT": return efficientTierBonusSpecialization;
            case "ACCEPTABLE": return acceptableTierBonusSpecialization;
            case "DEFICIENT": return deficientTierBonusSpecialization;
            default: return 0.0f;
        }
    }

    public float getIdealTierBonusClass() { return idealTierBonusClass; }
    public float getIdealTierBonusSpecialization() { return idealTierBonusSpecialization; }
    public float getEfficientTierBonusClass() { return efficientTierBonusClass; }
    public float getEfficientTierBonusSpecialization() { return efficientTierBonusSpecialization; }
    public float getAcceptableTierBonusClass() { return acceptableTierBonusClass; }
    public float getAcceptableTierBonusSpecialization() { return acceptableTierBonusSpecialization; }
    public float getDeficientTierBonusClass() { return deficientTierBonusClass; }
    public float getDeficientTierBonusSpecialization() { return deficientTierBonusSpecialization; }
}