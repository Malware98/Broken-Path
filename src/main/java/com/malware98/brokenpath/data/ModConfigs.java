package com.malware98.brokenpath.data;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * Main configuration class for the "BrokenPath" mod.
 * Manages all configurable variables related to player stats, races, classes,
 * XP progression, regeneration, penalties, and achievements.
 * Provides functionality to load and save these configurations from/to a JSON file.
 */
public class ModConfigs {

    // --- Configuration Constants ---
    // Singleton instance of ModConfigs.
    private static ModConfigs INSTANCE;
    // Gson object for pretty-printed JSON serialization/deserialization.
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
    // Name of the configuration file.
    private static final String CONFIG_FILE_NAME = "brokenpath_configs.json";
    // Full path to the configuration file within Forge's config directory.
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // Maximum player level.
    public static final int MAX_LEVEL = 50;

    // Maximum multiplier for Favor bonus.
    public float maxFavorBonusMultiplier = 2.0f;

    // --- Configuration Variables Grouped by Category ---
    // Regeneration settings for health, mana, vigor, and protection.
    public RegenSettings regenSettings;
    // Combat-related settings, such as damage penetration.
    public CombatSettings combatSettings;
    // XP progression and smelting XP rewards.
    public XpSettings xpSettings;
    // Achievement definitions, including XP rewards and thresholds.
    public Map<String, AchievementConfig> achievements;

    // Core attribute settings, like manual allocation limits.
    public AttributeSettings attributeSettings;
    // Base stat configurations for each race.
    public Map<String, RaceSettings> raceSettings;
    // Class affinities, defining which stats a class is strong with for certain races.
    public Map<String, Map<String, List<String>>> classAffinities;
    // Fundamental attribute bonuses granted by specific classes.
    public Map<String, List<String>> classAttributeBonuses;
    // Attribute point progression per level range.
    public Map<String, Integer> levelProgression;
    // Favor modifiers applied for specific player actions.
    public Map<String, Float> favorActionModifiers;


    // --- Constructor and Singleton Pattern ---
    // Private constructor to enforce the Singleton pattern.
    private ModConfigs() {
        // Initialize all values with their default settings.
        // This ensures valid default configurations even if JSON loading fails or the file doesn't exist.
        initializeDefaults();
    }

    /**
     * Provides the single instance of {@link ModConfigs}.
     * Implements the Singleton pattern to ensure a consistent configuration across the mod.
     * @return The singleton instance of ModConfigs.
     */
    public static ModConfigs getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new ModConfigs();
        }
        return INSTANCE;
    }

    // --- Default Initialization Logic ---
    // Initializes all configuration values with their default settings.
    private void initializeDefaults() {
        // Initialize maps to prevent NullPointerExceptions if JSON sections are missing or malformed.
        attributeSettings = new AttributeSettings();
        raceSettings = new HashMap<>();
        classAffinities = new HashMap<>();
        classAttributeBonuses = new HashMap<>();
        levelProgression = new HashMap<>();
        favorActionModifiers = new HashMap<>();
        achievements = new HashMap<>();

        // Initialize nested configuration classes.
        regenSettings = new RegenSettings();
        combatSettings = new CombatSettings();
        xpSettings = new XpSettings();

        // --- Default Attribute Allocation Limits ---
        attributeSettings.manualAllocationLimit.put("CONSTITUTION", 70);
        attributeSettings.manualAllocationLimit.put("STRENGTH", 70);
        attributeSettings.manualAllocationLimit.put("DEXTERITY", 70);
        attributeSettings.manualAllocationLimit.put("INTELLIGENCE", 70);

        // --- Scaling Factors for Stat Calculations ---
        // These constants are used to normalize stat scaling based on the defined maximum attribute points.
        // They help ensure a balanced progression curve across different attributes and stats.
        final float CON_MAX_POINTS = attributeSettings.manualAllocationLimit.get("CONSTITUTION");
        final float INT_MAX_POINTS = attributeSettings.manualAllocationLimit.get("INTELLIGENCE");
        final float DEX_MAX_POINTS = attributeSettings.manualAllocationLimit.get("DEXTERITY");
        final float STR_MAX_POINTS = attributeSettings.manualAllocationLimit.get("STRENGTH");

        // --- Default XP Progression Settings ---
        xpSettings.xpProgression.baseXp = 100.0f;
        xpSettings.xpProgression.linearXpCoefficient = 50.0f;
        xpSettings.xpProgression.polynomialXpCoefficient = 1.2f;
        xpSettings.xpProgression.polynomialXpExponent = 2.5f;
        xpSettings.xpProgression.minXpPerLevel = 100;

        // --- Initial Race Stat Configurations ---
        // Defines the base stats and scaling for each playable race.
        // This allows for distinct racial strengths and weaknesses from character creation.
        RaceSettings humanSettings = new RaceSettings();
        humanSettings.health = createHealthStatConfig(20.0f, (120.0f - 20.0f) / CON_MAX_POINTS, 1.0f, 100.0f, 1.2f, 140.0f, 1.4f, 160.0f);
        humanSettings.protection = createProtectionStatConfig((100.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 100.0f, 1.2f, 120.0f, 1.4f, 140.0f);
        humanSettings.protectionInnate = createProtectionInnateConfig(0.0f, 0.0f);
        humanSettings.mana = createManaStatConfig(20.0f, (100.0f - 20.0f) / INT_MAX_POINTS, 1.0f, 100.0f, 1.0f, 100.0f, 1.25f, 120.0f);
        humanSettings.vigor = createVigorStatConfig(20.0f, (100.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 100.0f, 1.0f, 100.0f, 1.25f, 120.0f);
        humanSettings.favor = new FavorConfig(70.0f, 200.0f, 0.0f); // baseFavor, maxLimit, minLimit
        raceSettings.put("HUMAN", humanSettings);

        RaceSettings elfSettings = new RaceSettings();
        elfSettings.health = createHealthStatConfig(14.0f, (84.0f - 14.0f) / CON_MAX_POINTS, 1.0f, 84.0f, 1.1428571f, 94.0f, 1.3714286f, 110.0f);
        elfSettings.protection = createProtectionStatConfig((80.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 80.0f, 1.25f, 100.0f, 1.5f, 120.0f);
        elfSettings.protectionInnate = createProtectionInnateConfig(0.0f, 0.0f);
        elfSettings.mana = createManaStatConfig(40.0f, (120.0f - 40.0f) / INT_MAX_POINTS, 1.0f, 120.0f, 1.5f, 160.0f, 2.0f, 200.0f);
        elfSettings.vigor = createVigorStatConfig(20.0f, (100.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 100.0f, 1.0f, 100.0f, 1.25f, 120.0f);
        elfSettings.favor = new FavorConfig(0.0f, 200.0f, 0.0f);
        raceSettings.put("ELF", elfSettings);

        RaceSettings orcSettings = new RaceSettings();
        orcSettings.health = createHealthStatConfig(30.0f, (140.0f - 30.0f) / CON_MAX_POINTS, 1.0f, 140.0f, 1.1818182f, 160.0f, 1.5454545f, 200.0f);
        orcSettings.protection = createProtectionStatConfig((10.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 10.0f, 4.0f, 40.0f, 8.0f, 80.0f);
        orcSettings.protectionInnate = createProtectionInnateConfig(0.0f, 0.0f);
        orcSettings.mana = createManaStatConfig(0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f); // Base 0, mult 0
        orcSettings.vigor = createVigorStatConfig(40.0f, (120.0f - 40.0f) / DEX_MAX_POINTS, 1.0f, 120.0f, 1.2f, 140.0f, 1.5f, 160.0f);
        orcSettings.favor = new FavorConfig(50.0f, 200.0f, 0.0f);
        raceSettings.put("ORC", orcSettings);

        RaceSettings draconidSettings = new RaceSettings();
        draconidSettings.health = createHealthStatConfig(16.0f, (100.0f - 16.0f) / CON_MAX_POINTS, 1.0f, 100.0f, 1.2380952f, 120.0f, 1.4761904f, 140.0f);
        draconidSettings.protection = createProtectionStatConfig((80.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 80.0f, 1.2857143f, 100.0f, 1.5714285f, 120.0f);
        draconidSettings.protectionInnate = createProtectionInnateConfig(10.0f, 0.2f); // 10.0f base, 0.2f per level
        draconidSettings.mana = createManaStatConfig(30.0f, (90.0f - 30.0f) / INT_MAX_POINTS, 1.0f, 90.0f, 1.3333334f, 110.0f, 1.6666666f, 130.0f);
        draconidSettings.vigor = createVigorStatConfig(20.0f, (100.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 100.0f, 1.5f, 140.0f, 1.75f, 160.0f);
        draconidSettings.favor = new FavorConfig(20.0f, 200.0f, 0.0f);
        raceSettings.put("DRACONID", draconidSettings);

        RaceSettings chimeraAgileSettings = new RaceSettings();
        chimeraAgileSettings.health = createHealthStatConfig(16.0f, (80.0f - 16.0f) / CON_MAX_POINTS, 1.0f, 80.0f, 1.3125f, 100.0f, 1.625f, 120.0f);
        chimeraAgileSettings.protection = createProtectionStatConfig((80.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 80.0f, 1.2857143f, 100.0f, 1.5714285f, 120.0f);
        chimeraAgileSettings.protectionInnate = createProtectionInnateConfig(10.0f, 0.2f);
        chimeraAgileSettings.mana = createManaStatConfig(20.0f, (90.0f - 20.0f) / INT_MAX_POINTS, 1.0f, 90.0f, 1.2857143f, 110.0f, 1.5714285f, 130.0f);
        chimeraAgileSettings.vigor = createVigorStatConfig(20.0f, (120.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 120.0f, 1.4f, 160.0f, 1.8f, 200.0f);
        chimeraAgileSettings.favor = new FavorConfig(50.0f, 200.0f, 0.0f);
        raceSettings.put("CHIMERA_AGILE", chimeraAgileSettings);

        RaceSettings chimeraDefensiveSettings = new RaceSettings();
        chimeraDefensiveSettings.health = createHealthStatConfig(20.0f, (100.0f - 20.0f) / CON_MAX_POINTS, 1.0f, 100.0f, 1.25f, 120.0f, 1.5f, 140.0f);
        chimeraDefensiveSettings.protection = createProtectionStatConfig((100.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 100.0f, 1.2222222f, 120.0f, 1.4444444f, 140.0f);
        chimeraDefensiveSettings.protectionInnate = createProtectionInnateConfig(10.0f, 0.2f);
        chimeraDefensiveSettings.mana = createManaStatConfig(20.0f, (60.0f - 20.0f) / INT_MAX_POINTS, 1.0f, 60.0f, 1.5f, 80.0f, 2.0f, 100.0f);
        chimeraDefensiveSettings.vigor = createVigorStatConfig(20.0f, (80.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 80.0f, 1.6666666f, 120.0f, 2.0f, 140.0f);
        chimeraDefensiveSettings.favor = new FavorConfig(50.0f, 200.0f, 0.0f);
        raceSettings.put("CHIMERA_DEFENSIVE", chimeraDefensiveSettings);

        RaceSettings tritonSettings = new RaceSettings();
        tritonSettings.health = createHealthStatConfig(18.0f, (90.0f - 18.0f) / CON_MAX_POINTS, 1.0f, 90.0f, 1.1388888f, 100.0f, 1.6944444f, 120.0f);
        tritonSettings.protection = createProtectionStatConfig((80.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 80.0f, 1.2857143f, 100.0f, 1.5714285f, 120.0f);
        tritonSettings.protectionInnate = createProtectionInnateConfig(10.0f, 0.2f);
        tritonSettings.mana = createManaStatConfig(20.0f, (100.0f - 20.0f) / INT_MAX_POINTS, 1.0f, 100.0f, 1.25f, 120.0f, 1.75f, 160.0f);
        tritonSettings.vigor = createVigorStatConfig(20.0f, (80.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 80.0f, 1.6666666f, 120.0f, 2.0f, 140.0f);
        tritonSettings.favor = new FavorConfig(80.0f, 200.0f, 0.0f);
        raceSettings.put("TRITON", tritonSettings);

        RaceSettings aasimarSettings = new RaceSettings();
        aasimarSettings.health = createHealthStatConfig(16.0f, (90.0f - 16.0f) / CON_MAX_POINTS, 1.0f, 90.0f, 1.1351351f, 100.0f, 1.945946f, 160.0f);
        aasimarSettings.protection = createProtectionStatConfig((80.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 80.0f, 1.2857143f, 100.0f, 1.5714285f, 120.0f);
        aasimarSettings.protectionInnate = createProtectionInnateConfig(10.0f, 0.2f);
        aasimarSettings.mana = createManaStatConfig(20.0f, (100.0f - 20.0f) / INT_MAX_POINTS, 1.0f, 100.0f, 1.5f, 140.0f, 1.75f, 160.0f);
        aasimarSettings.vigor = createVigorStatConfig(20.0f, (80.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 80.0f, 1.6666666f, 120.0f, 2.3333333f, 160.0f);
        aasimarSettings.favor = new FavorConfig(100.0f, 200.0f, 0.0f);
        raceSettings.put("AASIMAR", aasimarSettings);

        RaceSettings androidSettings = new RaceSettings();
        androidSettings.health = createHealthStatConfig(10.0f, (60.0f - 10.0f) / CON_MAX_POINTS, 1.0f, 60.0f, 1.0f, 60.0f, 1.4f, 80.0f);
        androidSettings.protection = createProtectionStatConfig((140.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 140.0f, 1.1666666f, 160.0f, 1.5f, 200.0f);
        androidSettings.protectionInnate = createProtectionInnateConfig(20.0f, 0.2f); // 20.0f base, 0.2f per level
        androidSettings.mana = createManaStatConfig(0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f); // Base 0, mult 0
        androidSettings.vigor = createVigorStatConfig(40.0f, (100.0f - 40.0f) / DEX_MAX_POINTS, 1.0f, 100.0f, 1.3333334f, 120.0f, 2.0f, 160.0f);
        androidSettings.favor = new FavorConfig(80.0f, 200.0f, 0.0f);
        raceSettings.put("ANDROID", androidSettings);

        // --- Class Affinities ---
        // Defines which stats a class has an affinity with for specific races.
        // This allows for unique stat scaling based on class and race combinations.
        classAffinities.put("CHAMPION", Map.of("HEALTH", List.of("HUMAN"), "PROTECTION", List.of("HUMAN")));
        classAffinities.put("SORCERER", Map.of("MANA", List.of("ELF"), "PROTECTION", List.of("ELF")));
        classAffinities.put("BERSERKER", Map.of("HEALTH", List.of("ORC"), "VIGOR", List.of("ORC")));
        classAffinities.put("SHAMAN", Map.of("MANA", List.of("DRACONID"), "VIGOR", List.of("DRACONID")));
        classAffinities.put("EXPLORER", Map.of("VIGOR", List.of("CHIMERA_AGILE"), "PROTECTION", List.of("CHIMERA_AGILE")));
        classAffinities.put("CHANNELER", Map.of("MANA", List.of("TRITON"), "HEALTH", List.of("TRITON")));
        classAffinities.put("VESTAL", Map.of("PROTECTION", List.of("AASIMAR"), "MANA", List.of("AASIMAR")));
        classAffinities.put("TECHNOMANCER", Map.of("PROTECTION", List.of("ANDROID"), "VIGOR", List.of("ANDROID")));
        classAffinities.put("NO_CLASS", Map.of(
                "HEALTH", Collections.emptyList(),
                "MANA", Collections.emptyList(),
                "VIGOR", Collections.emptyList(),
                "PROTECTION", Collections.emptyList()
        ));

        // --- Fundamental Attribute Bonuses per Class ---
        // Specifies which core attributes receive a bonus based on the player's chosen class.
        // This further differentiates class roles and strengths.
        classAttributeBonuses.put("CHAMPION", List.of("CONSTITUTION", "STRENGTH"));
        classAttributeBonuses.put("SORCERER", List.of("INTELLIGENCE", "STRENGTH"));
        classAttributeBonuses.put("BERSERKER", List.of("CONSTITUTION", "DEXTERITY"));
        classAttributeBonuses.put("SHAMAN", List.of("INTELLIGENCE", "DEXTERITY"));
        classAttributeBonuses.put("EXPLORER", List.of("DEXTERITY", "STRENGTH"));
        classAttributeBonuses.put("CHANNELER", List.of("INTELLIGENCE", "CONSTITUTION"));
        classAttributeBonuses.put("VESTAL", List.of("STRENGTH", "INTELLIGENCE"));
        classAttributeBonuses.put("TECHNOMANCER", List.of("STRENGTH", "DEXTERITY"));
        classAttributeBonuses.put("NO_CLASS", Collections.emptyList());

        // --- Attribute Point Allocation per Level Progression ---
        // Defines how many attribute points players gain at different level ranges.
        // This controls the pace of character progression and customization.
        levelProgression.put("1-1", 0);
        levelProgression.put("2-10", 1);
        levelProgression.put("11-20", 2);
        levelProgression.put("21-30", 3);
        levelProgression.put("31-40", 4);
        levelProgression.put("41-49", 5);
        levelProgression.put("50-50", 6);

        // --- Favor Action Modifiers ---
        // Configures how much Favor is gained or lost for specific player actions.
        // This system encourages or discourages certain behaviors through a dynamic Favor score.
        // Animal Interaction (Favor Gain).
        favorActionModifiers.put("TAME_WOLF", 1.5f);
        favorActionModifiers.put("TAME_CAT", 1.5f);
        favorActionModifiers.put("TAME_HORSE", 1.5f);
        favorActionModifiers.put("TAME_DONKEY", 1.5f);
        favorActionModifiers.put("TAME_MULE", 1.5f);
        favorActionModifiers.put("TAME_LLAMA", 1.5f);
        favorActionModifiers.put("FEED_CHICKEN", 1.0f);
        favorActionModifiers.put("FEED_COW", 1.0f);
        favorActionModifiers.put("FEED_PIG", 1.0f);
        favorActionModifiers.put("FEED_SHEEP", 1.0f);
        favorActionModifiers.put("FEED_PARROT", 1.0f);
        favorActionModifiers.put("FEED_PANDA", 1.0f);
        favorActionModifiers.put("FEED_FOX", 1.0f);

        // Animal Interaction (Favor Loss).
        favorActionModifiers.put("KILL_WOLF", -2.5f);
        favorActionModifiers.put("KILL_CAT", -2.5f);
        favorActionModifiers.put("KILL_HORSE", -2.5f);
        favorActionModifiers.put("KILL_DONKEY", -2.5f);
        favorActionModifiers.put("KILL_MULE", -2.5f);
        favorActionModifiers.put("KILL_LLAMA", -2.5f);
        favorActionModifiers.put("KILL_PARROT", -2.5f);
        favorActionModifiers.put("KILL_PANDA", -2.5f);
        favorActionModifiers.put("KILL_FOX", -2.5f);

        // Villager Interaction - Easy (Favor Gain).
        favorActionModifiers.put("TRADE_FARMER", 0.75f);
        favorActionModifiers.put("TRADE_FISHERMAN", 0.75f);
        favorActionModifiers.put("TRADE_SHEPHERD", 0.75f);
        favorActionModifiers.put("TRADE_LEATHERWORKER", 0.75f);
        favorActionModifiers.put("TRADE_MASON", 0.75f);

        // Villager Interaction - Medium (Favor Gain).
        favorActionModifiers.put("TRADE_CARTOGRAPHER", 1.0f);
        favorActionModifiers.put("TRADE_FLETCHER", 1.0f);
        favorActionModifiers.put("TRADE_BUTCHER", 1.0f);
        favorActionModifiers.put("TRADE_TOOLSMITH", 1.25f);
        favorActionModifiers.put("TRADE_WEAPONSMITH", 1.25f);

        // Villager Interaction - Hard (Favor Gain).
        favorActionModifiers.put("TRADE_LIBRARIAN", 1.75f);
        favorActionModifiers.put("TRADE_CLERIC", 1.75f);
        favorActionModifiers.put("TRADE_ARMORER", 1.75f);
        favorActionModifiers.put("DEFEND_RAID", 15.0f);

        // Villager Interaction - Default / No Profession.
        favorActionModifiers.put("TRADE_VILLAGER", 0.5f);

        // Villager Interaction (Favor Loss).
        favorActionModifiers.put("ATTACK_VILLAGER", -1.5f);
        favorActionModifiers.put("ATTACK_FARMER", -2.0f);
        favorActionModifiers.put("ATTACK_FISHERMAN", -2.0f);
        favorActionModifiers.put("ATTACK_SHEPHERD", -2.0f);
        favorActionModifiers.put("ATTACK_LEATHERWORKER", -2.0f);
        favorActionModifiers.put("ATTACK_MASON", -2.0f);
        favorActionModifiers.put("ATTACK_CARTOGRAPHER", -2.5f);
        favorActionModifiers.put("ATTACK_FLETCHER", -2.5f);
        favorActionModifiers.put("ATTACK_BUTCHER", -2.5f);
        favorActionModifiers.put("ATTACK_TOOLSMITH", -3.0f);
        favorActionModifiers.put("ATTACK_WEAPONSMITH", -3.0f);
        favorActionModifiers.put("ATTACK_ARMORER", -3.0f);
        favorActionModifiers.put("ATTACK_LIBRARIAN", -3.5f);
        favorActionModifiers.put("ATTACK_CLERIC", -4.0f);
        favorActionModifiers.put("KILL_VILLAGER", -7.5f);
        favorActionModifiers.put("DESTROY_VILLAGE_BLOCK", -2.5f);

        // Golem Interaction (Favor Gain).
        favorActionModifiers.put("REPAIR_GOLEM", 0.5f);

        // Golem Interaction (Favor Loss).
        favorActionModifiers.put("DAMAGE_GOLEM", -1.0f);
        favorActionModifiers.put("SHEAR_SNOW_GOLEM_PUMPKIN", -2.5f);
        favorActionModifiers.put("KILL_GOLEM", -5.0f);

        // --- Smelting XP Rewards ---
        // Defines the XP awarded for smelting specific items.
        // This integrates the mod's XP system with vanilla crafting mechanics.
        xpSettings.smeltingXpRewards.put("minecraft:iron_ingot", 2);
        xpSettings.smeltingXpRewards.put("minecraft:gold_ingot", 3);
        xpSettings.smeltingXpRewards.put("minecraft:copper_ingot", 1);
        xpSettings.smeltingXpRewards.put("minecraft:cooked_beef", 1);
        xpSettings.smeltingXpRewards.put("minecraft:charcoal", 1);
        xpSettings.smeltingXpRewards.put("minecraft:lapis_lazuli", 2);
        xpSettings.smeltingXpRewards.put("minecraft:redstone", 2);
        xpSettings.smeltingXpRewards.put("minecraft:emerald", 2);
        xpSettings.smeltingXpRewards.put("minecraft:diamond", 4);
        xpSettings.smeltingXpRewards.put("minecraft:coal", 1);
        xpSettings.smeltingXpRewards.put("minecraft:quartz", 2);
        xpSettings.smeltingXpRewards.put("minecraft:netherite_scrap", 10);
        xpSettings.smeltingXpRewards.put("minecraft:cooked_porkchop", 1);
        xpSettings.smeltingXpRewards.put("minecraft:cooked_chicken", 1);
        xpSettings.smeltingXpRewards.put("minecraft:cooked_mutton", 1);
        xpSettings.smeltingXpRewards.put("minecraft:cooked_rabbit", 1);
        xpSettings.smeltingXpRewards.put("minecraft:cooked_fish", 1);
        xpSettings.smeltingXpRewards.put("minecraft:cooked_salmon", 1);
        xpSettings.smeltingXpRewards.put("minecraft:baked_potato", 1);
        xpSettings.smeltingXpRewards.put("minecraft:dried_kelp", 1);
        xpSettings.smeltingXpRewards.put("minecraft:stone", 1);
        xpSettings.smeltingXpRewards.put("minecraft:smooth_stone", 1);
        xpSettings.smeltingXpRewards.put("minecraft:brick", 1);
        xpSettings.smeltingXpRewards.put("minecraft:nether_brick", 1);
        xpSettings.smeltingXpRewards.put("minecraft:green_dye", 1);
        xpSettings.smeltingXpRewards.put("minecraft:sponge", 1);
        xpSettings.smeltingXpRewards.put("minecraft:glass", 1);

        xpSettings.xpLossPercentageOnDeath = 0.10f;
        xpSettings.xpMaxDebtPercentage = 0.15f;
        xpSettings.defaultSmeltingXp = 1;

        // --- Achievement Configurations ---
        // Defines thresholds and XP rewards for various in-game achievements.
        // These motivate players to explore, combat, and progress.
        // Exploration Achievements (Biomes and Dimensions).
        achievements.put("EXPLORATION_ROOT", new AchievementConfig(20, 1));
        achievements.put("EXPLORER_NOVICE", new AchievementConfig(10, 5));
        achievements.put("LOCAL_ADVENTURER", new AchievementConfig(50, 10));
        achievements.put("ACCOMPLISHED_CARTOGRAPHER", new AchievementConfig(100, 15));
        achievements.put("UNKNOWN_PIONEER", new AchievementConfig(200, 1)); // Triggered on first death in a new dimension.

        // Combat Achievements (Killing Hostile Mobs).
        achievements.put("FLEDGLING_ADVOCATE", new AchievementConfig(40, 10));
        achievements.put("CREATURE_HUNTER", new AchievementConfig(90, 50));
        achievements.put("THREATS_EXTERMINATOR", new AchievementConfig(300, 200));
        achievements.put("SHADOWS_TERROR", new AchievementConfig(600, 500));
        achievements.put("MASACRE_MASTER", new AchievementConfig(1000, 1000));

        // Mining and Gathering Achievements.
        achievements.put("ROCK_FINDER", new AchievementConfig(10, 64));
        achievements.put("AMATEUR_EXCAVATOR", new AchievementConfig(60, 100));
        achievements.put("SKILLED_MINERALOGIST", new AchievementConfig(180, 500));
        achievements.put("GEOLOGIST_EXPERT", new AchievementConfig(350, 1000));
        achievements.put("MINING_MASTER", new AchievementConfig(700, 2500));
        achievements.put("HIDDEN_TREASURE", new AchievementConfig(250, 50)); // Mine 50 diamonds.
        achievements.put("MASTER_OBSIDIAN", new AchievementConfig(150, 20)); // Mine 20 obsidian.

        // Farming and Animal Husbandry Achievements.
        achievements.put("NOVICE_SOWER", new AchievementConfig(30, 50));
        achievements.put("DEDICATED_FARMER", new AchievementConfig(80, 200));
        achievements.put("ACCOMPLISHED_AGRONOMIST", new AchievementConfig(180, 500));
        achievements.put("HARVEST_POWER", new AchievementConfig(350, 1000));
        achievements.put("BEAST_TAMER", new AchievementConfig(100, 3));
        achievements.put("TIRELESS_SHEPHERD", new AchievementConfig(200, 10));
        achievements.put("SUCCESSFUL_BREEDER", new AchievementConfig(150, 20));

        // Crafting and Manufacturing Achievements.
        achievements.put("NOVICE_CRAFTER", new AchievementConfig(20, 25)); // 1 for the very first craft.
        achievements.put("CREATIVE_CRAFTER", new AchievementConfig(50, 50));
        achievements.put("ARTISAN_APPRENTICE", new AchievementConfig(100, 100));
        achievements.put("MASTER_CRAFTSMAN", new AchievementConfig(250, 150));
        achievements.put("ART_KITCHEN", new AchievementConfig(70, 50)); // Smelt 50 edible items.
        achievements.put("TIRELESS_FURNACE", new AchievementConfig(160, 200)); // Smelt 200 items in total.

        // Survival and General Progression Achievements.
        achievements.put("FIRST_STEPS", new AchievementConfig(10, 100));
        achievements.put("CONSTANT_WALKER", new AchievementConfig(100, 1000));
        achievements.put("TIRELESS_TRAVELER", new AchievementConfig(250, 5000));
        achievements.put("HUNGER_RESISTANT", new AchievementConfig(180, 1)); // 1 for surviving the "Starving" stage.
        achievements.put("A_WHOLE_DAY", new AchievementConfig(50, 1)); // 1 for surviving one Minecraft day.
        achievements.put("ONE_WEEK_WORLD", new AchievementConfig(200, 7)); // 7 for surviving seven Minecraft days.
        achievements.put("IM_STILL_ALIVE", new AchievementConfig(800, 30)); // 30 for surviving thirty Minecraft days.
        achievements.put("SURVIVAL_ROOT", new AchievementConfig(10, 1));
    }

    // --- Helper Methods for Configuration Creation ---
    // These methods simplify the creation of stat configuration objects,
    // ensuring consistency and readability in the default initialization.

    /**
     * Creates a {@link HealthStatConfig} object for Health, linked to CONSTITUTION.
     */
    private HealthStatConfig createHealthStatConfig(float baseInitial,
                                                    float conMult,
                                                    float baseMult, float baseLimit,
                                                    float classBonusMult, float classBonusLimit,
                                                    float racialAffinityMult, float racialAffinityLimit) {
        HealthStatConfig config = new HealthStatConfig();
        config.baseInitialValue = baseInitial;
        config.conMultiplierPerPoint = conMult;

        config.affinityLimits.put("BASE", new AffinityLimit(baseMult, baseLimit));
        config.affinityLimits.put("CLASS_BONUS", new AffinityLimit(classBonusMult, classBonusLimit));
        config.affinityLimits.put("RACIAL_AFFINITY", new AffinityLimit(racialAffinityMult, racialAffinityLimit));
        return config;
    }

    /**
     * Creates a {@link ManaStatConfig} object for Mana, linked to INTELLIGENCE.
     */
    private ManaStatConfig createManaStatConfig(float baseInitial,
                                                float intMult,
                                                float baseMult, float baseLimit,
                                                float classBonusMult, float classBonusLimit,
                                                float racialAffinityMult, float racialAffinityLimit) {
        ManaStatConfig config = new ManaStatConfig();
        config.baseInitialValue = baseInitial;
        config.intMultiplierPerPoint = intMult;

        config.affinityLimits.put("BASE", new AffinityLimit(baseMult, baseLimit));
        config.affinityLimits.put("CLASS_BONUS", new AffinityLimit(classBonusMult, classBonusLimit));
        config.affinityLimits.put("RACIAL_AFFINITY", new AffinityLimit(racialAffinityMult, racialAffinityLimit));
        return config;
    }

    /**
     * Creates a {@link VigorStatConfig} object for Vigor, linked to DEXTERITY.
     */
    private VigorStatConfig createVigorStatConfig(float baseInitial,
                                                  float dexMult,
                                                  float baseMult, float baseLimit,
                                                  float classBonusMult, float classBonusLimit,
                                                  float racialAffinityMult, float racialAffinityLimit) {
        VigorStatConfig config = new VigorStatConfig();
        config.baseInitialValue = baseInitial;
        config.dexMultiplierPerPoint = dexMult;

        config.affinityLimits.put("BASE", new AffinityLimit(baseMult, baseLimit));
        config.affinityLimits.put("CLASS_BONUS", new AffinityLimit(classBonusMult, classBonusLimit));
        config.affinityLimits.put("RACIAL_AFFINITY", new AffinityLimit(racialAffinityMult, racialAffinityLimit));
        return config;
    }

    /**
     * Configures the scaling for Innate Protection.
     * @param baseValue The base innate protection value.
     * @param perLevelIncrease The increase in innate protection per player level.
     * @return A new {@link ProtectionInnateConfig} instance.
     */
    private ProtectionInnateConfig createProtectionInnateConfig(float baseValue, float perLevelIncrease) {
        return new ProtectionInnateConfig(baseValue, perLevelIncrease);
    }

    /**
     * Creates a {@link ProtectionStatConfig} object for Protection, linked to STRENGTH.
     */
    private ProtectionStatConfig createProtectionStatConfig(float strEfficacyMult,
                                                            float baseMult, float baseLimit,
                                                            float classBonusMult, float classBonusLimit,
                                                            float racialAffinityMult, float racialAffinityLimit) {
        ProtectionStatConfig config = new ProtectionStatConfig();
        config.strEfficacyMultiplierPerPoint = strEfficacyMult;

        config.affinityLimits.put("BASE", new AffinityLimit(baseMult, baseLimit));
        config.affinityLimits.put("CLASS_BONUS", new AffinityLimit(classBonusMult, classBonusLimit));
        config.affinityLimits.put("RACIAL_AFFINITY", new AffinityLimit(racialAffinityMult, racialAffinityLimit));
        return config;
    }

    // --- Configuration Loading and Saving ---

    /**
     * Loads the mod's configuration from the JSON file.
     * If the file does not exist, is empty, or is malformed, it creates a new one
     * with default values and saves it. This ensures robustness and ease of setup.
     */
    public static void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                INSTANCE = GSON.fromJson(reader, ModConfigs.class);
                if (INSTANCE == null) {
                    BrokenPath.LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default configurations.", CONFIG_FILE_NAME);
                    INSTANCE = new ModConfigs(); // Fallback to defaults if JSON is empty/invalid.
                }
            } catch (JsonSyntaxException e) {
                BrokenPath.LOGGER.error("Error parsing configuration file '{}'. Please check JSON syntax. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                INSTANCE = new ModConfigs(); // Fallback on JSON syntax errors.
            } catch (IOException e) {
                BrokenPath.LOGGER.error("Failed to read configuration file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                INSTANCE = new ModConfigs(); // Fallback on I/O errors.
            }
        } else {
            BrokenPath.LOGGER.info("Configuration file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            INSTANCE = new ModConfigs(); // Create new instance with defaults.
            saveConfig(); // Save the newly generated default configuration.
        }

        // --- Post-Load Safety Net ---
        // Ensures that all internal maps and objects are properly initialized
        // with default values if Gson couldn't load them (e.g., if a section was missing in JSON).
        // This is an additional layer of robustness against incomplete or older config files.
        INSTANCE.attributeSettings = Optional.ofNullable(INSTANCE.attributeSettings).orElseGet(AttributeSettings::new);
        INSTANCE.attributeSettings.manualAllocationLimit = Optional.ofNullable(INSTANCE.attributeSettings.manualAllocationLimit).orElseGet(HashMap::new);

        INSTANCE.raceSettings = Optional.ofNullable(INSTANCE.raceSettings).orElseGet(HashMap::new);
        for (Map.Entry<String, RaceSettings> entry : INSTANCE.raceSettings.entrySet()) {
            RaceSettings rs = entry.getValue();
            rs.health = Optional.ofNullable(rs.health).orElseGet(HealthStatConfig::new);
            rs.mana = Optional.ofNullable(rs.mana).orElseGet(ManaStatConfig::new);
            rs.vigor = Optional.ofNullable(rs.vigor).orElseGet(VigorStatConfig::new);
            rs.protection = Optional.ofNullable(rs.protection).orElseGet(ProtectionStatConfig::new);
            rs.protectionInnate = Optional.ofNullable(rs.protectionInnate).orElseGet(ProtectionInnateConfig::new);
            rs.favor = Optional.ofNullable(rs.favor).orElseGet(FavorConfig::new);

            // Ensure affinity limits maps are not null within each StatConfig.
            Optional.ofNullable(rs.health.affinityLimits).orElseGet(HashMap::new);
            Optional.ofNullable(rs.mana.affinityLimits).orElseGet(HashMap::new);
            Optional.ofNullable(rs.vigor.affinityLimits).orElseGet(HashMap::new);
            Optional.ofNullable(rs.protection.affinityLimits).orElseGet(HashMap::new);
        }

        INSTANCE.classAffinities = Optional.ofNullable(INSTANCE.classAffinities).orElseGet(HashMap::new);
        INSTANCE.classAttributeBonuses = Optional.ofNullable(INSTANCE.classAttributeBonuses).orElseGet(HashMap::new);
        INSTANCE.levelProgression = Optional.ofNullable(INSTANCE.levelProgression).orElseGet(HashMap::new);
        INSTANCE.favorActionModifiers = Optional.ofNullable(INSTANCE.favorActionModifiers).orElseGet(HashMap::new);
        INSTANCE.achievements = Optional.ofNullable(INSTANCE.achievements).orElseGet(HashMap::new);

        INSTANCE.regenSettings = Optional.ofNullable(INSTANCE.regenSettings).orElseGet(RegenSettings::new);
        INSTANCE.combatSettings = Optional.ofNullable(INSTANCE.combatSettings).orElseGet(CombatSettings::new);
        INSTANCE.xpSettings = Optional.ofNullable(INSTANCE.xpSettings).orElseGet(XpSettings::new);
        INSTANCE.xpSettings.xpProgression = Optional.ofNullable(INSTANCE.xpSettings.xpProgression).orElseGet(XpProgressionSettings::new);
        INSTANCE.xpSettings.smeltingXpRewards = Optional.ofNullable(INSTANCE.xpSettings.smeltingXpRewards).orElseGet(HashMap::new);
    }

    /**
     * Saves the current mod configuration to the JSON file.
     * This allows users to persist their custom settings.
     */
    public static void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(INSTANCE, writer);
        } catch (IOException e) {
            BrokenPath.LOGGER.error("Failed to save configuration file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // --- Configuration Logic Methods ---

    /**
     * Calculates the amount of XP required for the next level based on a configurable formula.
     * @param currentLevel The player's current level.
     * @return The XP needed to reach the next level, or 0 if at max level.
     */
    public int getXPForNextLevel(int currentLevel) {
        if (currentLevel >= MAX_LEVEL) {
            return 0; // No more XP needed at max level.
        }

        final float A = xpSettings.xpProgression.baseXp;
        final float B = xpSettings.xpProgression.linearXpCoefficient;
        final float C = xpSettings.xpProgression.polynomialXpCoefficient;
        final float EXP = xpSettings.xpProgression.polynomialXpExponent;

        // Formula: XP_Needed = A + (B * Level) + (C * Level^EXP)
        double xpNeededDouble = A + (B * currentLevel) + (C * Math.pow(currentLevel, EXP));

        int xpNeeded = (int) Math.round(xpNeededDouble);

        // Ensure a minimum XP per level, especially at lower levels where the formula might yield low values.
        if (xpNeeded < xpSettings.xpProgression.minXpPerLevel) {
            xpNeeded = xpSettings.xpProgression.minXpPerLevel;
        }
        return xpNeeded;
    }

    /**
     * Checks if a specific class has an affinity with a given stat for a particular race.
     * Class affinities provide bonus scaling for certain stats.
     * @param raceName The name of the race.
     * @param className The name of the class.
     * @param statName The name of the stat (e.g., "HEALTH", "MANA").
     * @return True if the class is affine to the stat for that race, false otherwise.
     */
    public boolean isClassAffinToStat(String raceName, String className, String statName) {
        Map<String, List<String>> affinitiesForClass = classAffinities.get(className.toUpperCase());
        if (affinitiesForClass == null) return false;
        List<String> affineRaces = affinitiesForClass.get(statName.toUpperCase());
        return affineRaces != null && affineRaces.contains(raceName.toUpperCase());
    }

    /**
     * Checks if a specific class provides a bonus to a fundamental attribute.
     * @param className The name of the class.
     * @param attributeName The name of the attribute (e.g., "CONSTITUTION", "STRENGTH").
     * @return True if the class boosts the attribute, false otherwise.
     */
    public boolean doesClassBoostAttribute(String className, String attributeName) {
        List<String> boostedAttributes = classAttributeBonuses.get(className.toUpperCase());
        return boostedAttributes != null && boostedAttributes.contains(attributeName.toUpperCase());
    }

    /**
     * Retrieves the number of fundamental attribute points granted for reaching a specific level.
     * @param level The player's level.
     * @return The number of attribute points awarded for that level.
     */
    public int getAttributePointsForLevelRange(int level) {
        for (Map.Entry<String, Integer> entry : levelProgression.entrySet()) {
            String[] range = entry.getKey().split("-");
            try {
                int min = Integer.parseInt(range[0]);
                int max = Integer.parseInt(range[1]);
                if (level >= min && level <= max) {
                    return entry.getValue();
                }
            } catch (NumberFormatException e) {
                BrokenPath.LOGGER.error("Error parsing level range in configuration: {}. Error: {}", entry.getKey(), e.getMessage());
            }
        }
        return 0;
    }

    // --- Nested Classes for JSON Mapping ---

    /**
     * Configuration for manual attribute allocation limits.
     */
    public static class AttributeSettings {
        public Map<String, Integer> manualAllocationLimit = new HashMap<>();
        public AttributeSettings() {}
    }

    /**
     * Contains base stat configurations for each race.
     */
    public static class RaceSettings {
        public HealthStatConfig health;
        public ManaStatConfig mana;
        public VigorStatConfig vigor;
        public ProtectionStatConfig protection;
        public ProtectionInnateConfig protectionInnate;
        public FavorConfig favor;

        public RaceSettings() {
            health = new HealthStatConfig();
            mana = new ManaStatConfig();
            vigor = new VigorStatConfig();
            protection = new ProtectionStatConfig();
            protectionInnate = new ProtectionInnateConfig();
            favor = new FavorConfig();
        }
    }

    /**
     * Base class for stat configurations, containing common fields like base initial value and affinity limits.
     */
    public static abstract class StatConfigBase {
        public float baseInitialValue;
        public Map<String, AffinityLimit> affinityLimits = new HashMap<>();
        public StatConfigBase() {}
    }

    /**
     * Specific configuration for Health stat, including its Constitution multiplier.
     */
    public static class HealthStatConfig extends StatConfigBase {
        public float conMultiplierPerPoint;
        public HealthStatConfig() {}
    }

    /**
     * Specific configuration for Mana stat, including its Intelligence multiplier.
     */
    public static class ManaStatConfig extends StatConfigBase {
        public float intMultiplierPerPoint;
        public ManaStatConfig() {}
    }

    /**
     * Specific configuration for Vigor stat, including its Dexterity multiplier.
     */
    public static class VigorStatConfig extends StatConfigBase {
        public float dexMultiplierPerPoint;
        public VigorStatConfig() {}
    }

    /**
     * Detailed configuration for the Protection stat, specific to Strength efficacy.
     */
    public static class ProtectionStatConfig {
        public float strEfficacyMultiplierPerPoint;
        public Map<String, AffinityLimit> affinityLimits = new HashMap<>();
        public ProtectionStatConfig() {}
    }

    /**
     * Detailed configuration for the Favor system, including base value and limits.
     */
    public static class FavorConfig {
        public float baseFavor;
        public float maxLimit;
        public float minLimit;

        public FavorConfig() {
            this.baseFavor = 70f;
            this.maxLimit = 200.0f;
            this.minLimit = 0.0f;
        }

        public FavorConfig(float baseFavor, float maxLimit, float minLimit) {
            this.baseFavor = baseFavor;
            this.maxLimit = maxLimit;
            this.minLimit = minLimit;
        }
    }

    /**
     * Defines multiplier and limit for stat scaling based on affinities (Base, Class Bonus, Racial Affinity).
     */
    public static class AffinityLimit {
        public float multiplier;
        public float limit;
        public AffinityLimit(float multiplier, float limit) {
            this.multiplier = multiplier;
            this.limit = limit;
        }
        public AffinityLimit() {}
    }

    /**
     * Configuration settings for XP progression, including formula coefficients.
     */
    public static class XpProgressionSettings {
        public float baseXp;
        public float linearXpCoefficient;
        public float polynomialXpCoefficient;
        public float polynomialXpExponent;
        public int minXpPerLevel;
        public XpProgressionSettings() {}
    }

    /**
     * Configuration for Innate Protection, defining its base value and per-level increase.
     */
    public static class ProtectionInnateConfig {
        public float baseValue;
        public float perLevelIncrease;

        public ProtectionInnateConfig(float baseValue, float perLevelIncrease) {
            this.baseValue = baseValue;
            this.perLevelIncrease = perLevelIncrease;
        }
        public ProtectionInnateConfig() {}
    }

    /**
     * Groups all regeneration-related configurations.
     */
    public static class RegenSettings {
        // Health Regeneration
        public int healthRegenCooldownTicksBase = 60;
        public float healthAmountToHealPerPulse = 1.0f;
        public float healthExhaustionCostPerHealPulse = 2.5f;
        public int healthMinFoodLevelForRegen = 18;
        public int healthDelayAfterCombatTicks = 100;
        public int healthMinEffectiveCooldownTicks = 20;
        public float healthRegenBonusPerConTicks = 0.0f;

        public float regenEffectHealingBonusMultiplier = 1.2f;

        // Innate Protection Regeneration
        public float innateProtectionAmountPerPulse = 1.0f;
        public int innateProtectionRegenCooldownTicks = 80;
        public int innateProtectionDelayAfterCombatTicks = 120;

        // Mana Regeneration
        public float manaRegenOutOfCombatBase = 0.05f;
        public float manaRegenInCombatBase = 0.015f;
        public float manaRegenBonusPerInt = 0.0f;
        public int manaDelayAfterCombatTicks = 40;

        // Vigor Regeneration
        public float vigorRegenOutOfCombatBase = 0.05f;
        public float vigorRegenInCombatBase = 0.015f;
        public float vigorRegenBonusPerDex = 0.0f;
        public int vigorDelayAfterCombatTicks = 40;

        // Specific regeneration settings for Mob Effects or Abilities
        public int protectionRegenSlowCooldownTicks = 60;
        public float protectionAmountPerSlowPulse = 1.0f;
        public float protectionRestoreAmountPerAbility = 5.0f;

        public int manaRegenCooldownTicksEffect = 40;
        public float manaAmountPerEffectPulse = 0.5f;

        public int vigorRegenCooldownTicksEffect = 30;
        public float vigorAmountPerEffectPulse = 0.75f;

        // Hunger Penalties
        public float hungryModerateVigorRegenPenalty = -0.15f;
        public float hungryIntenseVigorRegenPenalty = -0.40f;
        public float starvingVigorRegenPenalty = -0.40f;
        public int starvingDamageIntervalTicks = 80;
        public float starvingDamageAmount = 1.0f;

        // Passive Hunger Exhaustion
        public float hungryModeratePassiveExhaustionPerTick = 0.005f;
        public float hungryIntensePassiveExhaustionPerTick = 0.01f;
        public float starvingPassiveExhaustionPerTick = 0.02f;

        public RegenSettings() {}
    }

    /**
     * Groups all combat-related configurations.
     */
    public static class CombatSettings {
        public float damagePenetrationPercentage = 0.25f;
        public CombatSettings() {}
    }

    /**
     * Groups all XP-related configurations, including progression and rewards.
     */
    public static class XpSettings {
        public XpProgressionSettings xpProgression = new XpProgressionSettings();
        public Map<String, Integer> smeltingXpRewards = new HashMap<>();
        public float xpLossPercentageOnDeath = 0.10f;
        public float xpMaxDebtPercentage = 0.15f;
        public int defaultSmeltingXp = 0;

        public XpSettings() {}
    }

    /**
     * Configuration for a single achievement, including its XP reward and completion threshold.
     */
    public static class AchievementConfig {
        public int xpReward;
        public int threshold;

        public AchievementConfig(int xpReward, int threshold) {
            this.xpReward = xpReward;
            this.threshold = threshold;
        }

        public AchievementConfig() {}
    }

    // --- Utility Getters for Configuration Access ---

    /**
     * Gets the manual allocation limit for a given attribute.
     * @param attributeName The name of the attribute.
     * @return The maximum points a player can manually assign to that attribute.
     */
    public int getManualAttributeLimit(String attributeName) {
        return attributeSettings.manualAllocationLimit.getOrDefault(attributeName.toUpperCase(), 1);
    }

    /**
     * Gets the generic stat configuration (Health, Mana, or Vigor) for a specific race.
     * Requires a cast to the specific stat config type after retrieval.
     * @param raceName The name of the race.
     * @param statName The name of the stat.
     * @return The {@link StatConfigBase} for the specified stat and race.
     */
    public StatConfigBase getRaceStatConfig(String raceName, String statName) {
        RaceSettings raceSetting = raceSettings.get(raceName.toUpperCase());
        if (raceSetting == null) {
            BrokenPath.LOGGER.warn("Race configuration not found for: {}. Returning default stat config for {}.", raceName, statName);
            switch (statName.toUpperCase()) {
                case "HEALTH": return new HealthStatConfig();
                case "MANA": return new ManaStatConfig();
                case "VIGOR": return new VigorStatConfig();
                default: return new HealthStatConfig();
            }
        }

        switch (statName.toUpperCase()) {
            case "HEALTH": return Optional.ofNullable(raceSetting.health).orElseGet(HealthStatConfig::new);
            case "MANA": return Optional.ofNullable(raceSetting.mana).orElseGet(ManaStatConfig::new);
            case "VIGOR": return Optional.ofNullable(raceSetting.vigor).orElseGet(VigorStatConfig::new);
            default:
                BrokenPath.LOGGER.warn("Unknown stat name '{}' requested for race '{}'. Returning default HealthStatConfig.", statName, raceName);
                return new HealthStatConfig();
        }
    }

    /**
     * Gets the protection stat configuration for a specific race.
     * @param raceName The name of the race.
     * @return The {@link ProtectionStatConfig} for the specified race.
     */
    public ProtectionStatConfig getRaceProtectionConfig(String raceName) {
        RaceSettings raceSetting = raceSettings.get(raceName.toUpperCase());
        if (raceSetting == null) {
            BrokenPath.LOGGER.warn("Race configuration not found for: {}. Returning default ProtectionStatConfig.", raceName);
            return new ProtectionStatConfig();
        }
        return Optional.ofNullable(raceSetting.protection).orElseGet(ProtectionStatConfig::new);
    }

    /**
     * Gets the Favor configuration for a specific race.
     * @param raceName The name of the race.
     * @return The {@link FavorConfig} for the specified race.
     */
    public FavorConfig getRaceFavorConfig(String raceName) {
        RaceSettings raceSetting = raceSettings.get(raceName.toUpperCase());
        if (raceSetting == null) {
            BrokenPath.LOGGER.warn("Race configuration not found for: {}. Returning default FavorConfig.", raceName);
            return new FavorConfig();
        }
        return Optional.ofNullable(raceSetting.favor).orElseGet(FavorConfig::new);
    }

    // --- Regeneration Setting Getters ---
    public float getManaRegenOutOfCombatBase() { return regenSettings.manaRegenOutOfCombatBase; }
    public float getManaRegenInCombatBase() { return regenSettings.manaRegenInCombatBase; }
    public float getManaRegenBonusPerInt() { return regenSettings.manaRegenBonusPerInt; }
    public int getManaDelayAfterCombatTicks() { return regenSettings.manaDelayAfterCombatTicks; }

    public float getVigorRegenOutOfCombatBase() { return regenSettings.vigorRegenOutOfCombatBase; }
    public float getVigorRegenInCombatBase() { return regenSettings.vigorRegenInCombatBase; }
    public float getVigorRegenBonusPerDex() { return regenSettings.vigorRegenBonusPerDex; }
    public int getVigorDelayAfterCombatTicks() { return regenSettings.vigorDelayAfterCombatTicks; }

    public int getHealthRegenCooldownTicksBase() { return regenSettings.healthRegenCooldownTicksBase; }
    public float getHealthAmountToHealPerPulse() { return regenSettings.healthAmountToHealPerPulse; }
    public float getHealthExhaustionCostPerHealPulse() { return regenSettings.healthExhaustionCostPerHealPulse; }
    public int getHealthMinFoodLevelForRegen() { return regenSettings.healthMinFoodLevelForRegen; }
    public int getHealthDelayAfterCombatTicks() { return regenSettings.healthDelayAfterCombatTicks; }
    public int getHealthMinEffectiveCooldownTicks() { return regenSettings.healthMinEffectiveCooldownTicks; }
    public float getHealthRegenBonusPerConTicks() { return regenSettings.healthRegenBonusPerConTicks; }

    public float getRegenEffectHealingBonusMultiplier() { return regenSettings.regenEffectHealingBonusMultiplier; }

    // Innate Protection Regeneration Getters
    public float getInnateProtectionAmountPerPulse() { return regenSettings.innateProtectionAmountPerPulse; }
    public int getInnateProtectionRegenCooldownTicks() { return regenSettings.innateProtectionRegenCooldownTicks; }
    public int getInnateProtectionDelayAfterCombatTicks() { return regenSettings.innateProtectionDelayAfterCombatTicks; }

    public int getProtectionRegenSlowCooldownTicks() { return regenSettings.protectionRegenSlowCooldownTicks; }
    public float getProtectionAmountPerSlowPulse() { return regenSettings.protectionAmountPerSlowPulse; }
    public float getProtectionRestoreAmountPerAbility() { return regenSettings.protectionRestoreAmountPerAbility; }

    public int getManaRegenCooldownTicksEffect() { return regenSettings.manaRegenCooldownTicksEffect; }
    public float getManaAmountPerEffectPulse() { return regenSettings.manaAmountPerEffectPulse; }

    public int getVigorRegenCooldownTicksEffect() { return regenSettings.vigorRegenCooldownTicksEffect; }
    public float getVigorAmountPerEffectPulse() { return regenSettings.vigorAmountPerEffectPulse; }

    // Hunger Penalty Getters
    public float getHungryModerateVigorRegenPenalty() { return regenSettings.hungryModerateVigorRegenPenalty; }
    public float getHungryIntenseVigorRegenPenalty() { return regenSettings.hungryIntenseVigorRegenPenalty; }
    public float getStarvingVigorRegenPenalty() {return regenSettings.starvingVigorRegenPenalty;}
    public int getStarvingDamageIntervalTicks() { return regenSettings.starvingDamageIntervalTicks; }
    public float getStarvingDamageAmount() { return regenSettings.starvingDamageAmount; }

    // Passive Hunger Exhaustion Getters
    public float getHungryModeratePassiveExhaustionPerTick() { return regenSettings.hungryModeratePassiveExhaustionPerTick; }
    public float getHungryIntensePassiveExhaustionPerTick() { return regenSettings.hungryIntensePassiveExhaustionPerTick; }
    public float getStarvingPassiveExhaustionPerTick() { return regenSettings.starvingPassiveExhaustionPerTick; }

    /**
     * Gets the achievement configuration for a specific achievement key.
     * @param achievementKey The key of the achievement.
     * @return The {@link AchievementConfig} for the specified achievement.
     */
    public AchievementConfig getAchievementConfig(String achievementKey) { return achievements.get(achievementKey.toUpperCase());}

    /**
     * Gets the maximum Favor bonus multiplier.
     */
    public float getFavorBonusMultiplier() { return maxFavorBonusMultiplier; }

    /**
     * Gets the damage penetration percentage for combat.
     */
    public float getDamagePenetrationPercentage() { return combatSettings.damagePenetrationPercentage; }

    /**
     * Gets the innate protection configuration (base and per-level scaling) for the specified race.
     * @param raceName The name of the race.
     * @return The {@link ProtectionInnateConfig} for the specified race.
     */
    public ModConfigs.ProtectionInnateConfig getRaceProtectionInnateConfig(String raceName) {
        RaceSettings raceSetting = raceSettings.get(raceName.toUpperCase());
        if (raceSetting == null) {
            BrokenPath.LOGGER.warn("Race configuration not found for: {}. Returning default ProtectionInnateConfig.", raceName);
            return new ProtectionInnateConfig();
        }
        return Optional.ofNullable(raceSetting.protectionInnate).orElseGet(ProtectionInnateConfig::new);
    }
}