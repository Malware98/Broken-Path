package com.malware98.brokenpath.data;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;
import com.malware98.brokenpath.BrokenPath;
import net.minecraftforge.fml.loading.FMLPaths;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/*
 * Clase principal de configuración del mod "BrokenPath".
 * Gestiona todas las variables configurables relacionadas con las estadísticas del jugador,
 * razas, clases, progresión de XP, regeneración y penalizaciones.
 * Permite la carga y guardado de estas configuraciones en un archivo JSON.
 */
public class ModConfigs {

    // --- Constantes de Configuración ---
    // Instancia Singleton de ModConfigs.
    private static ModConfigs INSTANCE;
    // Objeto Gson para la serialización/deserialización JSON con formato legible.
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
    // Nombre del archivo de configuración.
    private static final String CONFIG_FILE_NAME = "brokenpath_configs.json";
    // Ruta completa al archivo de configuración en el directorio de configuración de Forge.
    private static final Path CONFIG_PATH = FMLPaths.CONFIGDIR.get().resolve(CONFIG_FILE_NAME);

    // Nivel máximo que el jugador puede alcanzar.
    public static final int MAX_LEVEL = 50;

    // Multiplicador máximo de bonificación de Favor.
    public float maxFavorBonusMultiplier = 2.0f;

    // --- Variables de Configuración de Regeneración de Estadísticas ---

    // Regeneración de Salud
    public int healthRegenCooldownTicksBase = 60; // Tiempo base (en ticks) entre pulsos de curación.
    public float healthAmountToHealPerPulse = 1.0f; // Cantidad de salud curada por pulso de regeneración.
    public float healthExhaustionCostPerHealPulse = 2.5f; // Costo de agotamiento de comida por pulso de curación.
    public int healthMinFoodLevelForRegen = 18; // Nivel mínimo de hambre para la regeneración de salud.
    public int healthDelayAfterCombatTicks = 100; // Retraso (en ticks) para iniciar la regeneración después de salir de combate.
    public int healthMinEffectiveCooldownTicks = 20; // Cooldown mínimo posible para la regeneración de salud.
    public float healthRegenBonusPerConTicks = 0.0f; // Reducción de ticks del cooldown base por cada punto de CON.

    // Multiplicador para el efecto de poción de Regeneración (mejora la curación).
    public float regenEffectHealingBonusMultiplier = 1.2f; // 1.2f significa +20% de curación.

    // Configuración para la Regeneración de Protección Innata
    public float innateProtectionAmountPerPulse = 1.0f; // Cantidad de Protección Innata restaurada por pulso.
    public int innateProtectionRegenCooldownTicks = 80; // Tiempo (en ticks) entre pulsos de regeneración de Protección Innata.
    public int innateProtectionDelayAfterCombatTicks = 120; // Retraso (en ticks) para iniciar la regeneración de Protección Innata después de salir de combate.

    // Regeneración de Maná
    public float manaRegenOutOfCombatBase = 0.05f; // Tasa de regeneración de Maná fuera de combate.
    public float manaRegenInCombatBase = 0.015f; // Tasa de regeneración de Maná en combate.
    public float manaRegenBonusPerInt = 0.0f; // Bono de regeneración de Maná por puntos de INT.
    public int manaDelayAfterCombatTicks = 40; // Retraso (en ticks) antes de que el Maná se regenere más rápido fuera de combate.

    // Regeneración de Vigor
    public float vigorRegenOutOfCombatBase = 0.05f; // Tasa de regeneración de Vigor fuera de combate.
    public float vigorRegenInCombatBase = 0.015f; // Tasa de regeneración de Vigor en combate.
    public float vigorRegenBonusPerDex = 0.0f; // Bono de regeneración de Vigor por puntos de DEX.
    public int vigorDelayAfterCombatTicks = 40; // Retraso (en ticks) antes de que el Vigor se regenere más rápido fuera de combate.

    // Configuración específica de regeneración para Protección, Maná y Vigor
    public int protectionRegenSlowCooldownTicks = 60; // Tiempo (en ticks) entre pulsos de regeneración lenta de Protección.
    public float protectionAmountPerSlowPulse = 1.0f; // Cantidad de Protección restaurada por pulso lento.
    public float protectionRestoreAmountPerAbility = 5.0f; // Cantidad de Protección restaurada por una habilidad/ítem plano.

    public int manaRegenCooldownTicksEffect = 40; // Cooldown predeterminado para el efecto de regeneración de Maná.
    public float manaAmountPerEffectPulse = 0.5f; // Cantidad de Maná restaurada por pulso de efecto.

    public int vigorRegenCooldownTicksEffect = 30; // Cooldown predeterminado para el efecto de regeneración de Vigor.
    public float vigorAmountPerEffectPulse = 0.75f; // Cantidad de Vigor restaurada por pulso de efecto.

    // Penalizaciones por Hambre
    public float hungryModerateVigorRegenPenalty = -0.15f; // Penalización de regeneración de Vigor con hambre moderada (3-7 muslos).
    public float hungryIntenseVigorRegenPenalty = -0.40f; // Penalización de regeneración de Vigor con hambre intensa (1-2 muslos).
    public float starvingVigorRegenPenalty = -0.40f; // Penalización de regeneración de Vigor famélico (0 muslos).
    public int starvingDamageIntervalTicks = 80; // Intervalo de daño (en ticks) para jugadores famélicos.
    public float starvingDamageAmount = 1.0f; // Cantidad de daño por pulso para jugadores famélicos.

    // Consumo de Hambre Adicional Pasivo por etapa.
    public float hungryModeratePassiveExhaustionPerTick = 0.005f; // Agotamiento extra por tick en Hambre Moderada.
    public float hungryIntensePassiveExhaustionPerTick = 0.01f;   // Agotamiento extra por tick en Hambre Intensa.
    public float starvingPassiveExhaustionPerTick = 0.02f;      // Agotamiento extra por tick en Famélico.

    // --- Campos de Datos de Configuración (corresponden a la estructura JSON) ---
    public AttributeSettings attributeSettings;
    public Map<String, RaceSettings> raceSettings;
    public Map<String, Map<String, List<String>>> classAffinities;
    public Map<String, List<String>> classAttributeBonuses;
    public Map<String, Integer> levelProgression;
    public Map<String, Float> favorActionModifiers;

    // Configuración para la progresión de XP.
    public XpProgressionSettings xpProgressionSettings;

    // Configuración para la entrega de XP por fundición (smelting).
    public Map<String, Integer> smeltingXpRewards;

    // Porcentaje de penalización de XP por muerte.
    public float xpLossPercentageOnDeath = 0.10f;
    public float xpMaxDebtPercentage = 0.15f;

    // Campo para la XP de fundición por defecto
    public int defaultSmeltingXp = 0;

    //Campo para hitos
    public Map<String, AchievementConfig> achievements;

    // --- Constructor y Singleton ---
    // Constructor privado para imponer el patrón Singleton.
    private ModConfigs() {
        // Inicializa todos los valores con sus valores por defecto en el constructor.
        // Esto asegura que siempre haya valores válidos, incluso si la carga JSON falla o el archivo no existe.
        initializeDefaults();
    }

    // Proporciona la instancia única de ModConfigs.
    public static ModConfigs getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new ModConfigs();
        }
        return INSTANCE;
    }

    // --- Lógica de Inicialización por Defecto ---
    // Inicializa todos los valores de configuración con sus valores predeterminados.
    private void initializeDefaults() {
        // Asegura que los mapas siempre estén inicializados como HashMaps vacíos o con valores por defecto.
        // Esto previene NullPointerExceptions si el JSON está vacío o mal formado en ciertas secciones.
        attributeSettings = new AttributeSettings();
        raceSettings = new HashMap<>();
        classAffinities = new HashMap<>();
        classAttributeBonuses = new HashMap<>();
        levelProgression = new HashMap<>();
        favorActionModifiers = new HashMap<>();
        xpProgressionSettings = new XpProgressionSettings();
        smeltingXpRewards = new HashMap<>();
        achievements = new HashMap<>();


        // Puntos Máximos de Atributos Fundamentales que el jugador puede asignar manualmente.
        attributeSettings.manualAllocationLimit.put("CONSTITUTION", 70);
        attributeSettings.manualAllocationLimit.put("STRENGTH", 70);
        attributeSettings.manualAllocationLimit.put("DEXTERITY", 70);
        attributeSettings.manualAllocationLimit.put("INTELLIGENCE", 70);

        // Variables para el cálculo de escalado basadas en los límites máximos de atributos.
        final float CON_MAX_POINTS = attributeSettings.manualAllocationLimit.get("CONSTITUTION");
        final float INT_MAX_POINTS = attributeSettings.manualAllocationLimit.get("INTELLIGENCE");
        final float DEX_MAX_POINTS = attributeSettings.manualAllocationLimit.get("DEXTERITY");
        final float STR_MAX_POINTS = attributeSettings.manualAllocationLimit.get("STRENGTH");

        // Inicialización de los Valores por Defecto para la Progresión de XP.
        xpProgressionSettings.baseXp = 100.0f;
        xpProgressionSettings.linearXpCoefficient = 50.0f;
        xpProgressionSettings.polynomialXpCoefficient = 1.2f;
        xpProgressionSettings.polynomialXpExponent = 2.5f;
        xpProgressionSettings.minXpPerLevel = 100;

        // --- Configuración inicial para cada raza en sus estadísticas base ---
        // Configuración para la raza HUMANO.
        RaceSettings humanSettings = new RaceSettings();
        // Solo multiplicadores relevantes para cada StatConfig
        humanSettings.health = createHealthStatConfig(20.0f, (120.0f - 20.0f) / CON_MAX_POINTS, 1.0f, 100.0f, 1.2f, 140.0f, 1.4f, 160.0f);
        humanSettings.protection = createProtectionStatConfig((100.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 100.0f, 1.2f, 120.0f, 1.4f, 140.0f);
        humanSettings.protectionInnate = createProtectionInnateConfig(0.0f, 0.0f);
        humanSettings.mana = createManaStatConfig(20.0f, (100.0f - 20.0f) / INT_MAX_POINTS, 1.0f, 100.0f, 1.0f, 100.0f, 1.25f, 120.0f);
        humanSettings.vigor = createVigorStatConfig(20.0f, (100.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 100.0f, 1.0f, 100.0f, 1.25f, 120.0f);
        humanSettings.luck = new FavorConfig(-40.0f, 30.0f, -90.0f); // baseFavor, maxLimit, minLimit
        raceSettings.put("HUMAN", humanSettings);

        // Configuración para la raza ELF.
        RaceSettings elfSettings = new RaceSettings();
        elfSettings.health = createHealthStatConfig(14.0f, (84.0f - 14.0f) / CON_MAX_POINTS, 1.0f, 84.0f, 1.1428571f, 94.0f, 1.3714286f, 110.0f);
        elfSettings.protection = createProtectionStatConfig((80.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 80.0f, 1.25f, 100.0f, 1.5f, 120.0f);
        elfSettings.protectionInnate = createProtectionInnateConfig(0.0f, 0.0f);
        elfSettings.mana = createManaStatConfig(40.0f, (120.0f - 40.0f) / INT_MAX_POINTS, 1.0f, 120.0f, 1.5f, 160.0f, 2.0f, 200.0f);
        elfSettings.vigor = createVigorStatConfig(20.0f, (100.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 100.0f, 1.0f, 100.0f, 1.25f, 120.0f);
        elfSettings.luck = new FavorConfig(-70.0f, 0.0f, -90.0f);
        raceSettings.put("ELF", elfSettings);

        // Configuración para la raza ORC.
        RaceSettings orcSettings = new RaceSettings();
        orcSettings.health = createHealthStatConfig(30.0f, (140.0f - 30.0f) / CON_MAX_POINTS, 1.0f, 140.0f, 1.1818182f, 160.0f, 1.5454545f, 200.0f);
        orcSettings.protection = createProtectionStatConfig((10.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 10.0f, 4.0f, 40.0f, 8.0f, 80.0f);
        orcSettings.protectionInnate = createProtectionInnateConfig(0.0f, 0.0f);
        orcSettings.mana = createManaStatConfig(0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f); // Base 0, mult 0
        orcSettings.vigor = createVigorStatConfig(40.0f, (120.0f - 40.0f) / DEX_MAX_POINTS, 1.0f, 120.0f, 1.2f, 140.0f, 1.5f, 160.0f);
        orcSettings.luck = new FavorConfig(-80.0f, 10.0f, -90.0f);
        raceSettings.put("ORC", orcSettings);

        // Configuración para la raza DRACONID.
        RaceSettings draconidSettings = new RaceSettings();
        draconidSettings.health = createHealthStatConfig(16.0f, (100.0f - 16.0f) / CON_MAX_POINTS, 1.0f, 100.0f, 1.2380952f, 120.0f, 1.4761904f, 140.0f);
        draconidSettings.protection = createProtectionStatConfig((80.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 80.0f, 1.2857143f, 100.0f, 1.5714285f, 120.0f);
        draconidSettings.protectionInnate = createProtectionInnateConfig(10.0f, 0.2f); // 10.0f base, 0.2f por nivel
        draconidSettings.mana = createManaStatConfig(30.0f, (90.0f - 30.0f) / INT_MAX_POINTS, 1.0f, 90.0f, 1.3333334f, 110.0f, 1.6666666f, 130.0f);
        draconidSettings.vigor = createVigorStatConfig(20.0f, (100.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 100.0f, 1.5f, 140.0f, 1.75f, 160.0f);
        draconidSettings.luck = new FavorConfig(-50.0f, 10.0f, -90.0f);
        raceSettings.put("DRACONID", draconidSettings);

        // Configuración para la raza CHIMERA_AGILE.
        RaceSettings chimeraAgileSettings = new RaceSettings();
        chimeraAgileSettings.health = createHealthStatConfig(16.0f, (80.0f - 16.0f) / CON_MAX_POINTS, 1.0f, 80.0f, 1.3125f, 100.0f, 1.625f, 120.0f);
        chimeraAgileSettings.protection = createProtectionStatConfig((80.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 80.0f, 1.2857143f, 100.0f, 1.5714285f, 120.0f);
        chimeraAgileSettings.protectionInnate = createProtectionInnateConfig(10.0f, 0.2f);
        chimeraAgileSettings.mana = createManaStatConfig(20.0f, (90.0f - 20.0f) / INT_MAX_POINTS, 1.0f, 90.0f, 1.2857143f, 110.0f, 1.5714285f, 130.0f);
        chimeraAgileSettings.vigor = createVigorStatConfig(20.0f, (120.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 120.0f, 1.4f, 160.0f, 1.8f, 200.0f);
        chimeraAgileSettings.luck = new FavorConfig(-50.0f, 10.0f, -90.0f);
        raceSettings.put("CHIMERA_AGILE", chimeraAgileSettings);

        // Configuración para la raza CHIMERA_DEFENSIVE.
        RaceSettings chimeraDefensiveSettings = new RaceSettings();
        chimeraDefensiveSettings.health = createHealthStatConfig(20.0f, (100.0f - 20.0f) / CON_MAX_POINTS, 1.0f, 100.0f, 1.25f, 120.0f, 1.5f, 140.0f);
        chimeraDefensiveSettings.protection = createProtectionStatConfig((100.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 100.0f, 1.2222222f, 120.0f, 1.4444444f, 140.0f);
        chimeraDefensiveSettings.protectionInnate = createProtectionInnateConfig(10.0f, 0.2f);
        chimeraDefensiveSettings.mana = createManaStatConfig(20.0f, (60.0f - 20.0f) / INT_MAX_POINTS, 1.0f, 60.0f, 1.5f, 80.0f, 2.0f, 100.0f);
        chimeraDefensiveSettings.vigor = createVigorStatConfig(20.0f, (80.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 80.0f, 1.6666666f, 120.0f, 2.0f, 140.0f);
        chimeraDefensiveSettings.luck = new FavorConfig(-80.0f, 40.0f, -90.0f);
        raceSettings.put("CHIMERA_DEFENSIVE", chimeraDefensiveSettings);

        // Configuración para la raza TRITON.
        RaceSettings tritonSettings = new RaceSettings();
        tritonSettings.health = createHealthStatConfig(18.0f, (90.0f - 18.0f) / CON_MAX_POINTS, 1.0f, 90.0f, 1.1388888f, 100.0f, 1.6944444f, 120.0f);
        tritonSettings.protection = createProtectionStatConfig((80.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 80.0f, 1.2857143f, 100.0f, 1.5714285f, 120.0f);
        tritonSettings.protectionInnate = createProtectionInnateConfig(10.0f, 0.2f);
        tritonSettings.mana = createManaStatConfig(20.0f, (100.0f - 20.0f) / INT_MAX_POINTS, 1.0f, 100.0f, 1.25f, 120.0f, 1.75f, 160.0f);
        tritonSettings.vigor = createVigorStatConfig(20.0f, (80.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 80.0f, 1.6666666f, 120.0f, 2.0f, 140.0f);
        tritonSettings.luck = new FavorConfig(-50.0f, 40.0f, -90.0f);
        raceSettings.put("TRITON", tritonSettings);

        // Configuración para la raza AASIMAR.
        RaceSettings aasimarSettings = new RaceSettings();
        aasimarSettings.health = createHealthStatConfig(16.0f, (90.0f - 16.0f) / CON_MAX_POINTS, 1.0f, 90.0f, 1.1351351f, 100.0f, 1.945946f, 160.0f);
        aasimarSettings.protection = createProtectionStatConfig((80.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 80.0f, 1.2857143f, 100.0f, 1.5714285f, 120.0f);
        aasimarSettings.protectionInnate = createProtectionInnateConfig(10.0f, 0.2f);
        aasimarSettings.mana = createManaStatConfig(20.0f, (100.0f - 20.0f) / INT_MAX_POINTS, 1.0f, 100.0f, 1.5f, 140.0f, 1.75f, 160.0f);
        aasimarSettings.vigor = createVigorStatConfig(20.0f, (80.0f - 20.0f) / DEX_MAX_POINTS, 1.0f, 80.0f, 1.6666666f, 120.0f, 2.3333333f, 160.0f);
        aasimarSettings.luck = new FavorConfig(-30.0f, 90.0f, -90.0f);
        raceSettings.put("AASIMAR", aasimarSettings);

        // Configuración para la raza ANDROID.
        RaceSettings androidSettings = new RaceSettings();
        androidSettings.health = createHealthStatConfig(10.0f, (60.0f - 10.0f) / CON_MAX_POINTS, 1.0f, 60.0f, 1.0f, 60.0f, 1.4f, 80.0f);
        androidSettings.protection = createProtectionStatConfig((140.0f - 0.0f) / STR_MAX_POINTS, 1.0f, 140.0f, 1.1666666f, 160.0f, 1.5f, 200.0f);
        androidSettings.protectionInnate = createProtectionInnateConfig(20.0f, 0.2f); // 20.0f base, 0.2f por nivel
        androidSettings.mana = createManaStatConfig(0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f); // Base 0, mult 0
        androidSettings.vigor = createVigorStatConfig(40.0f, (100.0f - 40.0f) / DEX_MAX_POINTS, 1.0f, 100.0f, 1.3333334f, 120.0f, 2.0f, 160.0f);
        androidSettings.luck = new FavorConfig(-50.0f, 60.0f, -90.0f);
        raceSettings.put("ANDROID", androidSettings);

        // --- Afinidades de Clase ---
        classAffinities.put("CHAMPION", Map.of("HEALTH", List.of("HUMAN"), "PROTECTION", List.of("HUMAN")));
        classAffinities.put("SORCERER", Map.of("MANA", List.of("ELF"), "PROTECTION", List.of("ELF")));
        classAffinities.put("BERSERKER", Map.of("HEALTH", List.of("ORC"), "VIGOR", List.of("ORC")));
        classAffinities.put("SHAMAN", Map.of("MANA", List.of("DRACONID"), "VIGOR", List.of("DRACONID")));
        classAffinities.put("EXPLORER", Map.of("VIGOR", List.of("CHIMERA_AGILE"), "PROTECTION", List.of("CHIMERA_AGILE")));
        classAffinities.put("CHANNELER", Map.of("MANA", List.of("TRITON"), "HEALTH", List.of("TRITON")));
        classAffinities.put("VESTAL", Map.of("PROTECTION", List.of("AASIMAR"), "MANA", List.of("AASIMAR")));
        classAffinities.put("TECHNOMANCER", Map.of("PROTECTION", List.of("ANDROID"), "VIGOR", List.of("ANDROID")));
        classAffinities.put("NO_CLASS", Map.of(
                "HEALTH", Collections.emptyList(),
                "MANA", Collections.emptyList(),
                "VIGOR", Collections.emptyList(),
                "PROTECTION", Collections.emptyList()
        ));

        // --- Bonificaciones de Atributo Fundamental por Clase ---
        classAttributeBonuses.put("CHAMPION", List.of("CONSTITUTION", "STRENGTH"));
        classAttributeBonuses.put("SORCERER", List.of("INTELLIGENCE", "STRENGTH"));
        classAttributeBonuses.put("BERSERKER", List.of("CONSTITUTION", "DEXTERITY"));
        classAttributeBonuses.put("SHAMAN", List.of("INTELLIGENCE", "DEXTERITY"));
        classAttributeBonuses.put("EXPLORER", List.of("DEXTERITY", "STRENGTH"));
        classAttributeBonuses.put("CHANNELER", List.of("INTELLIGENCE", "CONSTITUTION"));
        classAttributeBonuses.put("VESTAL", List.of("STRENGTH", "INTELLIGENCE"));
        classAttributeBonuses.put("TECHNOMANCER", List.of("STRENGTH", "DEXTERITY"));
        classAttributeBonuses.put("NO_CLASS", Collections.emptyList());

        // --- Asignación de Puntos de Atributo en la Progresión de Nivel ---
        levelProgression.put("1-1", 0);
        levelProgression.put("2-10", 1);
        levelProgression.put("11-20", 2);
        levelProgression.put("21-30", 3);
        levelProgression.put("31-40", 4);
        levelProgression.put("41-49", 5);
        levelProgression.put("50-50", 6);

        // --- Valores de Acciones que Proporcionan Favor ---
        // Interacción con Animales (Aumento de Favor).
        favorActionModifiers.put("TAME_WOLF", 1.5f);
        favorActionModifiers.put("TAME_CAT", 1.5f);
        favorActionModifiers.put("TAME_HORSE", 1.5f);
        favorActionModifiers.put("TAME_DONKEY", 1.5f);
        favorActionModifiers.put("TAME_MULE", 1.5f);
        favorActionModifiers.put("TAME_LLAMA", 1.5f);
        favorActionModifiers.put("FEED_CHICKEN", 1.0f);
        favorActionModifiers.put("FEED_COW", 1.0f);
        favorActionModifiers.put("FEED_PIG", 1.0f);
        favorActionModifiers.put("FEED_SHEEP", 1.0f);
        favorActionModifiers.put("FEED_PARROT", 1.0f);
        favorActionModifiers.put("FEED_PANDA", 1.0f);
        favorActionModifiers.put("FEED_FOX", 1.0f);

        // Interacción con Animales (Disminución de Favor).
        favorActionModifiers.put("KILL_WOLF", -2.5f);
        favorActionModifiers.put("KILL_CAT", -2.5f);
        favorActionModifiers.put("KILL_HORSE", -2.5f);
        favorActionModifiers.put("KILL_DONKEY", -2.5f);
        favorActionModifiers.put("KILL_MULE", -2.5f);
        favorActionModifiers.put("KILL_LLAMA", -2.5f);
        favorActionModifiers.put("KILL_PARROT", -2.5f);
        favorActionModifiers.put("KILL_PANDA", -2.5f);
        favorActionModifiers.put("KILL_FOX", -2.5f);

        // Interacción con Aldeanos - Fácil (Aumento de Favor).
        favorActionModifiers.put("TRADE_FARMER", 0.75f);
        favorActionModifiers.put("TRADE_FISHERMAN", 0.75f);
        favorActionModifiers.put("TRADE_SHEPHERD", 0.75f);
        favorActionModifiers.put("TRADE_LEATHERWORKER", 0.75f);
        favorActionModifiers.put("TRADE_MASON", 0.75f);

        // Interacción con Aldeanos - Medio (Aumento de Favor).
        favorActionModifiers.put("TRADE_CARTOGRAPHER", 1.0f);
        favorActionModifiers.put("TRADE_FLETCHER", 1.0f);
        favorActionModifiers.put("TRADE_BUTCHER", 1.0f);
        favorActionModifiers.put("TRADE_TOOLSMITH", 1.25f);
        favorActionModifiers.put("TRADE_WEAPONSMITH", 1.25f);

        // Interacción con Aldeanos - Difícil (Aumento de Favor).
        favorActionModifiers.put("TRADE_LIBRARIAN", 1.75f);
        favorActionModifiers.put("TRADE_CLERIC", 1.75f);
        favorActionModifiers.put("TRADE_ARMORER", 1.75f);
        favorActionModifiers.put("DEFEND_RAID", 15.0f);

        // Interacción con Aldeanos - Profesiones por defecto / Sin profesión.
        favorActionModifiers.put("TRADE_VILLAGER", 0.5f);

        // Interacción con Aldeanos (Disminución de Favor).
        favorActionModifiers.put("ATTACK_VILLAGER", -1.5f);
        favorActionModifiers.put("ATTACK_FARMER", -2.0f);
        favorActionModifiers.put("ATTACK_FISHERMAN", -2.0f);
        favorActionModifiers.put("ATTACK_SHEPHERD", -2.0f);
        favorActionModifiers.put("ATTACK_LEATHERWORKER", -2.0f);
        favorActionModifiers.put("ATTACK_MASON", -2.0f);
        favorActionModifiers.put("ATTACK_CARTOGRAPHER", -2.5f);
        favorActionModifiers.put("ATTACK_FLETCHER", -2.5f);
        favorActionModifiers.put("ATTACK_BUTCHER", -2.5f);
        favorActionModifiers.put("ATTACK_TOOLSMITH", -3.0f);
        favorActionModifiers.put("ATTACK_WEAPONSMITH", -3.0f);
        favorActionModifiers.put("ATTACK_ARMORER", -3.0f);
        favorActionModifiers.put("ATTACK_LIBRARIAN", -3.5f);
        favorActionModifiers.put("ATTACK_CLERIC", -4.0f);
        favorActionModifiers.put("KILL_VILLAGER", -7.5f);
        favorActionModifiers.put("DESTROY_VILLAGE_BLOCK", -2.5f);

        // Interacción con Golems (Aumento de Favor).
        favorActionModifiers.put("REPAIR_GOLEM", 0.5f);

        // Interacción con Golems (Disminución de Favor).
        favorActionModifiers.put("DAMAGE_GOLEM", -1.0f);
        favorActionModifiers.put("SHEAR_SNOW_GOLEM_PUMPKIN", -2.5f);
        favorActionModifiers.put("KILL_GOLEM", -5.0f);

        // XP entregada por receta de fundición (smelting).
        smeltingXpRewards.put("minecraft:iron_ingot", 2);
        smeltingXpRewards.put("minecraft:gold_ingot", 3);
        smeltingXpRewards.put("minecraft:copper_ingot", 1);
        smeltingXpRewards.put("minecraft:cooked_beef", 1);
        smeltingXpRewards.put("minecraft:charcoal", 1);
        smeltingXpRewards.put("minecraft:lapis_lazuli", 2);
        smeltingXpRewards.put("minecraft:redstone", 2);
        smeltingXpRewards.put("minecraft:emerald", 2);
        smeltingXpRewards.put("minecraft:diamond", 4);
        smeltingXpRewards.put("minecraft:coal", 1);
        smeltingXpRewards.put("minecraft:quartz", 2);
        smeltingXpRewards.put("minecraft:netherite_scrap", 10);
        smeltingXpRewards.put("minecraft:cooked_porkchop", 1);
        smeltingXpRewards.put("minecraft:cooked_chicken", 1);
        smeltingXpRewards.put("minecraft:cooked_mutton", 1);
        smeltingXpRewards.put("minecraft:cooked_rabbit", 1);
        smeltingXpRewards.put("minecraft:cooked_fish", 1);
        smeltingXpRewards.put("minecraft:cooked_salmon", 1);
        smeltingXpRewards.put("minecraft:baked_potato", 1);
        smeltingXpRewards.put("minecraft:dried_kelp", 1);
        smeltingXpRewards.put("minecraft:stone", 1);
        smeltingXpRewards.put("minecraft:smooth_stone", 1);
        smeltingXpRewards.put("minecraft:brick", 1);
        smeltingXpRewards.put("minecraft:nether_brick", 1);
        smeltingXpRewards.put("minecraft:green_dye", 1);
        smeltingXpRewards.put("minecraft:sponge", 1);
        smeltingXpRewards.put("minecraft:glass", 1);

        this.xpLossPercentageOnDeath = 0.10f;
        this.xpMaxDebtPercentage = 0.15f;

        this.defaultSmeltingXp = 1;

        // --- Hitos de Exploración (Biomas y Dimensiones) ---
        achievements.put("EXPLORER_NOVICE", new AchievementConfig(10, 3));
        achievements.put("LOCAL_ADVENTURER", new AchievementConfig(50, 7));
        achievements.put("ACCOMPLISHED_CARTOGRAPHER", new AchievementConfig(100, 15));
        achievements.put("UNKNOWN_PIONEER", new AchievementConfig(200, 1)); // Este se activará al morir en la nueva dimensión

        // --- Hitos de Combate (Matar Mobs Hostiles) ---
        achievements.put("FLEDGLING_ADVOCATE", new AchievementConfig(40, 10));
        achievements.put("CREATURE_HUNTER", new AchievementConfig(90, 50));
        achievements.put("THREATS_EXTERMINATOR", new AchievementConfig(300, 200));
        achievements.put("SHADOWS_TERROR", new AchievementConfig(600, 500));
        achievements.put("MASACRE_MASTER", new AchievementConfig(1000, 1000));

        // --- Hitos de Minería y Recolección ---
        achievements.put("ROCK_FINDER", new AchievementConfig(10, 64));
        achievements.put("AMATEUR_EXCAVATOR", new AchievementConfig(60, 100));
        achievements.put("SKILLED_MINERALOGIST", new AchievementConfig(180, 500));
        achievements.put("GEOLOGIST_EXPERT", new AchievementConfig(350, 1000));
        achievements.put("MINING_MASTER", new AchievementConfig(700, 2500));
        achievements.put("HIDDEN_TREASURE", new AchievementConfig(250, 50)); // Mina 50 diamantes
        achievements.put("MASTER_OBSIDIAN", new AchievementConfig(150, 20)); // Mina 20 obsidiana

        // --- Hitos de Agricultura y Ganadería ---
        achievements.put("NOVICE_SOWER", new AchievementConfig(30, 50));
        achievements.put("DEDICATED_FARMER", new AchievementConfig(80, 200));
        achievements.put("ACCOMPLISHED_AGRONOMIST", new AchievementConfig(180, 500));
        achievements.put("HARVEST_POWER", new AchievementConfig(350, 1000));
        achievements.put("BEAST_TAMER", new AchievementConfig(100, 3));
        achievements.put("TIRELESS_SHEPHERD", new AchievementConfig(200, 10));
        achievements.put("SUCCESSFUL_BREEDER", new AchievementConfig(150, 20));

        // --- Hitos de Crafteo y Manufactura ---
        achievements.put("FIRST_CRAFTING", new AchievementConfig(20, 1)); // 1 para el primer crafteo
        achievements.put("CREATIVE_CRAFTER", new AchievementConfig(50, 10));
        achievements.put("ARTISAN_APPRENTICE", new AchievementConfig(100, 50));
        achievements.put("MASTER_CRAFTSMAN", new AchievementConfig(250, 150));
        achievements.put("ART_KITCHEN", new AchievementConfig(70, 50)); // Funde 50 comestibles
        achievements.put("TIRELESS_FURNACE", new AchievementConfig(160, 200)); // Funde 200 ítems

        // --- Hitos de Supervivencia y Progresión General ---
        achievements.put("FIRST_STEPS", new AchievementConfig(10, 100));
        achievements.put("CONSTANT_WALKER", new AchievementConfig(100, 1000));
        achievements.put("TIRELESS_TRAVELER", new AchievementConfig(250, 5000));
        achievements.put("HUNGER_RESISTANT", new AchievementConfig(180, 1)); // 1 para sobrevivir la etapa
        achievements.put("A_WHOLE_DAY", new AchievementConfig(50, 1)); // 1 para 1 día
        achievements.put("ONE_WEEK_WORLD", new AchievementConfig(200, 7)); // 7 para 7 días
        achievements.put("IM_STILL_ALIVE", new AchievementConfig(800, 30)); // 7 para 7 días

    }

    // --- Métodos de Ayuda para Creación de Configuración ---
    // Crea un objeto StatConfig para Salud (asociada a CON).
    private HealthStatConfig createHealthStatConfig(float baseInitial,
                                                    float conMult,
                                                    float baseMult, float baseLimit,
                                                    float classBonusMult, float classBonusLimit,
                                                    float racialAffinityMult, float racialAffinityLimit) {
        HealthStatConfig config = new HealthStatConfig();
        config.baseInitialValue = baseInitial;
        config.conMultiplierPerPoint = conMult;

        config.affinityLimits.put("BASE", new AffinityLimit(baseMult, baseLimit));
        config.affinityLimits.put("CLASS_BONUS", new AffinityLimit(classBonusMult, classBonusLimit));
        config.affinityLimits.put("RACIAL_AFFINITY", new AffinityLimit(racialAffinityMult, racialAffinityLimit));
        return config;
    }

    // Crea un objeto StatConfig para Maná (asociada a INT).
    private ManaStatConfig createManaStatConfig(float baseInitial,
                                                float intMult,
                                                float baseMult, float baseLimit,
                                                float classBonusMult, float classBonusLimit,
                                                float racialAffinityMult, float racialAffinityLimit) {
        ManaStatConfig config = new ManaStatConfig();
        config.baseInitialValue = baseInitial;
        config.intMultiplierPerPoint = intMult;

        config.affinityLimits.put("BASE", new AffinityLimit(baseMult, baseLimit));
        config.affinityLimits.put("CLASS_BONUS", new AffinityLimit(classBonusMult, classBonusLimit));
        config.affinityLimits.put("RACIAL_AFFINITY", new AffinityLimit(racialAffinityMult, racialAffinityLimit));
        return config;
    }

    // Crea un objeto StatConfig para Vigor (asociada a DEX).
    private VigorStatConfig createVigorStatConfig(float baseInitial,
                                                  float dexMult,
                                                  float baseMult, float baseLimit,
                                                  float classBonusMult, float classBonusLimit,
                                                  float racialAffinityMult, float racialAffinityLimit) {
        VigorStatConfig config = new VigorStatConfig();
        config.baseInitialValue = baseInitial;
        config.dexMultiplierPerPoint = dexMult;

        config.affinityLimits.put("BASE", new AffinityLimit(baseMult, baseLimit));
        config.affinityLimits.put("CLASS_BONUS", new AffinityLimit(classBonusMult, classBonusLimit));
        config.affinityLimits.put("RACIAL_AFFINITY", new AffinityLimit(racialAffinityMult, racialAffinityLimit));
        return config;
    }

    // Configura y calcula el escalado para la Protección Innata.
    private ProtectionInnateConfig createProtectionInnateConfig(float baseValue, float perLevelIncrease) {
        return new ProtectionInnateConfig(baseValue, perLevelIncrease);
    }

    // Crea un objeto ProtectionConfig con los valores de eficacia y multiplicadores para la protección (asociada a STR).
    private ProtectionStatConfig createProtectionStatConfig(float strEfficacyMult,
                                                            float baseMult, float baseLimit,
                                                            float classBonusMult, float classBonusLimit,
                                                            float racialAffinityMult, float racialAffinityLimit) {
        ProtectionStatConfig config = new ProtectionStatConfig(); // Cambiado de ProtectionConfig a ProtectionStatConfig
        config.strEfficacyMultiplierPerPoint = strEfficacyMult;

        config.affinityLimits.put("BASE", new AffinityLimit(baseMult, baseLimit));
        config.affinityLimits.put("CLASS_BONUS", new AffinityLimit(classBonusMult, classBonusLimit));
        config.affinityLimits.put("RACIAL_AFFINITY", new AffinityLimit(racialAffinityMult, racialAffinityLimit));
        return config;
    }

    // --- Carga y Guardado de la Configuración ---
    // Carga la configuración desde el archivo JSON, o crea uno con valores por defecto si no existe o hay un error.
    public static void loadConfig() {
        File configFile = CONFIG_PATH.toFile();

        if (configFile.exists()) {
            try (FileReader reader = new FileReader(configFile)) {
                INSTANCE = GSON.fromJson(reader, ModConfigs.class);
                if (INSTANCE == null) {
                    BrokenPath.LOGGER.warn("Configuration file '{}' was empty or invalid JSON. Loading default configurations.", CONFIG_FILE_NAME);
                    INSTANCE = new ModConfigs(); // Usa valores por defecto si el archivo JSON está vacío o es inválido (Gson devuelve null).
                }
            } catch (JsonSyntaxException e) {
                BrokenPath.LOGGER.error("Error parsing configuration file '{}'. Please check JSON syntax. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                INSTANCE = new ModConfigs(); // Usa valores por defecto en caso de error de sintaxis JSON.
            } catch (IOException e) {
                BrokenPath.LOGGER.error("Failed to read configuration file '{}'. Loading default configurations. Error: {}", CONFIG_FILE_NAME, e.getMessage());
                INSTANCE = new ModConfigs(); // Usa valores por defecto en caso de error de lectura.
            }
        } else {
            BrokenPath.LOGGER.info("Configuration file '{}' not found. Creating with default configurations.", CONFIG_FILE_NAME);
            INSTANCE = new ModConfigs(); // Crea una nueva instancia con valores por defecto.
            saveConfig(); // Guarda la configuración por defecto si el archivo no existe.
        }

        // POST-CARGA: Asegura que todos los mapas internos y objetos estén inicializados
        // con valores por defecto si Gson no pudo cargarlos (ej., si la sección no existía en el JSON)
        // Esto es un "safety net" adicional.
        INSTANCE.attributeSettings = Optional.ofNullable(INSTANCE.attributeSettings).orElseGet(AttributeSettings::new);
        INSTANCE.attributeSettings.manualAllocationLimit = Optional.ofNullable(INSTANCE.attributeSettings.manualAllocationLimit).orElseGet(HashMap::new);

        INSTANCE.raceSettings = Optional.ofNullable(INSTANCE.raceSettings).orElseGet(HashMap::new);
        // Para cada RaceSettings, asegura que sus StatConfig internas no sean nulas.
        // Esto es más complejo y quizás overkill si initializeDefaults ya los setea.
        // Pero para ser robustos, si Gson crea un RaceSettings sin sus sub-objetos, esto los repondría.
        for (Map.Entry<String, RaceSettings> entry : INSTANCE.raceSettings.entrySet()) {
            RaceSettings rs = entry.getValue();
            // Utiliza las nuevas clases específicas
            rs.health = Optional.ofNullable(rs.health).orElseGet(HealthStatConfig::new);
            rs.mana = Optional.ofNullable(rs.mana).orElseGet(ManaStatConfig::new);
            rs.vigor = Optional.ofNullable(rs.vigor).orElseGet(VigorStatConfig::new);
            rs.protection = Optional.ofNullable(rs.protection).orElseGet(ProtectionStatConfig::new); // Cambiado
            rs.protectionInnate = Optional.ofNullable(rs.protectionInnate).orElseGet(ProtectionInnateConfig::new);
            rs.luck = Optional.ofNullable(rs.luck).orElseGet(FavorConfig::new);

            // También para los affinityLimits dentro de cada StatConfig
            Optional.ofNullable(rs.health.affinityLimits).orElseGet(HashMap::new);
            Optional.ofNullable(rs.mana.affinityLimits).orElseGet(HashMap::new);
            Optional.ofNullable(rs.vigor.affinityLimits).orElseGet(HashMap::new);
            Optional.ofNullable(rs.protection.affinityLimits).orElseGet(HashMap::new);
        }

        INSTANCE.classAffinities = Optional.ofNullable(INSTANCE.classAffinities).orElseGet(HashMap::new);
        INSTANCE.classAttributeBonuses = Optional.ofNullable(INSTANCE.classAttributeBonuses).orElseGet(HashMap::new);
        INSTANCE.levelProgression = Optional.ofNullable(INSTANCE.levelProgression).orElseGet(HashMap::new);
        INSTANCE.favorActionModifiers = Optional.ofNullable(INSTANCE.favorActionModifiers).orElseGet(HashMap::new);
        INSTANCE.xpProgressionSettings = Optional.ofNullable(INSTANCE.xpProgressionSettings).orElseGet(XpProgressionSettings::new);
        INSTANCE.smeltingXpRewards = Optional.ofNullable(INSTANCE.smeltingXpRewards).orElseGet(HashMap::new);
        INSTANCE.achievements = Optional.ofNullable(INSTANCE.achievements).orElseGet(HashMap::new);
    }

    // Guarda la configuración actual del mod en el archivo JSON.
    public static void saveConfig() {
        File configFile = CONFIG_PATH.toFile();
        try (FileWriter writer = new FileWriter(configFile)) {
            GSON.toJson(INSTANCE, writer);
        } catch (IOException e) {
            BrokenPath.LOGGER.error("Failed to save configuration file '{}'. Error: {}", CONFIG_FILE_NAME, e.getMessage());
        }
    }

    // --- Métodos de Lógica de Configuración ---
    // Calcula la cantidad de XP necesaria para el siguiente nivel.
    public int getXPForNextLevel(int currentLevel) {
        if (currentLevel >= MAX_LEVEL) {
            return 0; // No se necesita más XP si ya se alcanzó el nivel máximo.
        }

        final float A = xpProgressionSettings.baseXp;
        final float B = xpProgressionSettings.linearXpCoefficient;
        final float C = xpProgressionSettings.polynomialXpCoefficient;
        final float EXP = xpProgressionSettings.polynomialXpExponent; // El exponente configurable.

        // Fórmula: XP_Necesaria = A + (B * Nivel) + (C * Nivel^EXP)
        double xpNeededDouble = A + (B * currentLevel) + (C * Math.pow(currentLevel, EXP));

        // Redondeamos al entero más cercano.
        int xpNeeded = (int) Math.round(xpNeededDouble);

        // Aseguramos un mínimo, si la fórmula da un valor muy bajo al inicio.
        if (xpNeeded < xpProgressionSettings.minXpPerLevel) {
            xpNeeded = xpProgressionSettings.minXpPerLevel;
        }
        return xpNeeded;
    }

    // Comprueba si una clase es afín a una estadística específica para una raza dada.
    public boolean isClassAffinToStat(String raceName, String className, String statName) {
        Map<String, List<String>> affinitiesForClass = classAffinities.get(className.toUpperCase());
        if (affinitiesForClass == null) return false;
        List<String> affineRaces = affinitiesForClass.get(statName.toUpperCase());
        return affineRaces != null && affineRaces.contains(raceName.toUpperCase());
    }

    // Comprueba si una clase bonifica un atributo fundamental específico.
    public boolean doesClassBoostAttribute(String className, String attributeName) {
        List<String> boostedAttributes = classAttributeBonuses.get(className.toUpperCase());
        return boostedAttributes != null && boostedAttributes.contains(attributeName.toUpperCase());
    }

    // Recoge el número de puntos de atributo fundamental que se ganan por alcanzar un nivel en un rango dado.
    public int getAttributePointsForLevelRange(int level) {
        for (Map.Entry<String, Integer> entry : levelProgression.entrySet()) {
            String[] range = entry.getKey().split("-");
            try {
                int min = Integer.parseInt(range[0]);
                int max = Integer.parseInt(range[1]);
                if (level >= min && level <= max) {
                    return entry.getValue();
                }
            } catch (NumberFormatException e) {
                BrokenPath.LOGGER.error("Error parsing level range in configuration: {}. Error: {}", entry.getKey(), e.getMessage());
            }
        }
        return 0;
    }

    // --- Clases Anidadas para Mapeo JSON ---
    // Configuración de límites de asignación manual para atributos.
    public static class AttributeSettings {
        public Map<String, Integer> manualAllocationLimit = new HashMap<>();
        public AttributeSettings() {} // Constructor por defecto
    }

    // Configuración de las estadísticas base para cada raza.
    public static class RaceSettings {
        public HealthStatConfig health; // Cambiado a HealthStatConfig
        public ManaStatConfig mana;     // Cambiado a ManaStatConfig
        public VigorStatConfig vigor;   // Cambiado a VigorStatConfig
        public ProtectionStatConfig protection; // Cambiado a ProtectionStatConfig
        public ProtectionInnateConfig protectionInnate;
        public FavorConfig luck;

        public RaceSettings() { // Constructor por defecto
            health = new HealthStatConfig(); // Instancia específica
            mana = new ManaStatConfig();     // Instancia específica
            vigor = new VigorStatConfig();   // Instancia específica
            protection = new ProtectionStatConfig(); // Instancia específica
            protectionInnate = new ProtectionInnateConfig();
            luck = new FavorConfig();
        }
    }

    // Clases específicas para cada estadística principal, con su único multiplicador de atributo relevante.
    public static class HealthStatConfig extends StatConfigBase {
        public float conMultiplierPerPoint;
        public HealthStatConfig() {}
    }

    public static class ManaStatConfig extends StatConfigBase {
        public float intMultiplierPerPoint;
        public ManaStatConfig() {}
    }

    public static class VigorStatConfig extends StatConfigBase {
        public float dexMultiplierPerPoint;
        public VigorStatConfig() {}
    }

    // Clase base para las configuraciones de estadísticas, conteniendo los campos comunes.
    public static abstract class StatConfigBase {
        public float baseInitialValue;
        public Map<String, AffinityLimit> affinityLimits = new HashMap<>();
        public StatConfigBase() {} // Constructor por defecto
    }

    // Configuración detallada para la estadística de protección (ahora más específica para STR).
    public static class ProtectionStatConfig { // Renombrado de ProtectionConfig
        public float strEfficacyMultiplierPerPoint;
        public Map<String, AffinityLimit> affinityLimits = new HashMap<>();
        public ProtectionStatConfig() {}
    }

    // Configuración detallada para el sistema de Favor.
    public static class FavorConfig {
        public float baseFavor;
        public float maxLimit;
        public float minLimit;

        // Constructor requerido por GSON para cargar desde JSON.
        public FavorConfig() {
            this.baseFavor = 0f;
            this.maxLimit = 90.0f;
            this.minLimit = -90.0f;
        }

        // Constructor para inicializar por código en `initializeDefaults()`.
        public FavorConfig(float baseFavor, float maxLimit, float minLimit) {
            this.baseFavor = baseFavor;
            this.maxLimit = maxLimit;
            this.minLimit = minLimit;
        }
    }

    // Límites de afinidad para el escalado de estadísticas.
    public static class AffinityLimit {
        public float multiplier;
        public float limit;
        public AffinityLimit(float multiplier, float limit) {
            this.multiplier = multiplier;
            this.limit = limit;
        }
        public AffinityLimit() {} // Constructor por defecto requerido por GSON.
    }

    // Configuración para la progresión de la experiencia.
    public static class XpProgressionSettings {
        public float baseXp;
        public float linearXpCoefficient;
        public float polynomialXpCoefficient;
        public float polynomialXpExponent;
        public int minXpPerLevel;
        public XpProgressionSettings() {}
    }

    // Configuración de protección innata (valor base y aumento por nivel).
    public static class ProtectionInnateConfig {
        public float baseValue;
        public float perLevelIncrease;

        public ProtectionInnateConfig(float baseValue, float perLevelIncrease) {
            this.baseValue = baseValue;
            this.perLevelIncrease = perLevelIncrease;
        }
        public ProtectionInnateConfig() {}
    }

    // --- Getters Utiles para Acceder a la Configuración ---
    // Obtiene el límite de asignación manual para un atributo dado.
    public int getManualAttributeLimit(String attributeName) {
        return attributeSettings.manualAllocationLimit.getOrDefault(attributeName.toUpperCase(), 1);
    }

    // Obtiene la configuración de una estadística (Salud, Maná, Vigor) para una raza específica.
    // Este getter general ahora retorna StatConfigBase, requiriendo un cast posterior.
    public StatConfigBase getRaceStatConfig(String raceName, String statName) { // Tipo de retorno cambiado a StatConfigBase
        RaceSettings raceSetting = raceSettings.get(raceName.toUpperCase());
        if (raceSetting == null) {
            BrokenPath.LOGGER.warn("Race configuration not found for: {}. Returning default stat config for {}.", raceName, statName);
            // Retorna una configuración por defecto adecuada para el tipo solicitado.
            switch (statName.toUpperCase()) {
                case "HEALTH": return new HealthStatConfig();
                case "MANA": return new ManaStatConfig();
                case "VIGOR": return new VigorStatConfig();
                default: return new HealthStatConfig(); // Fallback genérico si no se conoce el stat.
            }
        }

        switch (statName.toUpperCase()) {
            case "HEALTH": return Optional.ofNullable(raceSetting.health).orElseGet(HealthStatConfig::new);
            case "MANA": return Optional.ofNullable(raceSetting.mana).orElseGet(ManaStatConfig::new);
            case "VIGOR": return Optional.ofNullable(raceSetting.vigor).orElseGet(VigorStatConfig::new);
            default:
                BrokenPath.LOGGER.warn("Unknown stat name '{}' requested for race '{}'. Returning default HealthStatConfig.", statName, raceName);
                return new HealthStatConfig(); // Fallback genérico si no se conoce el stat.
        }
    }

    // Obtiene la configuración de protección para una raza específica.
    public ProtectionStatConfig getRaceProtectionConfig(String raceName) { // Tipo de retorno cambiado
        RaceSettings raceSetting = raceSettings.get(raceName.toUpperCase());
        if (raceSetting == null) {
            BrokenPath.LOGGER.warn("Race configuration not found for: {}. Returning default ProtectionStatConfig.", raceName);
            return new ProtectionStatConfig();
        }
        return Optional.ofNullable(raceSetting.protection).orElseGet(ProtectionStatConfig::new);
    }

    // Obtiene la configuración de Favor para una raza específica.
    public FavorConfig getRaceFavorConfig(String raceName) {
        RaceSettings raceSetting = raceSettings.get(raceName.toUpperCase());
        if (raceSetting == null) {
            BrokenPath.LOGGER.warn("Race configuration not found for: {}. Returning default FavorConfig.", raceName);
            return new FavorConfig();
        }
        return Optional.ofNullable(raceSetting.luck).orElseGet(FavorConfig::new);
    }

    // --- Getters de Regeneración ---
    public float getManaRegenOutOfCombatBase() { return manaRegenOutOfCombatBase; }
    public float getManaRegenInCombatBase() { return manaRegenInCombatBase; }
    public float getManaRegenBonusPerInt() { return manaRegenBonusPerInt; }
    public int getManaDelayAfterCombatTicks() { return manaDelayAfterCombatTicks; }

    public float getVigorRegenOutOfCombatBase() { return vigorRegenOutOfCombatBase; }
    public float getVigorRegenInCombatBase() { return vigorRegenInCombatBase; }
    public float getVigorRegenBonusPerDex() { return vigorRegenBonusPerDex; }
    public int getVigorDelayAfterCombatTicks() { return vigorDelayAfterCombatTicks; }

    public int getHealthRegenCooldownTicksBase() { return healthRegenCooldownTicksBase; }
    public float getHealthAmountToHealPerPulse() { return healthAmountToHealPerPulse; }
    public float getHealthExhaustionCostPerHealPulse() { return healthExhaustionCostPerHealPulse; }
    public int getHealthMinFoodLevelForRegen() { return healthMinFoodLevelForRegen; }
    public int getHealthDelayAfterCombatTicks() { return healthDelayAfterCombatTicks; }
    public int getHealthMinEffectiveCooldownTicks() { return healthMinEffectiveCooldownTicks; }
    public float getHealthRegenBonusPerConTicks() { return healthRegenBonusPerConTicks; }

    public float getRegenEffectHealingBonusMultiplier() { return regenEffectHealingBonusMultiplier; }

    // Getters para la Regeneración de Protección Innata
    public float getInnateProtectionAmountPerPulse() { return innateProtectionAmountPerPulse; }
    public int getInnateProtectionRegenCooldownTicks() { return innateProtectionRegenCooldownTicks; }
    public int getInnateProtectionDelayAfterCombatTicks() { return innateProtectionDelayAfterCombatTicks; }

    public int getProtectionRegenSlowCooldownTicks() { return protectionRegenSlowCooldownTicks; }
    public float getProtectionAmountPerSlowPulse() { return protectionAmountPerSlowPulse; }
    public float getProtectionRestoreAmountPerAbility() { return protectionRestoreAmountPerAbility; }

    public int getManaRegenCooldownTicksEffect() { return manaRegenCooldownTicksEffect; }
    public float getManaAmountPerEffectPulse() { return manaAmountPerEffectPulse; }

    public int getVigorRegenCooldownTicksEffect() { return vigorRegenCooldownTicksEffect; }
    public float getVigorAmountPerEffectPulse() { return vigorAmountPerEffectPulse; }

    public float getHungryModerateVigorRegenPenalty() { return hungryModerateVigorRegenPenalty; }
    public float getHungryIntenseVigorRegenPenalty() { return hungryIntenseVigorRegenPenalty; }
    public float getStarvingVigorRegenPenalty() {return starvingVigorRegenPenalty;}
    public int getStarvingDamageIntervalTicks() { return starvingDamageIntervalTicks; }
    public float getStarvingDamageAmount() { return starvingDamageAmount; }

    public float getHungryModeratePassiveExhaustionPerTick() { return hungryModeratePassiveExhaustionPerTick; }
    public float getHungryIntensePassiveExhaustionPerTick() { return hungryIntensePassiveExhaustionPerTick; }
    public float getStarvingPassiveExhaustionPerTick() { return starvingPassiveExhaustionPerTick; }

    public AchievementConfig getAchievementConfig(String achievementKey) { return achievements.get(achievementKey.toUpperCase());}

    public float getFavorBonusMultiplier() { return maxFavorBonusMultiplier; }

    // Obtiene la configuración de protección innata (base y escalado por nivel) para la raza especificada.
    public ModConfigs.ProtectionInnateConfig getRaceProtectionInnateConfig(String raceName) {
        RaceSettings raceSetting = raceSettings.get(raceName.toUpperCase());
        if (raceSetting == null) {
            BrokenPath.LOGGER.warn("Race configuration not found for: {}. Returning default ProtectionInnateConfig.", raceName);
            return new ProtectionInnateConfig();
        }
        return Optional.ofNullable(raceSetting.protectionInnate).orElseGet(ProtectionInnateConfig::new);
    }

    //Configuración de un solo hito para escritura en JSON
    public static class AchievementConfig {
        public int xpReward; // Cantidad de XP a otorgar al completar el hito
        public int threshold; // El valor numérico necesario para completar el hito (ej. 1000 pasos, 5 biomas)

        // Constructor para inicializar desde código
        public AchievementConfig(int xpReward, int threshold) {
            this.xpReward = xpReward;
            this.threshold = threshold;
        }

        // Constructor por defecto requerido por GSON
        public AchievementConfig() {}
    }

}