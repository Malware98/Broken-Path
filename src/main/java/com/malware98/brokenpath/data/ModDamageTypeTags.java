package com.malware98.brokenpath.data;

import com.malware98.brokenpath.BrokenPath;
import net.minecraft.core.registries.Registries;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.tags.TagKey;
import net.minecraft.world.damagesource.DamageType;

/**
 * Defines and stores {@link TagKey} instances for custom damage types in "BrokenPath".
 * These tags are used to classify and group different damage types,
 * enabling flexible management of effects, resistances, and damage properties
 * through data-driven JSON files.
 */
public class ModDamageTypeTags {

    // --- Main Damage Categories ---
    /**
     * Tag for damage types considered physical.
     * Used to group slashing, piercing, and blunt damage, along with vanilla physical attacks.
     */
    public static final TagKey<DamageType> IS_PHYSICAL =
            TagKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "is_physical"));
    /**
     * Tag for damage types considered magical.
     * Used to group various elemental and arcane magic damage for magic-related interactions.
     */
    public static final TagKey<DamageType> IS_MAGIC =
            TagKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "is_magic"));

    // --- Protection and Invulnerability Exceptions ---
    /**
     * Tag for damage types that ignore standard protection mechanisms (e.g., armor, shields).
     * This allows for "true damage" or other effects that bypass defensive stats.
     */
    public static final TagKey<DamageType> IGNORES_PROTECTION =
            TagKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "ignores_protection"));
    /**
     * Tag for damage types that have penetrating properties.
     * A portion of this damage will bypass protection, making it effective against heavily armored foes.
     */
    public static final TagKey<DamageType> IS_PENETRATING =
            TagKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "is_penetrating"));
    /**
     * Tag for damage types that ignore invulnerability frames (IFrames).
     * This allows for damage that can hit consecutively without the brief period of invulnerability.
     */
    public static final TagKey<DamageType> IGNORES_INVULNERABILITY_FRAMES =
            TagKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "ignores_invulnerability_frames"));

    // --- Damage-Specific Effects and Properties ---
    /**
     * Tag for damage types that can cause the bleeding effect.
     */
    public static final TagKey<DamageType> CAN_BLEED =
            TagKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "can_bleed"));
    /**
     * Tag for damage types that can cause the stunning effect.
     */
    public static final TagKey<DamageType> CAN_STUN =
            TagKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "can_stun"));
    /**
     * Tag for damage types that cause burning.
     */
    public static final TagKey<DamageType> CAUSES_BURN =
            TagKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "causes_burn"));
    /**
     * Tag for damage types that cause freezing.
     */
    public static final TagKey<DamageType> CAUSES_FREEZE =
            TagKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "causes_freeze"));
    /**
     * Tag for damage types that cause electrocution.
     */
    public static final TagKey<DamageType> CAUSES_ELECTROCUTION =
            TagKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "causes_electrocution"));
    /**
     * Tag for damage types that cause purification.
     */
    public static final TagKey<DamageType> CAUSES_PURIFICATION =
            TagKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "causes_purification"));
    /**
     * Tag for damage types that cause rupture.
     */
    public static final TagKey<DamageType> CAUSES_RUPTURE =
            TagKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "causes_rupture"));
    /**
     * Tag for damage types that allow life steal.
     */
    public static final TagKey<DamageType> CAN_LIFE_STEAL =
            TagKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(BrokenPath.MOD_ID, "can_life_steal"));

    // Note: Damage type tags are not registered directly here.
    // Their content and associations are defined via JSON files located in `data/<modid>/tags/damage_type/`.
}