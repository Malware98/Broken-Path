package com.malware98.brokenpath.events;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.capabilities.IPlayerStats;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.util.CapabilityUtils;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.stats.Stat;
import net.minecraft.stats.Stats;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.monster.Monster;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.level.biome.Biome;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraftforge.event.TickEvent;
import net.minecraftforge.event.entity.living.LivingDeathEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.event.level.BlockEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.registries.ForgeRegistries;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

// Suscribimos esta clase al bus de eventos de Forge
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class AchievementEventHandler {

    // Este proceso se ejecuta en cada tick del jugador.
    // Lo usamos para hitos basados en tiempo, movimiento (simulado), o exploración pasiva de biomas
    @SubscribeEvent
    public static void onPlayerTick(TickEvent.PlayerTickEvent event) {
        // Solo procesamos en el lado del servidor y al final del tick para asegurar que los datos estén actualizados
        if (event.phase == TickEvent.Phase.END && !event.player.level().isClientSide()) {
            Player player = event.player; // 'player' es de tipo Player

            // Intentamos obtener la capacidad de estadísticas del jugador
            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                ModConfigs configs = ModConfigs.getInstance();

                // --- Hito: Caminar X Pasos ---
                String walkAchievementKey = "WALK_1000_STEPS";
                if (!playerStats.isAchievementCompleted(walkAchievementKey)) {
                    // Obtener la estadística real de pasos del jugador (en centímetros)
                    // player.getStats() es el proceso estándar para acceder a las estadísticas del jugador.
                        if (player instanceof ServerPlayer serverPlayer) {
                            Stat<ResourceLocation> walkStat = Stats.CUSTOM.get(Stats.WALK_ONE_CM);
                            int realWalkedCm = serverPlayer.getStats().getValue(walkStat);

                            int currentWalkProgress = realWalkedCm / 100;

                            playerStats.setAchievementProgress(walkAchievementKey, currentWalkProgress);
                            checkAndGrantAchievement(serverPlayer, playerStats, walkAchievementKey, configs.getAchievementConfig(walkAchievementKey));
                        }
                }

                // --- Hito: Descubrir Biomas ---
                ResourceKey<Biome> currentBiome = player.level().getBiome(player.blockPosition()).unwrapKey().orElse(null);
                if (currentBiome != null) {
                    // Usar la capacidad del jugador para añadir el bioma.
                    // El proceso addDiscoveredBiome() ya maneja si es nuevo y la sincronización.
                    playerStats.addDiscoveredBiome(currentBiome);

                    // Obtener el conteo actual de biomas descubiertos desde la capacidad.
                    int biomesCount = playerStats.getDiscoveredBiomes().size();

                    // Hito: Descubridor de Biomas (Nivel 1)
                    String discover5BiomesKey = "DISCOVER_5_BIOMES";
                    if (!playerStats.isAchievementCompleted(discover5BiomesKey)) {
                        playerStats.setAchievementProgress(discover5BiomesKey, biomesCount);
                        checkAndGrantAchievement(player, playerStats, discover5BiomesKey, configs.getAchievementConfig(discover5BiomesKey));
                    }

                    // Hito: Descubridor de Biomas (Nivel 2)
                    String discover15BiomesKey = "DISCOVER_15_BIOMES";
                    if (!playerStats.isAchievementCompleted(discover15BiomesKey)) {
                        playerStats.setAchievementProgress(discover15BiomesKey, biomesCount);
                        checkAndGrantAchievement(player, playerStats, discover15BiomesKey, configs.getAchievementConfig(discover15BiomesKey));
                    }

                }
            });
        }
    }

    //Maneja el evento cuando un jugador cambia de dimensión (ej. Overworld -> Nether -> End).
    @SubscribeEvent
    public static void onPlayerChangedDimension(PlayerEvent.PlayerChangedDimensionEvent event) {
        // Solo procesamos en el lado del servidor.
        if (!event.getEntity().level().isClientSide()) {
            Player player = event.getEntity();
            ResourceKey<net.minecraft.world.level.Level> newDimension = event.getTo(); // Obtiene la clave de la nueva dimensión

            // Intentamos obtener la capacidad de estadísticas del jugador.
            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                // Añadimos la nueva dimensión a la capacidad del jugador.
                // El proceso addVisitedDimension() dentro de PlayerStats ya comprueba si es nueva y llama a sync().
                playerStats.addVisitedDimension(newDimension);

                // Obtenemos el conteo actual de dimensiones visitadas directamente desde la capacidad.
                int dimensionsCount = playerStats.getVisitedDimensions().size();

                ModConfigs configs = ModConfigs.getInstance();
                String enterDimensionsKey = "ENTER_DIMENSIONS"; // Nombre de la clave del hito

                // Comprobamos si el hito no está completado y si el jugador ha alcanzado el umbral.
                if (!playerStats.isAchievementCompleted(enterDimensionsKey)) {
                    playerStats.setAchievementProgress(enterDimensionsKey, dimensionsCount);
                    checkAndGrantAchievement(player, playerStats, enterDimensionsKey, configs.getAchievementConfig(enterDimensionsKey));
                }
            });
        }
    }

    // Maneja el evento cuando un jugador rompe un bloque. Usado para hitos de minería y cosecha.
    @SubscribeEvent
    public static void onBlockBroken(BlockEvent.BreakEvent event) {
        // Solo procesamos en el lado del servidor.
        if (!event.getPlayer().level().isClientSide()) {
            Player player = event.getPlayer();
            BlockState brokenState = event.getState();
            Block brokenBlock = brokenState.getBlock();

            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                ModConfigs configs = ModConfigs.getInstance();

                // --- Hito: Maestro Minero (Nivel 1 y 2) ---
                // Aquí deberías definir una lista o un Tag de los bloques que consideras "minerales".
                // Para este ejemplo, haremos una comprobación simple por ResourceLocation.
                ResourceLocation blockId = ForgeRegistries.BLOCKS.getKey(brokenBlock);
                if (blockId != null && (
                        blockId.equals(new ResourceLocation("minecraft", "coal_ore")) ||
                                blockId.equals(new ResourceLocation("minecraft", "iron_ore")) ||
                                blockId.equals(new ResourceLocation("minecraft", "gold_ore")) ||
                                blockId.equals(new ResourceLocation("minecraft", "diamond_ore")) ||
                                blockId.equals(new ResourceLocation("minecraft", "emerald_ore")) ||
                                blockId.equals(new ResourceLocation("minecraft", "lapis_ore")) ||
                                blockId.equals(new ResourceLocation("minecraft", "redstone_ore")) ||
                                blockId.equals(new ResourceLocation("minecraft", "nether_quartz_ore")) ||
                                blockId.equals(new ResourceLocation("minecraft", "ancient_debris")))) {

                    int currentMinedOres = playerStats.getAchievementProgress("MINE_100_ORES") + 1;
                    playerStats.setAchievementProgress("MINE_100_ORES", currentMinedOres);
                    playerStats.setAchievementProgress("MINE_500_ORES", currentMinedOres); // También actualiza el progreso para el hito de nivel 2

                    checkAndGrantAchievement(player, playerStats, "MINE_100_ORES", configs.getAchievementConfig("MINE_100_ORES"));
                    checkAndGrantAchievement(player, playerStats, "MINE_500_ORES", configs.getAchievementConfig("MINE_500_ORES"));
                }

                // --- Hito: Granjero Dedicado ---
                // Similar a los minerales, se define qué bloques son "cultivos".
                // Para este ejemplo, comprobamos si es un bloque de cultivo maduro.
                // Una implementación más robusta verificaría el estado de madurez.
                if (blockId != null && (
                        blockId.equals(new ResourceLocation("minecraft", "wheat")) ||
                                blockId.equals(new ResourceLocation("minecraft", "carrots")) ||
                                blockId.equals(new ResourceLocation("minecraft", "potatoes")) ||
                                blockId.equals(new ResourceLocation("minecraft", "beetroots")) ||
                                blockId.equals(new ResourceLocation("minecraft", "nether_wart")) ||
                                blockId.equals(new ResourceLocation("minecraft", "cocoa")))) { // Puedes añadir más cultivos

                    int currentHarvestedCrops = playerStats.getAchievementProgress("HARVEST_200_CROPS") + 1;
                    playerStats.setAchievementProgress("HARVEST_200_CROPS", currentHarvestedCrops);
                    checkAndGrantAchievement(player, playerStats, "HARVEST_200_CROPS", configs.getAchievementConfig("HARVEST_200_CROPS"));
                }
            });
        }
    }

    //Maneja el evento cuando un jugador derrota a una entidad.
    @SubscribeEvent
    public static void onLivingDeath(LivingDeathEvent event) {
        // Solo procesamos si la fuente del daño es un jugador y estamos en el servidor.
        if (event.getSource().getEntity() instanceof Player player && !player.level().isClientSide()) {
            LivingEntity deadEntity = event.getEntity();

            // Solo contamos mobs hostiles (LivingEntity.isMonster() o puedes usar tags de entidades).
            if (deadEntity.isDeadOrDying() && !deadEntity.isInvulnerable() && deadEntity instanceof Monster) {
                CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                    ModConfigs configs = ModConfigs.getInstance();


                    // --- Hito: Cazador de Monstruos (Nivel 1 y 2) ---
                    String kill50MobsKey = "KILL_50_MOBS";
                    String kill200MobsKey = "KILL_200_MOBS";

                    int currentKills = playerStats.getAchievementProgress(kill50MobsKey) + 1;
                    playerStats.setAchievementProgress(kill50MobsKey, currentKills);
                    playerStats.setAchievementProgress(kill200MobsKey, currentKills); // Se actualiza para ambos hitos de nivel

                    checkAndGrantAchievement(player, playerStats, kill50MobsKey, configs.getAchievementConfig(kill50MobsKey));
                    checkAndGrantAchievement(player, playerStats, kill200MobsKey, configs.getAchievementConfig(kill200MobsKey));
                });
            }
        }
    }
    
    //Maneja el evento cuando un jugador craftea un ítem.
    @SubscribeEvent
    public static void onItemCrafted(PlayerEvent.ItemCraftedEvent event) {
        // Solo procesamos en el lado del servidor.
        if (!event.getEntity().level().isClientSide()) {
            Player player = event.getEntity();
            ResourceLocation craftedItemId = ForgeRegistries.ITEMS.getKey(event.getCrafting().getItem());

            if (craftedItemId != null) {
                CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                    // Usar la capacidad del jugador para añadir el ítem crafteado único.
                    // El proceso addCraftedUniqueItem() ya maneja si es nuevo y la sincronización.
                    playerStats.addCraftedUniqueItem(craftedItemId);

                    // Obtenemos el conteo actual de ítems únicos crafteados desde la capacidad.
                    int uniqueItemsCraftedCount = playerStats.getCraftedUniqueItems().size();

                    ModConfigs configs = ModConfigs.getInstance();
                    String craft50ItemsKey = "CRAFT_50_ITEMS";

                    // Actualizamos el progreso con el número de ítems diferentes crafteados.
                    playerStats.setAchievementProgress(craft50ItemsKey, uniqueItemsCraftedCount);
                    checkAndGrantAchievement(player, playerStats, craft50ItemsKey, configs.getAchievementConfig(craft50ItemsKey));
                });
            }
        }
    }

     // Función auxiliar para comprobar si un hito se ha alcanzado y otorgar la XP.
     private static void checkAndGrantAchievement(Player player, IPlayerStats playerStats, String achievementKey, ModConfigs.AchievementConfig config) {
         // Si la configuración para este hito no existe, o el hito ya está completado, no hacemos nada.
         if (config == null || playerStats.isAchievementCompleted(achievementKey)) {
             return;
         }

         // Si el progreso actual del jugador es igual o superior al umbral requerido.
         if (playerStats.getAchievementProgress(achievementKey) >= config.threshold) {
             playerStats.setAchievementCompleted(achievementKey, true); // Marcamos el hito como completado.

             // Enviamos un mensaje al jugador.
             player.sendSystemMessage(Component.literal("¡Logro desbloqueado: " + achievementKey.replace("_", " ") + "! Has ganado " + config.xpReward + " XP."));

             // Otorgamos la XP al jugador usando su capacidad de XP.
             player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                 playerXP.addExperience(config.xpReward);
             });
         }
     }
}