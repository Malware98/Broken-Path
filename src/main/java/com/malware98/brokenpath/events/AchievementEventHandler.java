package com.malware98.brokenpath.events;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.capabilities.IPlayerStats;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModBlockTags;
import com.malware98.brokenpath.data.config.AchievementDataConfig;
import com.malware98.brokenpath.util.CapabilityUtils;
import net.minecraft.advancements.Advancement;
import net.minecraft.advancements.AdvancementProgress;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.ServerAdvancementManager;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.stats.Stat;
import net.minecraft.stats.Stats;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.monster.Monster;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.food.FoodData;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.biome.Biome;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraftforge.event.TickEvent;
import net.minecraftforge.event.entity.living.AnimalTameEvent;
import net.minecraftforge.event.entity.living.LivingDeathEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.event.level.BlockEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.registries.ForgeRegistries;


/**
 * Event handler for custom achievements and player progression.
 * Tracks player actions to update progress and grant achievements.
 */
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class AchievementEventHandler {

    // --- Player Tick Events ---
    /**
     * Processes player tick events for time-based, movement, and biome exploration achievements.
     * @param event The player tick event.
     */
    @SubscribeEvent // Subscribes to TickEvent.PlayerTickEvent
    public static void onPlayerTick(TickEvent.PlayerTickEvent event) {
        if (event.phase == TickEvent.Phase.END && !event.player.level().isClientSide()) {
            Player player = event.player;

            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                FoodData foodStats = player.getFoodData();
                int foodLevel = foodStats.getFoodLevel();

                // Survival Root Achievement.
                if (!playerStats.isAchievementCompleted("SURVIVAL_ROOT") && foodLevel <= 16) {
                    playerStats.setAchievementProgress("SURVIVAL_ROOT", 1);
                    checkAndGrantAchievement(player, playerStats, "SURVIVAL_ROOT", AchievementDataConfig.getInstance().getAchievementConfig("SURVIVAL_ROOT"));
                }
                // Hunger Resistant Achievement.
                if (playerStats.getHungerStage() == 3 && !playerStats.isAchievementCompleted("HUNGER_RESISTANT")) {
                    playerStats.setAchievementProgress("HUNGER_RESISTANT", 1);
                    checkAndGrantAchievement(player, playerStats, "HUNGER_RESISTANT", AchievementDataConfig.getInstance().getAchievementConfig("HUNGER_RESISTANT"));
                }

                // Walking Achievements.
                if (player instanceof ServerPlayer serverPlayer) {
                    Stat<ResourceLocation> walkStat = Stats.CUSTOM.get(Stats.WALK_ONE_CM);
                    int realWalkedCm = serverPlayer.getStats().getValue(walkStat);
                    int currentWalkProgress = realWalkedCm / 100;

                    playerStats.setAchievementProgress("FIRST_STEPS", currentWalkProgress);
                    playerStats.setAchievementProgress("CONSTANT_WALKER", currentWalkProgress);
                    playerStats.setAchievementProgress("TIRELESS_TRAVELER", currentWalkProgress);

                    checkAndGrantAchievement(serverPlayer, playerStats, "FIRST_STEPS", AchievementDataConfig.getInstance().getAchievementConfig("FIRST_STEPS"));
                    checkAndGrantAchievement(serverPlayer, playerStats, "CONSTANT_WALKER", AchievementDataConfig.getInstance().getAchievementConfig("CONSTANT_WALKER"));
                    checkAndGrantAchievement(serverPlayer, playerStats, "TIRELESS_TRAVELER", AchievementDataConfig.getInstance().getAchievementConfig("TIRELESS_TRAVELER"));
                }

                // Survival Day Achievements.
                long currentDays = player.level().getDayTime() / 24000L;

                playerStats.setAchievementProgress("A_WHOLE_DAY", (int) currentDays);
                playerStats.setAchievementProgress("ONE_WEEK_WORLD", (int) currentDays);
                playerStats.setAchievementProgress("IM_STILL_ALIVE", (int) currentDays);

                checkAndGrantAchievement(player, playerStats, "A_WHOLE_DAY", AchievementDataConfig.getInstance().getAchievementConfig("A_WHOLE_DAY"));
                checkAndGrantAchievement(player, playerStats, "ONE_WEEK_WORLD", AchievementDataConfig.getInstance().getAchievementConfig("ONE_WEEK_WORLD"));
                checkAndGrantAchievement(player, playerStats, "IM_STILL_ALIVE", AchievementDataConfig.getInstance().getAchievementConfig("IM_STILL_ALIVE"));

                // Biome Discovery Achievements.
                ResourceKey<Biome> currentBiome = player.level().getBiome(player.blockPosition()).unwrapKey().orElse(null);
                if (currentBiome != null) {
                    playerStats.addDiscoveredBiome(currentBiome);
                    int biomesCount = playerStats.getDiscoveredBiomes().size();

                    // Exploration Root Achievement.
                    if (!playerStats.isAchievementCompleted("EXPLORATION_ROOT") && biomesCount >= 2) {
                        playerStats.setAchievementProgress("EXPLORATION_ROOT", 1);
                        checkAndGrantAchievement(player, playerStats, "EXPLORATION_ROOT", AchievementDataConfig.getInstance().getAchievementConfig("EXPLORATION_ROOT"));
                    }

                    playerStats.setAchievementProgress("EXPLORER_NOVICE", biomesCount);
                    playerStats.setAchievementProgress("LOCAL_ADVENTURER", biomesCount);
                    playerStats.setAchievementProgress("ACCOMPLISHED_CARTOGRAPHER", biomesCount);

                    checkAndGrantAchievement(player, playerStats, "EXPLORER_NOVICE", AchievementDataConfig.getInstance().getAchievementConfig("EXPLORER_NOVICE"));
                    checkAndGrantAchievement(player, playerStats, "LOCAL_ADVENTURER", AchievementDataConfig.getInstance().getAchievementConfig("LOCAL_ADVENTURER"));
                    checkAndGrantAchievement(player, playerStats, "ACCOMPLISHED_CARTOGRAPHER", AchievementDataConfig.getInstance().getAchievementConfig("ACCOMPLISHED_CARTOGRAPHER"));
                }
            });
        }
    }

    // --- Player Dimension Change Events ---
    /**
     * Handles achievements related to changing dimensions.
     * @param event The player changed dimension event.
     */
    @SubscribeEvent // Subscribes to PlayerEvent.PlayerChangedDimensionEvent
    public static void onPlayerChangedDimension(PlayerEvent.PlayerChangedDimensionEvent event) {
        if (!event.getEntity().level().isClientSide()) {
            Player player = event.getEntity();
            ResourceKey<net.minecraft.world.level.Level> newDimension = event.getTo();

            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                playerStats.addVisitedDimension(newDimension);
            });
        }
    }

    // --- Block Breaking Events ---
    /**
     * Handles block breaking events for mining and harvesting achievements.
     * @param event The block break event.
     */
    @SubscribeEvent // Subscribes to BlockEvent.BreakEvent
    public static void onBlockBroken(BlockEvent.BreakEvent event) {
        if (!event.getPlayer().level().isClientSide()) {
            Player player = event.getPlayer();
            BlockState brokenState = event.getState();

            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                // Mining Achievements (Ores).
                if (brokenState.is(ModBlockTags.ORES)) {
                    int currentMinedOres = playerStats.getAchievementProgress("AMATEUR_EXCAVATOR") + 1;

                    playerStats.setAchievementProgress("AMATEUR_EXCAVATOR", currentMinedOres);
                    playerStats.setAchievementProgress("SKILLED_MINERALOGIST", currentMinedOres);
                    playerStats.setAchievementProgress("GEOLOGIST_EXPERT", currentMinedOres);
                    playerStats.setAchievementProgress("MINING_MASTER", currentMinedOres);

                    checkAndGrantAchievement(player, playerStats, "AMATEUR_EXCAVATOR", AchievementDataConfig.getInstance().getAchievementConfig("AMATEUR_EXCAVATOR"));
                    checkAndGrantAchievement(player, playerStats, "SKILLED_MINERALOGIST", AchievementDataConfig.getInstance().getAchievementConfig("SKILLED_MINERALOGIST"));
                    checkAndGrantAchievement(player, playerStats, "GEOLOGIST_EXPERT", AchievementDataConfig.getInstance().getAchievementConfig("GEOLOGIST_EXPERT"));
                    checkAndGrantAchievement(player, playerStats, "MINING_MASTER", AchievementDataConfig.getInstance().getAchievementConfig("MINING_MASTER"));
                }

                // Rock Finder Achievement.
                if (!playerStats.isAchievementCompleted("ROCK_FINDER") && brokenState.is(ModBlockTags.STONE_BLOCKS)) {
                    int currentRocksMined = playerStats.getAchievementProgress("ROCK_FINDER") + 1;
                    playerStats.setAchievementProgress("ROCK_FINDER", currentRocksMined);
                    checkAndGrantAchievement(player, playerStats, "ROCK_FINDER", AchievementDataConfig.getInstance().getAchievementConfig("ROCK_FINDER"));
                }

                // Specific Mining Achievements.
                if (!playerStats.isAchievementCompleted("HIDDEN_TREASURE") && brokenState.getBlock().equals(Blocks.DIAMOND_ORE)) {
                    int currentDiamondsMined = playerStats.getAchievementProgress("HIDDEN_TREASURE") + 1;
                    playerStats.setAchievementProgress("HIDDEN_TREASURE", currentDiamondsMined);
                    checkAndGrantAchievement(player, playerStats, "HIDDEN_TREASURE", AchievementDataConfig.getInstance().getAchievementConfig("HIDDEN_TREASURE"));
                }
                if (!playerStats.isAchievementCompleted("MASTER_OBSIDIAN") && brokenState.getBlock().equals(Blocks.OBSIDIAN)) {
                    int currentObsidianMined = playerStats.getAchievementProgress("MASTER_OBSIDIAN") + 1;
                    playerStats.setAchievementProgress("MASTER_OBSIDIAN", currentObsidianMined);
                    checkAndGrantAchievement(player, playerStats, "MASTER_OBSIDIAN", AchievementDataConfig.getInstance().getAchievementConfig("MASTER_OBSIDIAN"));
                }

                // Harvesting Achievements (Crops).
                if (brokenState.is(ModBlockTags.CROPS)) {
                    int currentHarvestedCrops = playerStats.getAchievementProgress("NOVICE_SOWER") + 1;

                    playerStats.setAchievementProgress("NOVICE_SOWER", currentHarvestedCrops);
                    playerStats.setAchievementProgress("DEDICATED_FARMER", currentHarvestedCrops);
                    playerStats.setAchievementProgress("ACCOMPLISHED_AGRONOMIST", currentHarvestedCrops);
                    playerStats.setAchievementProgress("HARVEST_POWER", currentHarvestedCrops);

                    checkAndGrantAchievement(player, playerStats, "NOVICE_SOWER", AchievementDataConfig.getInstance().getAchievementConfig("NOVICE_SOWER"));
                    checkAndGrantAchievement(player, playerStats, "DEDICATED_FARMER", AchievementDataConfig.getInstance().getAchievementConfig("DEDICATED_FARMER"));
                    checkAndGrantAchievement(player, playerStats, "ACCOMPLISHED_AGRONOMIST", AchievementDataConfig.getInstance().getAchievementConfig("ACCOMPLISHED_AGRONOMIST"));
                    checkAndGrantAchievement(player, playerStats, "HARVEST_POWER", AchievementDataConfig.getInstance().getAchievementConfig("HARVEST_POWER"));
                }
            });
        }
    }

    // --- Living Entity Death Events ---
    /**
     * Handles entity death events for combat achievements and the "Unknown Pioneer" achievement.
     * @param event The living death event.
     */
    @SubscribeEvent // Subscribes to LivingDeathEvent
    public static void onLivingDeath(LivingDeathEvent event) {
        // Combat Achievements (Killing Hostile Mobs).
        if (event.getSource().getEntity() instanceof Player player && !player.level().isClientSide()) {
            LivingEntity deadEntity = event.getEntity();
            if (deadEntity.isDeadOrDying() && !deadEntity.isInvulnerable() && deadEntity instanceof Monster) {
                CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                    int currentKills = playerStats.getAchievementProgress("FLEDGLING_ADVOCATE") + 1;

                    playerStats.setAchievementProgress("FLEDGLING_ADVOCATE", currentKills);
                    playerStats.setAchievementProgress("CREATURE_HUNTER", currentKills);
                    playerStats.setAchievementProgress("THREATS_EXterminator", currentKills);
                    playerStats.setAchievementProgress("SHADOWS_TERROR", currentKills);
                    playerStats.setAchievementProgress("MASACRE_MASTER", currentKills);

                    checkAndGrantAchievement(player, playerStats, "FLEDGLING_ADVOCATE", AchievementDataConfig.getInstance().getAchievementConfig("FLEDGLING_ADVOCATE"));
                    checkAndGrantAchievement(player, playerStats, "CREATURE_HUNTER", AchievementDataConfig.getInstance().getAchievementConfig("CREATURE_HUNTER"));
                    checkAndGrantAchievement(player, playerStats, "THREATS_EXterminator", AchievementDataConfig.getInstance().getAchievementConfig("THREATS_EXterminator"));
                    checkAndGrantAchievement(player, playerStats, "SHADOWS_TERROR", AchievementDataConfig.getInstance().getAchievementConfig("SHADOWS_TERROR"));
                    checkAndGrantAchievement(player, playerStats, "MASACRE_MASTER", AchievementDataConfig.getInstance().getAchievementConfig("MASACRE_MASTER"));
                });
            }
        }

        // "Unknown Pioneer" Achievement (Dying in a New Dimension).
        if (event.getEntity() instanceof Player playerEntity) {
            CapabilityUtils.ifPlayerStatsPresent(playerEntity, playerStats -> {
                String pioneerAchievementKey = "UNKNOWN_PIONEER";

                if (!playerStats.isAchievementCompleted(pioneerAchievementKey)) {
                    ResourceKey<net.minecraft.world.level.Level> currentDimension = playerEntity.level().dimension();

                    boolean isNewDimensionAndDiedThere = (currentDimension == Level.NETHER || currentDimension == Level.END) &&
                            playerStats.getVisitedDimensions().contains(currentDimension);

                    if (isNewDimensionAndDiedThere) {
                        playerStats.setAchievementProgress(pioneerAchievementKey, 1);
                        checkAndGrantAchievement(playerEntity, playerStats, pioneerAchievementKey, AchievementDataConfig.getInstance().getAchievementConfig(pioneerAchievementKey));
                    }
                }
            });
        }
    }

    // --- Item Crafted Events ---
    /**
     * Handles item crafting events for crafting achievements.
     * @param event The item crafted event.
     */
    @SubscribeEvent // Subscribes to PlayerEvent.ItemCraftedEvent
    public static void onItemCrafted(PlayerEvent.ItemCraftedEvent event) {
        if (!event.getEntity().level().isClientSide()) {
            Player player = event.getEntity();
            ResourceLocation craftedItemId = ForgeRegistries.ITEMS.getKey(event.getCrafting().getItem());

            if (craftedItemId != null) {
                CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                    playerStats.addCraftedUniqueItem(craftedItemId);
                    int uniqueItemsCraftedCount = playerStats.getCraftedUniqueItems().size();

                    // Crafting Achievements.
                    playerStats.setAchievementProgress("NOVICE_CRAFTER", uniqueItemsCraftedCount);
                    playerStats.setAchievementProgress("CREATIVE_CRAFTER", uniqueItemsCraftedCount);
                    playerStats.setAchievementProgress("ARTISAN_APPRENTICE", uniqueItemsCraftedCount);
                    playerStats.setAchievementProgress("MASTER_CRAFTSMAN", uniqueItemsCraftedCount);

                    checkAndGrantAchievement(player, playerStats, "NOVICE_CRAFTER", AchievementDataConfig.getInstance().getAchievementConfig("NOVICE_CRAFTER"));
                    checkAndGrantAchievement(player, playerStats, "CREATIVE_CRAFTER", AchievementDataConfig.getInstance().getAchievementConfig("CREATIVE_CRAFTER"));
                    checkAndGrantAchievement(player, playerStats, "ARTISAN_APPRENTICE", AchievementDataConfig.getInstance().getAchievementConfig("ARTISAN_APPRENTICE"));
                    checkAndGrantAchievement(player, playerStats, "MASTER_CRAFTSMAN", AchievementDataConfig.getInstance().getAchievementConfig("MASTER_CRAFTSMAN"));
                });
            }
        }
    }

    // --- Item Smelted Events ---
    /**
     * Handles item smelting events for smelting-related achievements.
     * @param event The item smelted event.
     */
    @SubscribeEvent // Subscribes to PlayerEvent.ItemSmeltedEvent
    public static void onItemSmelted(PlayerEvent.ItemSmeltedEvent event) {
        Player player = event.getEntity();
        if (player == null || player.level().isClientSide()) {
            return;
        }

        ItemStack itemStack = event.getSmelting();
        if (itemStack.isEmpty()) {
            return;
        }

        ResourceLocation itemId = ForgeRegistries.ITEMS.getKey(itemStack.getItem());
        if (itemId == null) {
            return;
        }

        String itemIdString = itemId.toString();

        CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
            // Smelting Achievements.
            if (itemIdString.equals("minecraft:cooked_beef") || itemIdString.equals("minecraft:cooked_porkchop") ||
                    itemIdString.equals("minecraft:cooked_chicken") || itemIdString.equals("minecraft:cooked_mutton") ||
                    itemIdString.equals("minecraft:cooked_rabbit") || itemIdString.equals("minecraft:cooked_fish") ||
                    itemIdString.equals("minecraft:cooked_salmon") || itemIdString.equals("minecraft:baked_potato") ||
                    itemIdString.equals("minecraft:dried_kelp")) {

                int currentCookedItems = playerStats.getAchievementProgress("ART_KITCHEN") + itemStack.getCount();
                playerStats.setAchievementProgress("ART_KITCHEN", currentCookedItems);
                checkAndGrantAchievement(player, playerStats, "ART_KITCHEN", AchievementDataConfig.getInstance().getAchievementConfig("ART_KITCHEN"));
            }

            // "Tireless Furnace".
            int currentTotalSmeltedItems = playerStats.getAchievementProgress("TIRELESS_FURNACE") + itemStack.getCount();
            playerStats.setAchievementProgress("TIRELESS_FURNACE", currentTotalSmeltedItems);
            checkAndGrantAchievement(player, playerStats, "TIRELESS_FURNACE", AchievementDataConfig.getInstance().getAchievementConfig("TIRELESS_FURNACE"));
        });
    }

    // --- Animal Taming Events ---
    /**
     * Handles animal taming events for related achievements.
     * @param event The animal tame event.
     */
    @SubscribeEvent // Subscribes to AnimalTameEvent
    public static void onAnimalTamed(AnimalTameEvent event) {
        Player player = event.getTamer();
        if (player == null || player.level().isClientSide()) {
            return;
        }

        ResourceLocation entityId = ForgeRegistries.ENTITY_TYPES.getKey(event.getAnimal().getType());
        if (entityId == null) {
            return;
        }

        CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
            // "Beast Tamer".
            int currentTamedAnimals = playerStats.getAchievementProgress("BEAST_TAMER") + 1;
            playerStats.setAchievementProgress("BEAST_TAMER", currentTamedAnimals);
            checkAndGrantAchievement(player, playerStats, "BEAST_TAMER", AchievementDataConfig.getInstance().getAchievementConfig("BEAST_TAMER"));

            // "Tireless Shepherd".
            playerStats.addTamedAnimal(entityId);
            int uniqueTamedAnimals = playerStats.getTamedAnimals().size();
            playerStats.setAchievementProgress("TIRELESS_SHEPHERD", uniqueTamedAnimals);
            checkAndGrantAchievement(player, playerStats, "TIRELESS_SHEPHERD", AchievementDataConfig.getInstance().getAchievementConfig("TIRELESS_SHEPHERD"));
        });
    }

    // --- Helper Methods ---
    /**
     * Checks if an achievement's progress meets its threshold, then grants it and awards XP.
     * @param player The player to check and reward.
     * @param playerStats The player's stats capability.
     * @param achievementKey The achievement key.
     * @param config The achievement configuration.
     */
    private static void checkAndGrantAchievement(Player player, IPlayerStats playerStats, String achievementKey, AchievementDataConfig.AchievementConfig config) {
        if (config == null || playerStats.isAchievementCompleted(achievementKey)) {
            return;
        }

        if (playerStats.getAchievementProgress(achievementKey) >= config.threshold) {
            playerStats.setAchievementCompleted(achievementKey, true);
            grantAdvancement(player, achievementKey);
            player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                playerXP.addExperience(config.xpReward);
            });
        }
    }

    /**
     * Grants a vanilla Minecraft advancement to a player.
     * @param player The player to grant the advancement to.
     * @param achievementKey The key of the achievement.
     */
    private static void grantAdvancement(Player player, String achievementKey) {
        if (player instanceof ServerPlayer serverPlayer) {
            ResourceLocation advancementId = new ResourceLocation(BrokenPath.MOD_ID, achievementKey.toLowerCase());

            if (serverPlayer.getServer() == null) {
                BrokenPath.LOGGER.warn("Server is null for player {}. Cannot grant advancement '{}'.", serverPlayer.getName().getString(), achievementKey);
                return;
            }

            ServerAdvancementManager advancementManager = serverPlayer.getServer().getAdvancements();
            Advancement advancement = advancementManager.getAdvancement(advancementId);

            if (advancement != null) {
                AdvancementProgress progress = serverPlayer.getAdvancements().getOrStartProgress(advancement);
                if (!progress.isDone()) {
                    advancement.getCriteria().keySet().stream().findFirst().ifPresent(criteria -> {
                        serverPlayer.getAdvancements().award(advancement, criteria);
                    });
                }
            } else {
                BrokenPath.LOGGER.warn("Advancement '{}' not found for player {}. Make sure the JSON file exists and is correctly named.", achievementKey, serverPlayer.getName().getString());
            }
        }
    }
}