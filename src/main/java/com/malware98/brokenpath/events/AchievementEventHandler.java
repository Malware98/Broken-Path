package com.malware98.brokenpath.events;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.capabilities.IPlayerStats;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModBlockTags;
import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.util.CapabilityUtils;
import net.minecraft.advancements.Advancement;
import net.minecraft.advancements.AdvancementProgress;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.ServerAdvancementManager;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.stats.Stat;
import net.minecraft.stats.Stats;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.monster.Monster;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.biome.Biome;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraftforge.event.TickEvent;
import net.minecraftforge.event.entity.living.AnimalTameEvent;
import net.minecraftforge.event.entity.living.LivingDeathEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.event.level.BlockEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.registries.ForgeRegistries;

/**
 * Event handler for custom achievements and progression.
 * This class tracks player actions and progress towards various milestones,
 * granting XP and vanilla advancements upon completion.
 */
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class AchievementEventHandler {

    /**
     * Processes player tick events for time-based, movement, and biome exploration achievements.
     * Runs on the server side to ensure accurate data tracking.
     */
    @SubscribeEvent
    public static void onPlayerTick(TickEvent.PlayerTickEvent event) {
        // Only process on the server and at the end of the tick for updated data.
        if (event.phase == TickEvent.Phase.END && !event.player.level().isClientSide()) {
            Player player = event.player;

            // Retrieve player stats capability.
            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                ModConfigs configs = ModConfigs.getInstance();

                // --- Walking Achievements ---
                // Track actual walk distance from vanilla stats and convert to blocks for achievement progress.
                if (player instanceof ServerPlayer serverPlayer) {
                    Stat<ResourceLocation> walkStat = Stats.CUSTOM.get(Stats.WALK_ONE_CM);
                    int realWalkedCm = serverPlayer.getStats().getValue(walkStat);
                    int currentWalkProgress = realWalkedCm / 100; // Convert cm to blocks (100 cm = 1 block).

                    playerStats.setAchievementProgress("FIRST_STEPS", currentWalkProgress);
                    playerStats.setAchievementProgress("CONSTANT_WALKER", currentWalkProgress);
                    playerStats.setAchievementProgress("TIRELESS_TRAVELER", currentWalkProgress);

                    checkAndGrantAchievement(serverPlayer, playerStats, "FIRST_STEPS", configs.getAchievementConfig("FIRST_STEPS"));
                    checkAndGrantAchievement(serverPlayer, playerStats, "CONSTANT_WALKER", configs.getAchievementConfig("CONSTANT_WALKER"));
                    checkAndGrantAchievement(serverPlayer, playerStats, "TIRELESS_TRAVELER", configs.getAchievementConfig("TIRELESS_TRAVELER"));
                }

                // --- Survival Day Achievements ---
                // Track in-game days survived.
                long currentDays = player.level().getDayTime() / 24000L; // 24000 ticks per Minecraft day.

                playerStats.setAchievementProgress("A_WHOLE_DAY", (int) currentDays);
                playerStats.setAchievementProgress("ONE_WEEK_WORLD", (int) currentDays);
                playerStats.setAchievementProgress("IM_STILL_ALIVE", (int) currentDays);

                checkAndGrantAchievement(player, playerStats, "A_WHOLE_DAY", configs.getAchievementConfig("A_WHOLE_DAY"));
                checkAndGrantAchievement(player, playerStats, "ONE_WEEK_WORLD", configs.getAchievementConfig("ONE_WEEK_WORLD"));
                checkAndGrantAchievement(player, playerStats, "IM_STILL_ALIVE", configs.getAchievementConfig("IM_STILL_ALIVE"));

                // --- Biome Discovery Achievements ---
                ResourceKey<Biome> currentBiome = player.level().getBiome(player.blockPosition()).unwrapKey().orElse(null);
                if (currentBiome != null) {
                    // Use the player capability to add the discovered biome.
                    // The `addDiscoveredBiome()` method handles uniqueness and synchronization.
                    playerStats.addDiscoveredBiome(currentBiome);

                    // Update achievement progress based on the count of unique discovered biomes.
                    int biomesCount = playerStats.getDiscoveredBiomes().size();

                    // Check and grant specific biome achievements.
                    checkAndGrantAchievement(player, playerStats, "EXPLORER_NOVICE", configs.getAchievementConfig("EXPLORER_NOVICE"));
                    checkAndGrantAchievement(player, playerStats, "LOCAL_ADVENTURER", configs.getAchievementConfig("LOCAL_ADVENTURER"));
                    checkAndGrantAchievement(player, playerStats, "ACCOMPLISHED_CARTOGRAPHER", configs.getAchievementConfig("ACCOMPLISHED_CARTOGRAPHER"));
                }

                // --- Hunger Resistant Achievement ---
                // Awarded when the player reaches the "Starving" hunger stage (stage 3).
                if (playerStats.getHungerStage() == 3 && !playerStats.isAchievementCompleted("HUNGER_RESISTANT")) {
                    playerStats.setAchievementProgress("HUNGER_RESISTANT", 1); // Set progress to 1 as threshold is 1.
                    checkAndGrantAchievement(player, playerStats, "HUNGER_RESISTANT", configs.getAchievementConfig("HUNGER_RESISTANT"));
                }
            });
        }
    }

    /**
     * Handles achievements related to changing dimensions.
     * Tracks visited dimensions for later achievement checks, particularly for death in new dimensions.
     */
    @SubscribeEvent
    public static void onPlayerChangedDimension(PlayerEvent.PlayerChangedDimensionEvent event) {
        // Only process on the server side.
        if (!event.getEntity().level().isClientSide()) {
            Player player = event.getEntity();
            ResourceKey<net.minecraft.world.level.Level> newDimension = event.getTo(); // Get the key of the new dimension.

            // Add the new dimension to the player's visited dimensions capability.
            // This is crucial for the "UNKNOWN_PIONEER" achievement which triggers on death in a new dimension.
            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                playerStats.addVisitedDimension(newDimension);
            });
        }
    }

    /**
     * Handles block breaking events for mining and harvesting achievements.
     * Distinguishes between ores, stone blocks, and crops using custom tags.
     */
    @SubscribeEvent
    public static void onBlockBroken(BlockEvent.BreakEvent event) {
        // Only process on the server side.
        if (!event.getPlayer().level().isClientSide()) {
            Player player = event.getPlayer();
            BlockState brokenState = event.getState();

            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                ModConfigs configs = ModConfigs.getInstance();

                // --- Mining Achievements (Ores) ---
                // Uses `ModBlockTags.ORES` to categorize various ore blocks.
                if (brokenState.is(ModBlockTags.ORES)) {
                    int currentMinedOres = playerStats.getAchievementProgress("AMATEUR_EXCAVATOR") + 1;

                    playerStats.setAchievementProgress("AMATEUR_EXCAVATOR", currentMinedOres);
                    playerStats.setAchievementProgress("SKILLED_MINERALOGIST", currentMinedOres);
                    playerStats.setAchievementProgress("GEOLOGIST_EXPERT", currentMinedOres);
                    playerStats.setAchievementProgress("MINING_MASTER", currentMinedOres);

                    checkAndGrantAchievement(player, playerStats, "AMATEUR_EXCAVATOR", configs.getAchievementConfig("AMATEUR_EXCAVATOR"));
                    checkAndGrantAchievement(player, playerStats, "SKILLED_MINERALOGIST", configs.getAchievementConfig("SKILLED_MINERALOGIST"));
                    checkAndGrantAchievement(player, playerStats, "GEOLOGIST_EXPERT", configs.getAchievementConfig("GEOLOGIST_EXPERT"));
                    checkAndGrantAchievement(player, playerStats, "MINING_MASTER", configs.getAchievementConfig("MINING_MASTER"));
                }

                // --- Rock Finder Achievement ---
                // Tracks mining of general stone blocks using `ModBlockTags.STONE_BLOCKS`.
                if (!playerStats.isAchievementCompleted("ROCK_FINDER") && brokenState.is(ModBlockTags.STONE_BLOCKS)) {
                    int currentRocksMined = playerStats.getAchievementProgress("ROCK_FINDER") + 1;
                    playerStats.setAchievementProgress("ROCK_FINDER", currentRocksMined);
                    checkAndGrantAchievement(player, playerStats, "ROCK_FINDER", configs.getAchievementConfig("ROCK_FINDER"));
                }

                // --- Specific Mining Achievements ---
                // "Hidden Treasure" for diamonds, "Master Obsidian" for obsidian.
                if (!playerStats.isAchievementCompleted("HIDDEN_TREASURE") && brokenState.getBlock().equals(Blocks.DIAMOND_ORE)) {
                    int currentDiamondsMined = playerStats.getAchievementProgress("HIDDEN_TREASURE") + 1;
                    playerStats.setAchievementProgress("HIDDEN_TREASURE", currentDiamondsMined);
                    checkAndGrantAchievement(player, playerStats, "HIDDEN_TREASURE", configs.getAchievementConfig("HIDDEN_TREASURE"));
                }
                if (!playerStats.isAchievementCompleted("MASTER_OBSIDIAN") && brokenState.getBlock().equals(Blocks.OBSIDIAN)) {
                    int currentObsidianMined = playerStats.getAchievementProgress("MASTER_OBSIDIAN") + 1;
                    playerStats.setAchievementProgress("MASTER_OBSIDIAN", currentObsidianMined);
                    checkAndGrantAchievement(player, playerStats, "MASTER_OBSIDIAN", configs.getAchievementConfig("MASTER_OBSIDIAN"));
                }

                // --- Harvesting Achievements (Crops) ---
                // Uses `ModBlockTags.CROPS` for various farmable blocks.
                if (brokenState.is(ModBlockTags.CROPS)) {
                    int currentHarvestedCrops = playerStats.getAchievementProgress("NOVICE_SOWER") + 1;

                    playerStats.setAchievementProgress("NOVICE_SOWER", currentHarvestedCrops);
                    playerStats.setAchievementProgress("DEDICATED_FARMER", currentHarvestedCrops);
                    playerStats.setAchievementProgress("ACCOMPLISHED_AGRONOMIST", currentHarvestedCrops);
                    playerStats.setAchievementProgress("HARVEST_POWER", currentHarvestedCrops);

                    checkAndGrantAchievement(player, playerStats, "NOVICE_SOWER", configs.getAchievementConfig("NOVICE_SOWER"));
                    checkAndGrantAchievement(player, playerStats, "DEDICATED_FARMER", configs.getAchievementConfig("DEDICATED_FARMER"));
                    checkAndGrantAchievement(player, playerStats, "ACCOMPLISHED_AGRONOMIST", configs.getAchievementConfig("ACCOMPLISHED_AGRONOMIST"));
                    checkAndGrantAchievement(player, playerStats, "HARVEST_POWER", configs.getAchievementConfig("HARVEST_POWER"));
                }
            });
        }
    }

    /**
     * Handles entity death events for combat achievements and the "Unknown Pioneer" achievement.
     */
    @SubscribeEvent
    public static void onLivingDeath(LivingDeathEvent event) {
        // --- Combat Achievements (Killing Hostile Mobs) ---
        // Only process if the damage source is a player and on the server.
        if (event.getSource().getEntity() instanceof Player player && !player.level().isClientSide()) {
            LivingEntity deadEntity = event.getEntity();
            // Only count hostile mobs.
            if (deadEntity.isDeadOrDying() && !deadEntity.isInvulnerable() && deadEntity instanceof Monster) {
                CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                    ModConfigs configs = ModConfigs.getInstance();
                    int currentKills = playerStats.getAchievementProgress("FLEDGLING_ADVOCATE") + 1;

                    playerStats.setAchievementProgress("FLEDGLING_ADVOCATE", currentKills);
                    playerStats.setAchievementProgress("CREATURE_HUNTER", currentKills);
                    playerStats.setAchievementProgress("THREATS_EXTERMINATOR", currentKills);
                    playerStats.setAchievementProgress("SHADOWS_TERROR", currentKills);
                    playerStats.setAchievementProgress("MASACRE_MASTER", currentKills);

                    checkAndGrantAchievement(player, playerStats, "FLEDGLING_ADVOCATE", configs.getAchievementConfig("FLEDGLING_ADVOCATE"));
                    checkAndGrantAchievement(player, playerStats, "CREATURE_HUNTER", configs.getAchievementConfig("CREATURE_HUNTER"));
                    checkAndGrantAchievement(player, playerStats, "THREATS_EXTERMINATOR", configs.getAchievementConfig("THREATS_EXTERMINATOR"));
                    checkAndGrantAchievement(player, playerStats, "SHADOWS_TERROR", configs.getAchievementConfig("SHADOWS_TERROR"));
                    checkAndGrantAchievement(player, playerStats, "MASACRE_MASTER", configs.getAchievementConfig("MASACRE_MASTER"));
                });
            }
        }

        // --- "Unknown Pioneer" Achievement (Dying in a New Dimension) ---
        // This achievement is triggered upon dying in a new primary dimension (Nether/End) for the first time.
        if (event.getEntity() instanceof Player playerEntity) {
            CapabilityUtils.ifPlayerStatsPresent(playerEntity, playerStats -> {
                ModConfigs configs = ModConfigs.getInstance();
                String pioneerAchievementKey = "UNKNOWN_PIONEER";

                if (!playerStats.isAchievementCompleted(pioneerAchievementKey)) {
                    ResourceKey<net.minecraft.world.level.Level> currentDimension = playerEntity.level().dimension();

                    // Check if the current dimension is Nether or End, AND if the player had previously visited it
                    // (tracked by `addVisitedDimension` in `onPlayerChangedDimension`).
                    boolean isNewDimensionAndDiedThere = (currentDimension == Level.NETHER || currentDimension == Level.END) &&
                            playerStats.getVisitedDimensions().contains(currentDimension);

                    if (isNewDimensionAndDiedThere) {
                        playerStats.setAchievementProgress(pioneerAchievementKey, 1);
                        checkAndGrantAchievement(playerEntity, playerStats, pioneerAchievementKey, configs.getAchievementConfig(pioneerAchievementKey));
                    }
                }
            });
        }
    }

    /**
     * Handles item crafting events for crafting achievements.
     * Tracks the number of unique items crafted.
     */
    @SubscribeEvent
    public static void onItemCrafted(PlayerEvent.ItemCraftedEvent event) {
        // Only process on the server side.
        if (!event.getEntity().level().isClientSide()) {
            Player player = event.getEntity();
            ResourceLocation craftedItemId = ForgeRegistries.ITEMS.getKey(event.getCrafting().getItem());

            if (craftedItemId != null) {
                CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                    // Add the unique crafted item ID to player stats.
                    // `addCraftedUniqueItem()` handles uniqueness and synchronization.
                    playerStats.addCraftedUniqueItem(craftedItemId);

                    // Update achievement progress based on the count of unique crafted items.
                    int uniqueItemsCraftedCount = playerStats.getCraftedUniqueItems().size();

                    ModConfigs configs = ModConfigs.getInstance();

                    // --- Crafting Achievements ---
                    // "First Crafting" is a simple threshold of 1.
                    playerStats.setAchievementProgress("FIRST_CRAFTING", 1);
                    playerStats.setAchievementProgress("CREATIVE_CRAFTER", uniqueItemsCraftedCount);
                    playerStats.setAchievementProgress("ARTISAN_APPRENTICE", uniqueItemsCraftedCount);
                    playerStats.setAchievementProgress("MASTER_CRAFTSMAN", uniqueItemsCraftedCount);

                    checkAndGrantAchievement(player, playerStats, "FIRST_CRAFTING", configs.getAchievementConfig("FIRST_CRAFTING"));
                    checkAndGrantAchievement(player, playerStats, "CREATIVE_CRAFTER", configs.getAchievementConfig("CREATIVE_CRAFTER"));
                    checkAndGrantAchievement(player, playerStats, "ARTISAN_APPRENTICE", configs.getAchievementConfig("ARTISAN_APPRENTICE"));
                    checkAndGrantAchievement(player, playerStats, "MASTER_CRAFTSMAN", configs.getAchievementConfig("MASTER_CRAFTSMAN"));
                });
            }
        }
    }

    /**
     * Handles item smelting events for smelting-related achievements.
     * Tracks both edible items and total items smelted.
     */
    @SubscribeEvent
    public static void onItemSmelted(PlayerEvent.ItemSmeltedEvent event) {
        Player player = event.getEntity();
        // Only process on the server side.
        if (player == null || player.level().isClientSide()) {
            return;
        }

        ItemStack itemStack = event.getSmelting();
        if (itemStack.isEmpty()) {
            return;
        }

        ResourceLocation itemId = ForgeRegistries.ITEMS.getKey(itemStack.getItem());
        if (itemId == null) {
            return;
        }

        String itemIdString = itemId.toString();
        ModConfigs configs = ModConfigs.getInstance();

        CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
            // --- Smelting Achievements ---
            // "Art of Kitchen": Tracks smelting of edible items.
            // This checks specific item IDs, a more robust solution might use a custom ItemTag.
            if (itemIdString.equals("minecraft:cooked_beef") || itemIdString.equals("minecraft:cooked_porkchop") ||
                    itemIdString.equals("minecraft:cooked_chicken") || itemIdString.equals("minecraft:cooked_mutton") ||
                    itemIdString.equals("minecraft:cooked_rabbit") || itemIdString.equals("minecraft:cooked_fish") ||
                    itemIdString.equals("minecraft:cooked_salmon") || itemIdString.equals("minecraft:baked_potato") ||
                    itemIdString.equals("minecraft:dried_kelp")) {

                int currentCookedItems = playerStats.getAchievementProgress("ART_KITCHEN") + itemStack.getCount();
                playerStats.setAchievementProgress("ART_KITCHEN", currentCookedItems);
                checkAndGrantAchievement(player, playerStats, "ART_KITCHEN", configs.getAchievementConfig("ART_KITCHEN"));
            }

            // "Tireless Furnace": Tracks total items smelted.
            int currentTotalSmeltedItems = playerStats.getAchievementProgress("TIRELESS_FURNACE") + itemStack.getCount();
            playerStats.setAchievementProgress("TIRELESS_FURNACE", currentTotalSmeltedItems);
            checkAndGrantAchievement(player, playerStats, "TIRELESS_FURNACE", configs.getAchievementConfig("TIRELESS_FURNACE"));
        });
    }

    /**
     * Handles animal taming events for related achievements.
     * Tracks both the total number of tamed animals and the count of unique species tamed.
     */
    @SubscribeEvent
    public static void onAnimalTamed(AnimalTameEvent event) {
        Player player = event.getTamer();
        // Only process on the server side.
        if (player == null || player.level().isClientSide()) {
            return;
        }

        ResourceLocation entityId = ForgeRegistries.ENTITY_TYPES.getKey(event.getAnimal().getType());
        if (entityId == null) {
            return;
        }

        ModConfigs configs = ModConfigs.getInstance();

        CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
            // "Beast Tamer": Tracks any animal taming.
            int currentTamedAnimals = playerStats.getAchievementProgress("BEAST_TAMER") + 1;
            playerStats.setAchievementProgress("BEAST_TAMER", currentTamedAnimals);
            checkAndGrantAchievement(player, playerStats, "BEAST_TAMER", configs.getAchievementConfig("BEAST_TAMER"));

            // "Tireless Shepherd": Tracks taming of unique animal species.
            // The `addTamedAnimal()` method in PlayerStats handles uniqueness.
            playerStats.addTamedAnimal(entityId);
            int uniqueTamedAnimals = playerStats.getTamedAnimals().size();
            playerStats.setAchievementProgress("TIRELESS_SHEPHERD", uniqueTamedAnimals);
            checkAndGrantAchievement(player, playerStats, "TIRELESS_SHEPHERD", configs.getAchievementConfig("TIRELESS_SHEPHERD"));
        });
    }

    /**
     * Helper function to check achievement progress and grant rewards if thresholds are met.
     * This centralizes the logic for completing achievements across all event listeners.
     * @param player The player to check.
     * @param playerStats The player's stats capability.
     * @param achievementKey The key of the achievement to check.
     * @param config The configuration for this achievement.
     */
    private static void checkAndGrantAchievement(Player player, IPlayerStats playerStats, String achievementKey, ModConfigs.AchievementConfig config) {
        // Skip if configuration is missing or achievement is already completed.
        if (config == null || playerStats.isAchievementCompleted(achievementKey)) {
            return;
        }

        // Check if the player's current progress meets or exceeds the achievement's threshold.
        if (playerStats.getAchievementProgress(achievementKey) >= config.threshold) {
            playerStats.setAchievementCompleted(achievementKey, true); // Mark as completed.

            // Grant the corresponding vanilla Minecraft advancement.
            grantAdvancement(player, achievementKey);

            // Award XP to the player via the mod's custom XP system.
            player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                playerXP.addExperience(config.xpReward);
            });
        }
    }

    /**
     * Grants a vanilla Minecraft advancement to a player.
     * This links the mod's custom achievements to the game's built-in advancement system.
     * @param player The player to grant the advancement to.
     * @param achievementKey The key of the achievement (used to derive the advancement ID).
     */
    private static void grantAdvancement(Player player, String achievementKey) {
        // Only grant advancements on the server side.
        if (player instanceof ServerPlayer serverPlayer) {
            ResourceLocation advancementId = new ResourceLocation(BrokenPath.MOD_ID, achievementKey.toLowerCase());

            // Ensure the server instance is available.
            if (serverPlayer.getServer() == null) {
                BrokenPath.LOGGER.warn("Server is null for player {}. Cannot grant advancement '{}'.", serverPlayer.getName().getString(), achievementKey);
                return;
            }

            ServerAdvancementManager advancementManager = serverPlayer.getServer().getAdvancements();
            Advancement advancement = advancementManager.getAdvancement(advancementId);

            if (advancement != null) {
                AdvancementProgress progress = serverPlayer.getAdvancements().getOrStartProgress(advancement);
                if (!progress.isDone()) {
                    // Award the advancement. For achievements with "minecraft:impossible" trigger,
                    // awarding any criterion (often "always_true") completes it.
                    advancement.getCriteria().keySet().stream().findFirst().ifPresent(criteria -> {
                        serverPlayer.getAdvancements().award(advancement, criteria);
                        BrokenPath.LOGGER.info("Advancement '{}' granted to player {}", achievementKey, serverPlayer.getName().getString());
                    });
                }
            } else {
                BrokenPath.LOGGER.warn("Advancement '{}' not found for player {}. Make sure the JSON file exists and is correctly named in data/{}/advancements/.", achievementKey, serverPlayer.getName().getString(), BrokenPath.MOD_ID);
            }
        }
    }
}