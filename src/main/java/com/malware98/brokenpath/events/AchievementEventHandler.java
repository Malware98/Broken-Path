package com.malware98.brokenpath.events;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.capabilities.IPlayerStats;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModBlockTags; // Importar la nueva clase de tags
import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.util.CapabilityUtils;
import net.minecraft.advancements.Advancement;
import net.minecraft.advancements.AdvancementProgress;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.ServerAdvancementManager;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.stats.Stat;
import net.minecraft.stats.Stats;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.monster.Monster;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.biome.Biome;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraftforge.event.TickEvent;
import net.minecraftforge.event.entity.living.AnimalTameEvent;
import net.minecraftforge.event.entity.living.LivingDeathEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.event.level.BlockEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.registries.ForgeRegistries;

// Suscribimos esta clase al bus de eventos de Forge
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class AchievementEventHandler {

    // Este proceso se ejecuta en cada tick del jugador.
    // Lo usamos para hitos basados en tiempo, movimiento (simulado), o exploración pasiva de biomas
    @SubscribeEvent
    public static void onPlayerTick(TickEvent.PlayerTickEvent event) {
        // Solo procesamos en el lado del servidor y al final del tick para asegurar que los datos estén actualizados
        if (event.phase == TickEvent.Phase.END && !event.player.level().isClientSide()) {
            Player player = event.player; // 'player' es de tipo Player

            // Intentamos obtener la capacidad de estadísticas del jugador
            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                ModConfigs configs = ModConfigs.getInstance();

                // --- Hitos de Caminar ---
                String firstStepsKey = "FIRST_STEPS";
                String constantWalkerKey = "CONSTANT_WALKER";
                String tirelessTravelerKey = "TIRELESS_TRAVELER";

                if (player instanceof ServerPlayer serverPlayer) {
                    Stat<ResourceLocation> walkStat = Stats.CUSTOM.get(Stats.WALK_ONE_CM);
                    int realWalkedCm = serverPlayer.getStats().getValue(walkStat);

                    int currentWalkProgress = realWalkedCm / 100; // Convertir cm a bloques

                    playerStats.setAchievementProgress(firstStepsKey, currentWalkProgress);
                    playerStats.setAchievementProgress(constantWalkerKey, currentWalkProgress);
                    playerStats.setAchievementProgress(tirelessTravelerKey, currentWalkProgress);

                    checkAndGrantAchievement(serverPlayer, playerStats, firstStepsKey, configs.getAchievementConfig(firstStepsKey));
                    checkAndGrantAchievement(serverPlayer, playerStats, constantWalkerKey, configs.getAchievementConfig(constantWalkerKey));
                    checkAndGrantAchievement(serverPlayer, playerStats, tirelessTravelerKey, configs.getAchievementConfig(tirelessTravelerKey));
                }

                // --- Hitos de Supervivencia por Días ---
                String aWholeDayKey = "A_WHOLE_DAY";
                String oneWeekWorldKey = "ONE_WEEK_WORLD";
                String imStillAliveKey = "IM_STILL_ALIVE";

                // Minecraft tiene 24000 ticks por día.
                long currentDays = player.level().getDayTime() / 24000L;

                playerStats.setAchievementProgress(aWholeDayKey, (int) currentDays);
                playerStats.setAchievementProgress(oneWeekWorldKey, (int) currentDays);
                playerStats.setAchievementProgress(imStillAliveKey, (int) currentDays);

                checkAndGrantAchievement(player, playerStats, aWholeDayKey, configs.getAchievementConfig(aWholeDayKey));
                checkAndGrantAchievement(player, playerStats, oneWeekWorldKey, configs.getAchievementConfig(oneWeekWorldKey));
                checkAndGrantAchievement(player, playerStats, imStillAliveKey, configs.getAchievementConfig(imStillAliveKey));

                // --- Hito: Descubrir Biomas ---
                ResourceKey<Biome> currentBiome = player.level().getBiome(player.blockPosition()).unwrapKey().orElse(null);
                if (currentBiome != null) {
                    // Usar la capacidad del jugador para añadir el bioma.
                    // El proceso addDiscoveredBiome() ya maneja si es nuevo y la sincronización.
                    playerStats.addDiscoveredBiome(currentBiome);

                    // Obtener el conteo actual de biomas descubiertos desde la capacidad.
                    int biomesCount = playerStats.getDiscoveredBiomes().size();

                    // Hito: Explorador Novato
                    String explorerNoviceKey = "EXPLORER_NOVICE";
                    if (!playerStats.isAchievementCompleted(explorerNoviceKey)) {
                        playerStats.setAchievementProgress(explorerNoviceKey, biomesCount);
                        checkAndGrantAchievement(player, playerStats, explorerNoviceKey, configs.getAchievementConfig(explorerNoviceKey));
                    }

                    // Hito: Aventurero Local
                    String localAdventurerKey = "LOCAL_ADVENTURER";
                    if (!playerStats.isAchievementCompleted(localAdventurerKey)) {
                        playerStats.setAchievementProgress(localAdventurerKey, biomesCount);
                        checkAndGrantAchievement(player, playerStats, localAdventurerKey, configs.getAchievementConfig(localAdventurerKey));
                    }

                    // Hito: Cartógrafo Consumado
                    String accomplishedCartographerKey = "ACCOMPLISHED_CARTOGRAPHER";
                    if (!playerStats.isAchievementCompleted(accomplishedCartographerKey)) {
                        playerStats.setAchievementProgress(accomplishedCartographerKey, biomesCount);
                        checkAndGrantAchievement(player, playerStats, accomplishedCartographerKey, configs.getAchievementConfig(accomplishedCartographerKey));
                    }
                }

                // --- Hito: Resistente al Hambre ---
                int newHungerStage = playerStats.getHungerStage(); // Obtener la etapa de hambre actual
                String hungerResistantKey = "HUNGER_RESISTANT";
                if (newHungerStage == 3 && !playerStats.isAchievementCompleted(hungerResistantKey)) { // Si está en la etapa de "Famélico"
                    // Como el umbral es 1, solo necesitamos verificar si se cumple la condición una vez.
                    // Marcamos el progreso como 1 si el jugador llega a esta etapa.
                    playerStats.setAchievementProgress(hungerResistantKey, 1);
                    checkAndGrantAchievement(player, playerStats, hungerResistantKey, configs.getAchievementConfig(hungerResistantKey));
                }
            });
        }
    }

    //Maneja el evento cuando un jugador cambia de dimensión (ej. Overworld -> Nether -> End).
    @SubscribeEvent
    public static void onPlayerChangedDimension(PlayerEvent.PlayerChangedDimensionEvent event) {
        // Solo procesamos en el lado del servidor.
        if (!event.getEntity().level().isClientSide()) {
            Player player = event.getEntity();
            ResourceKey<net.minecraft.world.level.Level> newDimension = event.getTo(); // Obtiene la clave de la nueva dimensión

            // Intentamos obtener la capacidad de estadísticas del jugador.
            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                // Añadimos la nueva dimensión a la capacidad del jugador.
                // El proceso addVisitedDimension() dentro de PlayerStats ya comprueba si es nueva y llama a sync().
                playerStats.addVisitedDimension(newDimension);
                // La lógica del logro "UNKNOWN_PIONEER" se manejará en onLivingDeath.
            });
        }
    }

    // Maneja el evento cuando un jugador rompe un bloque. Usado para hitos de minería y cosecha.
    @SubscribeEvent
    public static void onBlockBroken(BlockEvent.BreakEvent event) {
        // Solo procesamos en el lado del servidor.
        if (!event.getPlayer().level().isClientSide()) {
            Player player = event.getPlayer();
            BlockState brokenState = event.getState();
            Block brokenBlock = brokenState.getBlock();

            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                ModConfigs configs = ModConfigs.getInstance();

                // --- Hitos de Minería (Minerales) ---
                // Usando el tag ModBlockTags. ORES para clasificar los minerales.
                if (brokenState.is(ModBlockTags.ORES)) {
                    String amateurExcavatorKey = "AMATEUR_EXCAVATOR";
                    String skilledMineralogistKey = "SKILLED_MINERALOGIST";
                    String geologistExpertKey = "GEOLOGIST_EXPERT";
                    String miningMasterKey = "MINING_MASTER";

                    int currentMinedOres = playerStats.getAchievementProgress(amateurExcavatorKey) + 1; // Usamos la misma base de progreso

                    playerStats.setAchievementProgress(amateurExcavatorKey, currentMinedOres);
                    playerStats.setAchievementProgress(skilledMineralogistKey, currentMinedOres);
                    playerStats.setAchievementProgress(geologistExpertKey, currentMinedOres);
                    playerStats.setAchievementProgress(miningMasterKey, currentMinedOres);

                    checkAndGrantAchievement(player, playerStats, amateurExcavatorKey, configs.getAchievementConfig(amateurExcavatorKey));
                    checkAndGrantAchievement(player, playerStats, skilledMineralogistKey, configs.getAchievementConfig(skilledMineralogistKey));
                    checkAndGrantAchievement(player, playerStats, geologistExpertKey, configs.getAchievementConfig(geologistExpertKey));
                    checkAndGrantAchievement(player, playerStats, miningMasterKey, configs.getAchievementConfig(miningMasterKey));
                }

                // Hito: Buscador de Rocas
                String rockFinderKey = "ROCK_FINDER";
                // Usando el tag ModBlockTags.STONE_BLOCKS (o Blocks.STONE si prefieres)
                if (!playerStats.isAchievementCompleted(rockFinderKey) && brokenState.is(ModBlockTags.STONE_BLOCKS)) {
                    int currentRocksMined = playerStats.getAchievementProgress(rockFinderKey) + 1;
                    playerStats.setAchievementProgress(rockFinderKey, currentRocksMined);
                    checkAndGrantAchievement(player, playerStats, rockFinderKey, configs.getAchievementConfig(rockFinderKey));
                }

                // Hito: Tesoro Escondido (Minar 50 diamantes)
                String hiddenTreasureKey = "HIDDEN_TREASURE";
                if (!playerStats.isAchievementCompleted(hiddenTreasureKey) && brokenBlock.equals(Blocks.DIAMOND_ORE)) {
                    int currentDiamondsMined = playerStats.getAchievementProgress(hiddenTreasureKey) + 1;
                    playerStats.setAchievementProgress(hiddenTreasureKey, currentDiamondsMined);
                    checkAndGrantAchievement(player, playerStats, hiddenTreasureKey, configs.getAchievementConfig(hiddenTreasureKey));
                }

                // Hito: Maestro de la Obsidiana (Minar 20 obsidiana)
                String masterObsidianKey = "MASTER_OBSIDIAN";
                if (!playerStats.isAchievementCompleted(masterObsidianKey) && brokenBlock.equals(Blocks.OBSIDIAN)) {
                    int currentObsidianMined = playerStats.getAchievementProgress(masterObsidianKey) + 1;
                    playerStats.setAchievementProgress(masterObsidianKey, currentObsidianMined);
                    checkAndGrantAchievement(player, playerStats, masterObsidianKey, configs.getAchievementConfig(masterObsidianKey));
                }

                // --- Hitos de Cosecha (Cultivos) ---
                // Usando el tag ModBlockTags.CROPS para clasificar los cultivos.
                if (brokenState.is(ModBlockTags.CROPS)) {
                    String noviceSowerKey = "NOVICE_SOWER";
                    String dedicatedFarmerKey = "DEDICATED_FARMER";
                    String accomplishedAgronomistKey = "ACCOMPLISHED_AGRONOMIST";
                    String harvestPowerKey = "HARVEST_POWER";

                    int currentHarvestedCrops = playerStats.getAchievementProgress(noviceSowerKey) + 1; // Usa la misma base de progreso

                    playerStats.setAchievementProgress(noviceSowerKey, currentHarvestedCrops);
                    playerStats.setAchievementProgress(dedicatedFarmerKey, currentHarvestedCrops);
                    playerStats.setAchievementProgress(accomplishedAgronomistKey, currentHarvestedCrops);
                    playerStats.setAchievementProgress(harvestPowerKey, currentHarvestedCrops);

                    checkAndGrantAchievement(player, playerStats, noviceSowerKey, configs.getAchievementConfig(noviceSowerKey));
                    checkAndGrantAchievement(player, playerStats, dedicatedFarmerKey, configs.getAchievementConfig(dedicatedFarmerKey));
                    checkAndGrantAchievement(player, playerStats, accomplishedAgronomistKey, configs.getAchievementConfig(accomplishedAgronomistKey));
                    checkAndGrantAchievement(player, playerStats, harvestPowerKey, configs.getAchievementConfig(harvestPowerKey));
                }
            });
        }
    }

    //Maneja el evento cuando un jugador derrota a una entidad.
    @SubscribeEvent
    public static void onLivingDeath(LivingDeathEvent event) {
        // Solo procesamos si la fuente del daño es un jugador y estamos en el servidor.
        if (event.getSource().getEntity() instanceof Player player && !player.level().isClientSide()) {
            LivingEntity deadEntity = event.getEntity();

            // Solo contamos mobs hostiles (LivingEntity.isMonster() o puedes usar tags de entidades).
            if (deadEntity.isDeadOrDying() && !deadEntity.isInvulnerable() && deadEntity instanceof Monster) {
                CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                    ModConfigs configs = ModConfigs.getInstance();

                    // --- Hitos de Combate (Matar Mobs Hostiles) ---
                    String fledglingAdvocateKey = "FLEDGLING_ADVOCATE";
                    String creatureHunterKey = "CREATURE_HUNTER";
                    String threatsExterminatorKey = "THREATS_EXTERMINATOR";
                    String shadowsTerrorKey = "SHADOWS_TERROR";
                    String masacreMasterKey = "MASACRE_MASTER";

                    int currentKills = playerStats.getAchievementProgress(fledglingAdvocateKey) + 1;

                    playerStats.setAchievementProgress(fledglingAdvocateKey, currentKills);
                    playerStats.setAchievementProgress(creatureHunterKey, currentKills);
                    playerStats.setAchievementProgress(threatsExterminatorKey, currentKills);
                    playerStats.setAchievementProgress(shadowsTerrorKey, currentKills);
                    playerStats.setAchievementProgress(masacreMasterKey, currentKills);

                    checkAndGrantAchievement(player, playerStats, fledglingAdvocateKey, configs.getAchievementConfig(fledglingAdvocateKey));
                    checkAndGrantAchievement(player, playerStats, creatureHunterKey, configs.getAchievementConfig(creatureHunterKey));
                    checkAndGrantAchievement(player, playerStats, threatsExterminatorKey, configs.getAchievementConfig(threatsExterminatorKey));
                    checkAndGrantAchievement(player, playerStats, shadowsTerrorKey, configs.getAchievementConfig(shadowsTerrorKey));
                    checkAndGrantAchievement(player, playerStats, masacreMasterKey, configs.getAchievementConfig(masacreMasterKey));
                });
            }
        }

        // Lógica para el hito "Pionero de lo Desconocido"
        if (event.getEntity() instanceof Player playerEntity) { // Usar playerEntity para evitar confusión con el Player de getSource()
            CapabilityUtils.ifPlayerStatsPresent(playerEntity, playerStats -> {
                ModConfigs configs = ModConfigs.getInstance();
                String pioneerAchievementKey = "UNKNOWN_PIONEER";

                // Comprobamos si el logro ya está completado.
                if (!playerStats.isAchievementCompleted(pioneerAchievementKey)) {
                    ResourceKey<net.minecraft.world.level.Level> currentDimension = playerEntity.level().dimension();

                    // Verificamos si la dimensión actual es una dimensión principal (Nether o End)
                    // y si el jugador la visitó previamente (registrado en visitedDimensions) y murió en ella.
                    boolean isNewDimensionAndDiedThere = (currentDimension == Level.NETHER || currentDimension == Level.END) &&
                            playerStats.getVisitedDimensions().contains(currentDimension);

                    // Si murió en una nueva dimensión principal por primera vez, otorgamos el logro.
                    if (isNewDimensionAndDiedThere) {
                        playerStats.setAchievementProgress(pioneerAchievementKey, 1);
                        checkAndGrantAchievement(playerEntity, playerStats, pioneerAchievementKey, configs.getAchievementConfig(pioneerAchievementKey));
                    }
                }
            });
        }
    }

    //Maneja el evento cuando un jugador craftea un ítem.
    @SubscribeEvent
    public static void onItemCrafted(PlayerEvent.ItemCraftedEvent event) {
        // Solo procesamos en el lado del servidor.
        if (!event.getEntity().level().isClientSide()) {
            Player player = event.getEntity();
            ResourceLocation craftedItemId = ForgeRegistries.ITEMS.getKey(event.getCrafting().getItem());

            if (craftedItemId != null) {
                CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                    // Usar la capacidad del jugador para añadir el ítem crafteado único.
                    // El proceso addCraftedUniqueItem() ya maneja si es nuevo y la sincronización.
                    playerStats.addCraftedUniqueItem(craftedItemId);

                    // Obtenemos el conteo actual de ítems únicos crafteados desde la capacidad.
                    int uniqueItemsCraftedCount = playerStats.getCraftedUniqueItems().size();

                    ModConfigs configs = ModConfigs.getInstance();

                    // --- Hitos de Crafteo ---
                    String firstCraftingKey = "FIRST_CRAFTING"; // Umbral 1 para el primer crafteo de cualquier tipo
                    String creativeCrafterKey = "CREATIVE_CRAFTER";
                    String artisanApprenticeKey = "ARTISAN_APPRENTICE";
                    String masterCraftsmanKey = "MASTER_CRAFTSMAN";

                    // Para el primer crafteo, solo necesitamos que sea 1.
                    // Para el resto, actualizamos con el conteo de ítems únicos.
                    playerStats.setAchievementProgress(firstCraftingKey, 1); // Siempre 1 si se craftea algo
                    playerStats.setAchievementProgress(creativeCrafterKey, uniqueItemsCraftedCount);
                    playerStats.setAchievementProgress(artisanApprenticeKey, uniqueItemsCraftedCount);
                    playerStats.setAchievementProgress(masterCraftsmanKey, uniqueItemsCraftedCount);

                    checkAndGrantAchievement(player, playerStats, firstCraftingKey, configs.getAchievementConfig(firstCraftingKey));
                    checkAndGrantAchievement(player, playerStats, creativeCrafterKey, configs.getAchievementConfig(creativeCrafterKey));
                    checkAndGrantAchievement(player, playerStats, artisanApprenticeKey, configs.getAchievementConfig(artisanApprenticeKey));
                    checkAndGrantAchievement(player, playerStats, masterCraftsmanKey, configs.getAchievementConfig(masterCraftsmanKey));
                });
            }
        }
    }

    // Maneja el evento cuando un jugador funde un ítem en un horno para los logros de fundición.
    @SubscribeEvent
    public static void onItemSmelted(PlayerEvent.ItemSmeltedEvent event) {
        Player player = event.getEntity();

        // Esta lógica solo debe ejecutarse en el servidor.
        if (player == null || player.level().isClientSide()) {
            return;
        }

        ItemStack itemStack = event.getSmelting();
        if (itemStack.isEmpty()) {
            return;
        }

        // Obtiene el ID único del ítem fundido para identificarlo.
        ResourceLocation itemId = ForgeRegistries.ITEMS.getKey(itemStack.getItem());
        if (itemId == null) {
            return;
        }

        String itemIdString = itemId.toString();
        ModConfigs configs = ModConfigs.getInstance();

        CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
            // --- Lógica de Hitos de Fundición ---
            String artKitchenKey = "ART_KITCHEN";
            String tirelessFurnaceKey = "TIRELESS_FURNACE";

            // Hito: El Arte de la Cocina (Funde 50 ítems comestibles)
            // Para esto, también podrías crear un ItemTag: brokenpath:edible_smeltables
            if (itemIdString.equals("minecraft:cooked_beef") || itemIdString.equals("minecraft:cooked_porkchop") ||
                    itemIdString.equals("minecraft:cooked_chicken") || itemIdString.equals("minecraft:cooked_mutton") ||
                    itemIdString.equals("minecraft:cooked_rabbit") || itemIdString.equals("minecraft:cooked_fish") ||
                    itemIdString.equals("minecraft:cooked_salmon") || itemIdString.equals("minecraft:baked_potato") ||
                    itemIdString.equals("minecraft:dried_kelp")) {

                int currentCookedItems = playerStats.getAchievementProgress(artKitchenKey) + itemStack.getCount(); // Suma la cantidad fundida
                playerStats.setAchievementProgress(artKitchenKey, currentCookedItems);
                checkAndGrantAchievement(player, playerStats, artKitchenKey, configs.getAchievementConfig(artKitchenKey));
            }

            // Hito: Horno Incansable (Funde 200 ítems en total)
            int currentTotalSmeltedItems = playerStats.getAchievementProgress(tirelessFurnaceKey) + itemStack.getCount(); // Suma la cantidad fundida
            playerStats.setAchievementProgress(tirelessFurnaceKey, currentTotalSmeltedItems);
            checkAndGrantAchievement(player, playerStats, tirelessFurnaceKey, configs.getAchievementConfig(tirelessFurnaceKey));
        });
    }

    // Maneja la domesticación de animales para los logros.
    @SubscribeEvent
    public static void onAnimalTamed(AnimalTameEvent event) {
        Player player = event.getTamer();
        if (player == null || player.level().isClientSide()) {
            return;
        }

        ResourceLocation entityId = ForgeRegistries.ENTITY_TYPES.getKey(event.getAnimal().getType());
        if (entityId == null) {
            return;
        }

        ModConfigs configs = ModConfigs.getInstance();

        CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
            // Hito: Domador de Bestias (Tamea 3 animales - cualquier tipo)
            String beastTamerKey = "BEAST_TAMER";
            int currentTamedAnimals = playerStats.getAchievementProgress(beastTamerKey) + 1;
            playerStats.setAchievementProgress(beastTamerKey, currentTamedAnimals);
            checkAndGrantAchievement(player, playerStats, beastTamerKey, configs.getAchievementConfig(beastTamerKey));

            // Hito: Pastor Incansable (Tamea 10 animales diferentes)
            String tirelessShepherdKey = "TIRELESS_SHEPHERD";
            playerStats.addTamedAnimal(entityId); // Este método ya fue añadido en IPlayerStats y PlayerStats
            int uniqueTamedAnimals = playerStats.getTamedAnimals().size();
            playerStats.setAchievementProgress(tirelessShepherdKey, uniqueTamedAnimals);
            checkAndGrantAchievement(player, playerStats, tirelessShepherdKey, configs.getAchievementConfig(tirelessShepherdKey));
        });
    }

    // Función auxiliar para comprobar si un hito se ha alcanzado y otorgar la XP.
    private static void checkAndGrantAchievement(Player player, IPlayerStats playerStats, String achievementKey, ModConfigs.AchievementConfig config) {
        // Si la configuración para este hito no existe, o el hito ya está completado, no hacemos nada.
        if (config == null || playerStats.isAchievementCompleted(achievementKey)) {
            return;
        }

        // Si el progreso actual del jugador es igual o superior al umbral requerido.
        if (playerStats.getAchievementProgress(achievementKey) >= config.threshold) {
            playerStats.setAchievementCompleted(achievementKey, true); // Marcamos el hito como completado.

            // Otorga el Advancement de Minecraft.
            grantAdvancement(player, achievementKey);

            // Otorgamos la XP al jugador usando su capacidad de XP.
            player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                playerXP.addExperience(config.xpReward);
            });
        }
    }

    // Función para otorgar un Advancement de Minecraft
    private static void grantAdvancement(Player player, String achievementKey) {
        if (player instanceof ServerPlayer serverPlayer) {
            ResourceLocation advancementId = new ResourceLocation(BrokenPath.MOD_ID, achievementKey.toLowerCase());

            // Verificación para serverPlayer.getServer() para evitar NullPointerException.
            if (serverPlayer.getServer() == null) {
                BrokenPath.LOGGER.warn("Server is null for player {}. Cannot grant advancement '{}'.", serverPlayer.getName().getString(), achievementKey);
                return;
            }

            ServerAdvancementManager advancementManager = serverPlayer.getServer().getAdvancements();
            Advancement advancement = advancementManager.getAdvancement(advancementId);

            if (advancement != null) {
                AdvancementProgress progress = serverPlayer.getAdvancements().getOrStartProgress(advancement);
                if (!progress.isDone()) {
                    // Obtén el primer criterio disponible (asumimos que solo hay uno, "always_true")
                    // Esto completará el advancement
                    advancement.getCriteria().keySet().stream().findFirst().ifPresent(criteria -> {
                        serverPlayer.getAdvancements().award(advancement, criteria);
                        BrokenPath.LOGGER.info("Advancement '{}' granted to player {}", achievementKey, serverPlayer.getName().getString());
                    });
                }
            } else {
                BrokenPath.LOGGER.warn("Advancement '{}' not found for player {}. Make sure the JSON file exists and is correctly named.", achievementKey, serverPlayer.getName().getString());
            }
        }
    }
}