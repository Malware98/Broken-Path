package com.malware98.brokenpath.events;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.capabilities.IPlayerXP;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.level.block.Blocks;
import net.minecraftforge.event.entity.living.LivingExperienceDropEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.event.level.BlockEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;


 //Clase para manejar eventos relacionados con la capacidad de XP del jugador.
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID)
public class PlayerXPEvents {

    //Sincroniza la XP y el nivel del jugador al iniciar sesión en el servidor.
    @SubscribeEvent
    public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event) {
        if (!event.getEntity().level().isClientSide()) {
            event.getEntity().getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(IPlayerXP::sync);
        }
    }

    //Intercepta la XP que una LivingEntity soltaría al morir y la redirige a nuestro sistema.
    @SubscribeEvent
    public static void onLivingExperienceDrop(LivingExperienceDropEvent event) {
        Player player = event.getAttackingPlayer();
        if (player != null && !player.level().isClientSide()) {
            int originalXP = event.getOriginalExperience();

            if (originalXP > 0) {
                player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                    boolean leveledUp = playerXP.addExperience(originalXP);
                });
            }
            event.setDroppedExperience(0); // Asegurarse de que el orbe de XP vanilla no caiga
        }
    }


     //Intercepta la XP de los bloques al ser minados por un jugador.
    @SubscribeEvent
    public static void onBlockBroken(BlockEvent.BreakEvent event) {
        Player player = event.getPlayer();
        if (player != null && !player.level().isClientSide()) {
            int vanillaExpToDrop = event.getExpToDrop();
            final int finalXpToAward;

            if (event.getState().is(Blocks.SPAWNER)) {
                finalXpToAward = 50;
            } else {
                finalXpToAward = vanillaExpToDrop;
            }

            if (finalXpToAward > 0) {
                player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                    boolean leveledUp = playerXP.addExperience(finalXpToAward);
                });
            }
            event.setExpToDrop(0); // Asegurarse de que el orbe de XP vanilla no caiga
        }
    }
}