package com.malware98.brokenpath.events;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.capabilities.IPlayerXP;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.ExperienceOrb;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.event.entity.player.PlayerXpEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.registries.ForgeRegistries;

/*
 * Clase para manejar eventos relacionados con la capacidad de XP del jugador.
 * Incluye lógica para la sincronización de XP al iniciar sesión, la recolección de orbes
 * y la obtención de XP por fundición de ítems.
 */
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID)
public class PlayerXPEvents {

    // --- Oyentes de eventos de jugador ---

    // Sincroniza la XP y el nivel del jugador al iniciar sesión en el servidor.
    @SubscribeEvent
    public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event) {
        // Asegura que la lógica solo se ejecute en el lado del servidor.
        if (!event.getEntity().level().isClientSide()) {
            event.getEntity().getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(IPlayerXP::sync);
        }
    }

    // Maneja la recolección de orbes de experiencia por parte del jugador.
    @SubscribeEvent
    public static void onPlayerPickupXP(PlayerXpEvent.PickupXp event) {
        Player player = event.getEntity();
        // Solo procesa en el servidor y si el jugador no es nulo.
        if (player == null || player.level().isClientSide()) {
            return;
        }

        ExperienceOrb orb = event.getOrb();
        if (orb == null) {
            return;
        }

        int orbValue = orb.getValue();

        if (orbValue > 0) {
            // Añade la experiencia del orbe al sistema de XP personalizado del mod.
            player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                playerXP.addExperience(orbValue);
            });
        }
    }

    // Otorga XP al jugador cuando funde un ítem en un horno.
    @SubscribeEvent
    public static void onItemSmelted(PlayerEvent.ItemSmeltedEvent event) {
        Player player = event.getEntity();

        // Esta lógica solo debe ejecutarse en el servidor.
        if (player == null || player.level().isClientSide()) {
            return;
        }

        ItemStack itemStack = event.getSmelting();
        if (itemStack.isEmpty()) {
            return;
        }

        // Obtiene el ID único del ítem fundido para identificarlo.
        ResourceLocation itemId = ForgeRegistries.ITEMS.getKey(itemStack.getItem());
        if (itemId == null) {
            return;
        }

        String itemIdString = itemId.toString();
        ModConfigs configs = ModConfigs.getInstance();

        // Mueve la declaración de xpToAward fuera del bloque if-else
        int xpToAward; // ¡Declaración aquí!

        // Verifica si existe una recompensa de XP definida en las configuraciones para este ítem.
        if (configs.smeltingXpRewards.containsKey(itemIdString)) {
            xpToAward = configs.smeltingXpRewards.get(itemIdString);
        } else {
            xpToAward = configs.defaultSmeltingXp;
        }

        if (xpToAward > 0) {
            // Obtiene la capacidad de XP personalizada del jugador y suma la XP configurada.
            player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                playerXP.addExperience(xpToAward); // Suma la XP al sistema.
            });
        }
    }
}