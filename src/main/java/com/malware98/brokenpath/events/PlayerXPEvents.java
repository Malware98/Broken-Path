package com.malware98.brokenpath.events;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.capabilities.IPlayerXP;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.sounds.SoundEvents;
import net.minecraft.sounds.SoundSource;
import net.minecraft.world.entity.ExperienceOrb;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.block.Blocks;
import net.minecraftforge.event.entity.living.LivingExperienceDropEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.event.entity.player.PlayerXpEvent;
import net.minecraftforge.event.level.BlockEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.registries.ForgeRegistries;


//Clase para manejar eventos relacionados con la capacidad de XP del jugador.
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID)
public class PlayerXPEvents {

    //Sincroniza la XP y el nivel del jugador al iniciar sesión en el servidor.
    @SubscribeEvent
    public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event) {
        if (!event.getEntity().level().isClientSide()) {
            event.getEntity().getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(IPlayerXP::sync);
        }
    }

     @SubscribeEvent
     public static void onPlayerPickupXP(PlayerXpEvent.PickupXp event) {
         Player player = event.getEntity();
         if (player == null || player.level().isClientSide()) {
             return; // Solo procesar en el servidor
         }

         ExperienceOrb orb = event.getOrb();
         if (orb == null) {
             return;
         }

         int orbValue = orb.getValue();

         if (orbValue > 0) {
             // Añadir la experiencia del orbe al sistema de XP personalizado del mod
             player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                 playerXP.addExperience(orbValue);
             });
         }
     }

    @SubscribeEvent
    public static void onItemSmelted(PlayerEvent.ItemSmeltedEvent event) {
        Player player = event.getEntity(); // Obtiene el jugador que realizó la acción

        // Esta lógica solo debe ejecutarse en el servidor.
        if (player == null || player.level().isClientSide()) {
            return; // No hacer nada si es el cliente o si el jugador es nulo
        }

        ItemStack itemStack = event.getSmelting();
        if (itemStack.isEmpty()) {
            return; // No hacer nada si el ItemStack está vacío
        }

        // Obtener el ID único del ítem
        // Esto nos permite identificar qué ítem se fundió.
        ResourceLocation itemId = ForgeRegistries.ITEMS.getKey(itemStack.getItem());
        if (itemId == null) {
            return;
        }

        String itemIdString = itemId.toString();
        ModConfigs configs = ModConfigs.getInstance();

        // Verifica si en tus configuraciones (ModConfigs) has definido una recompensa de XP
        // para este ítem específico que se fundió.
        if (configs.smeltingXpRewards.containsKey(itemIdString)) {
            int xpToAward = configs.smeltingXpRewards.get(itemIdString); // Obtiene la cantidad de XP a otorgar

            if (xpToAward > 0) {
                // Si hay una recompensa de XP definida y es mayor que cero:
                // 1. Obtener la capacidad de XP personalizada del jugador.
                // 2. Añadir la cantidad de XP configurada a la XP personalizada del jugador.
                player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                    playerXP.addExperience(xpToAward); // Suma la XP a tu sistema

                });
            }
        }
    }
}