// PlayerXPEvents.java
package com.malware98.brokenpath.events;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.capabilities.IPlayerXP;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.config.XpDataConfig;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.ExperienceOrb;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.event.entity.player.PlayerXpEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.registries.ForgeRegistries;

/**
 * // Handles events related to the player's custom XP capability.
 * // Includes logic for XP synchronization on login, orb pickup,
 * // and XP gain from smelting items.
 */
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID)
public class PlayerXPEvents {

    // // --- Player Event Listeners ---

    /**
     * // Synchronizes player XP and level when a player logs into the server.
     * // Ensures the client has the most up-to-date XP data.
     * @param event The PlayerLoggedInEvent.
     */
    @SubscribeEvent
    public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event) {
        // Only process on the server-side to ensure data consistency.
        if (!event.getEntity().level().isClientSide()) {
            event.getEntity().getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(IPlayerXP::sync);
        }
    }

    /**
     * // Handles the collection of experience orbs by the player.
     * // Adds the orb's value to the mod's custom XP system.
     * @param event The PlayerXpEvent.PickupXp event.
     */
    @SubscribeEvent
    public static void onPlayerPickupXP(PlayerXpEvent.PickupXp event) {
        Player player = event.getEntity();
        // Only process on the server and if the player/orb are valid.
        if (player == null || player.level().isClientSide()) {
            return;
        }

        ExperienceOrb orb = event.getOrb();
        if (orb == null) {
            return;
        }

        int orbValue = orb.getValue();

        if (orbValue > 0) {
            // Add the orb's experience to the mod's custom XP system.
            player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                playerXP.addExperience(orbValue);
            });
        }
    }

    /**
     * // Grants XP to the player when an item is smelted in a furnace.
     * // Configured XP amounts are applied based on the smelted item.
     * @param event The PlayerEvent.ItemSmeltedEvent.
     */
    @SubscribeEvent
    public static void onItemSmelted(PlayerEvent.ItemSmeltedEvent event) {
        Player player = event.getEntity();

        // This logic must only run on the server.
        if (player == null || player.level().isClientSide()) {
            return;
        }

        ItemStack itemStack = event.getSmelting();
        if (itemStack.isEmpty()) {
            return;
        }

        // Get the unique ID of the smelted item for configuration lookup.
        ResourceLocation itemId = ForgeRegistries.ITEMS.getKey(itemStack.getItem());
        if (itemId == null) {
            return;
        }

        String itemIdString = itemId.toString();
        XpDataConfig xpConfigs = XpDataConfig.getInstance(); // Get instance of XP config

        int xpToAward;

        // Check if there's a specific XP reward defined for this item in configs.
        if (xpConfigs.getSmeltingXpRewards().containsKey(itemIdString)) {
            xpToAward = xpConfigs.getSmeltingXpRewards().get(itemIdString);
        } else {
            // Use the default smelting XP if no specific reward is found.
            xpToAward = xpConfigs.getDefaultSmeltingXp();
        }

        if (xpToAward > 0) {
            // Obtain the player's custom XP capability and add the configured XP.
            player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                playerXP.addExperience(xpToAward); // Add XP to the system.
            });
        }
    }
}
