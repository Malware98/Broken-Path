package com.malware98.brokenpath.events;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.calculation.StatCalculator;
import com.malware98.brokenpath.capabilities.IPlayerXP;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.data.ModDamageTypeTags;
import com.malware98.brokenpath.network.PacketHandler;
import com.malware98.brokenpath.network.messages.SyncPlayerStatsPacket;
import com.malware98.brokenpath.util.CapabilityUtils;
import com.malware98.brokenpath.util.ModArmorStats;
import net.minecraft.network.chat.Component;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.EquipmentSlot;
import net.minecraft.world.entity.ai.attributes.AttributeInstance;
import net.minecraft.world.entity.ai.attributes.AttributeModifier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.food.FoodData;
import net.minecraft.world.item.ArmorItem;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.GameRules;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;
import net.minecraftforge.event.ItemAttributeModifierEvent;
import net.minecraftforge.event.entity.living.*;
import net.minecraftforge.event.entity.player.ItemTooltipEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.UUID;

@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class PlayerStatEventHandler {

    // UUID para los modificadores que anulan los atributos vanilla de armadura
    private static final UUID VANILLA_ARMOR_NULLIFIER_UUID = UUID.fromString("f8b7a6c5-4d3e-2b1a-9c8d-7e6f5a4b3c2d");
    private static final UUID VANILLA_TOUGHNESS_NULLIFIER_UUID = UUID.fromString("e9f8d7c6-b5a4-1c2d-3e4f-5f6a7b8c9d0e");

    // UUID para modificadores de Salud Máxima (usado para establecer el valor base del atributo vanilla)
    private static final UUID CUSTOM_MAX_HEALTH_MODIFIER_UUID = UUID.fromString("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d");

    private static final java.util.Map<UUID, Long> lastStarveDamageTick = new java.util.HashMap<>();

    // Sincroniza las estadísticas del jugador al iniciar sesión en el servidor y ajusta las reglas de juego para la regeneración.
    @SubscribeEvent
    public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event) {
        if (!event.getEntity().level().isClientSide()) {
            CapabilityUtils.ifPlayerStatsPresent(event.getEntity(), data -> {
                // Llama al método que recalcula y sincroniza las estadísticas
                recalculateAndApplyStats(event.getEntity());
            });

            if (event.getEntity() instanceof ServerPlayer serverPlayer) {
                // Asegura que la regeneración natural de Minecraft esté deshabilitada
                serverPlayer.server.getGameRules().getRule(GameRules.RULE_NATURAL_REGENERATION).set(false, serverPlayer.server);
            }
            lastStarveDamageTick.remove(event.getEntity().getUUID());
        }
    }

    // Restaura las estadísticas del jugador al reaparecer y recalcula la protección.
    @SubscribeEvent
    public static void onPlayerRespawn(PlayerEvent.PlayerRespawnEvent event) {
        if (!event.getEntity().level().isClientSide()) {
            recalculateAndApplyStats(event.getEntity());

            CapabilityUtils.ifPlayerStatsPresent(event.getEntity(), stats -> {
                stats.setCurrentHealth(stats.getMaxHealth()); // Asegura que la salud actual sea la máxima del mod
                stats.setCurrentMana(stats.getMaxMana());
                stats.setCurrentVigor(stats.getMaxVigor());
                stats.setHungerStage(0); // Reinicia la etapa de hambre

                // Reinicia la Protección Innata al máximo al reaparecer
                stats.setCurrentInnateProtection(stats.getMaxInnateProtection());

                // Recalcula la protección basada en armadura equipada y STR
                float protectionFromEquippedArmor = calculateEquippedArmorProtection(event.getEntity());
                float maxSTRProtection = StatCalculator.calculateProtectionFromSTR(stats.getRace(), stats.getPlayerClass(), stats.getStrength());
                stats.setCurrentProtection(Math.min(protectionFromEquippedArmor, maxSTRProtection)); // Usa el setter que sincroniza
            });
            lastStarveDamageTick.remove(event.getEntity().getUUID());
        }
    }

    // Marca a los jugadores que infligen o reciben daño como "en combate".
    @SubscribeEvent
    public static void onLivingAttack(LivingAttackEvent event) {
        if (event.getEntity() instanceof Player player && !player.level().isClientSide()) {
            CapabilityUtils.ifPlayerStatsPresent(player, stats -> { // Usar 'player' directamente
                stats.enterCombat(player.level().getGameTime()); // Marca al jugador como en combate
            });
        }

        if (event.getSource().getEntity() instanceof Player player && !player.level().isClientSide()) {
            CapabilityUtils.ifPlayerStatsPresent(player, stats -> { // Usar 'player' directamente
                stats.enterCombat(player.level().getGameTime());
            });
        }
    }

    // Recalcula y actualiza las estadísticas principales del jugador basándose en su raza, clase, atributos y nivel.
    @SubscribeEvent
    public static void onLivingTick(LivingEvent.LivingTickEvent event) {
        if (event.getEntity() instanceof Player player && !player.level().isClientSide()) {

            long currentTick = player.level().getGameTime();
            ModConfigs configs = ModConfigs.getInstance();
            FoodData foodStats = player.getFoodData();
            int foodLevel = foodStats.getFoodLevel();

            // --- LÓGICA: FORZAR ARMOR Y ARMOR_TOUGHNESS A CERO ---
            // Esto asegura que nuestro sistema de Protección sea el único en efecto
            AttributeInstance armorAttribute = player.getAttribute(Attributes.ARMOR);
            if (armorAttribute != null && armorAttribute.getValue() != 0.0) {
                armorAttribute.removeModifier(VANILLA_ARMOR_NULLIFIER_UUID);
                armorAttribute.addPermanentModifier(new AttributeModifier(
                        VANILLA_ARMOR_NULLIFIER_UUID,
                        "BrokenPath Armor Reset",
                        -armorAttribute.getValue(),
                        AttributeModifier.Operation.ADDITION
                ));
            }

            AttributeInstance armorToughnessAttribute = player.getAttribute(Attributes.ARMOR_TOUGHNESS);
            if (armorToughnessAttribute != null && armorToughnessAttribute.getValue() != 0.0) {
                armorToughnessAttribute.removeModifier(VANILLA_TOUGHNESS_NULLIFIER_UUID);
                armorToughnessAttribute.addPermanentModifier(new AttributeModifier(
                        VANILLA_TOUGHNESS_NULLIFIER_UUID,
                        "BrokenPath Toughness Reset",
                        -armorToughnessAttribute.getValue(),
                        AttributeModifier.Operation.ADDITION
                ));
            }
            // --- FIN DE LA LÓGICA DE ANULACIÓN ---

            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                    int intelligence = playerStats.getIntelligence();
                    int dexterity = playerStats.getDexterity();
                    int constitution = playerStats.getConstitution();

                    boolean inCombat = playerStats.isInCombat(currentTick);
                    long lastCombatExitTick = playerStats.getLastCombatExitTick();

                    // Lógica de Drenaje y Penalización de Hambre
                    int newHungerStage = 0; // 0 = Normal/Saturado

                    if (foodLevel <= 0) { // 0 muslos llenos (0-1 punto de comida)
                        newHungerStage = 3; // Famélico
                    } else if (foodLevel >= 2 && foodLevel <= 5) { // 1 a 2 muslos llenos (2-5 puntos de comida)
                        newHungerStage = 2; // Hambre Intensa
                    } else if (foodLevel >= 6 && foodLevel <= 15) { // 3 a 7 muslos llenos (6-15 puntos de comida)
                        newHungerStage = 1; // Hambre Moderada
                    }

                    // Si foodLevel es 16 o más (hasta 20), newHungerStage permanece 0
                    playerStats.setHungerStage(newHungerStage); // Sincroniza la etapa de hambre

                    // LÓGICA DE DAÑO POR INANICIÓN
                    if (newHungerStage == 3) {
                        Long lastDamage = lastStarveDamageTick.get(player.getUUID());
                        int starveDamageInterval = configs.getStarvingDamageIntervalTicks();

                        if (lastDamage == null || (currentTick - lastDamage >= starveDamageInterval)) {
                            player.hurt(player.damageSources().starve(), configs.getStarvingDamageAmount());
                            lastStarveDamageTick.put(player.getUUID(), currentTick);
                        }
                    }

                    float passiveExhaustionToAdd = 0.0f;
                    switch (newHungerStage) {
                        case 1: // Hambre Moderada
                            passiveExhaustionToAdd = configs.getHungryModeratePassiveExhaustionPerTick();
                            break;
                        case 2: // Hambre Intensa
                            passiveExhaustionToAdd = configs.getHungryIntensePassiveExhaustionPerTick();
                            break;
                        case 3: // Famélico
                            passiveExhaustionToAdd = configs.getStarvingPassiveExhaustionPerTick();
                            break;
                    }

                    if (passiveExhaustionToAdd > 0) {
                        foodStats.addExhaustion(passiveExhaustionToAdd);
                    }

                    // Regeneración de Maná
                    float currentMana = playerStats.getCurrentMana();
                    float maxMana = playerStats.getMaxMana();
                    float manaRegenRate = StatCalculator.calculateManaRegenPerTick(intelligence, inCombat);

                    // Calcula el multiplicador de penalización por hambre para el Maná
                    float hungerManaRegenPenalty = 1.0f; // Por defecto, sin penalización
                    if (newHungerStage == 2) { // Hambre Intensa
                        hungerManaRegenPenalty = 0.85f; // Reducción del 15% (1.0 - 0.15)
                    } else if (newHungerStage == 3) { // Famélico
                        hungerManaRegenPenalty = 0.0f; // Detener completamente la regeneración
                    }

                    float actualManaRegenRate = manaRegenRate * hungerManaRegenPenalty; // Aplica la penalización

                    // Obtener si el Maná está siendo consumido continuamente (ahora desde PlayerStats)
                    boolean isConsumingMana = playerStats.isManaBeingConsumed();

                    // Lógica de regeneración de Maná
                    boolean canRegenMana = !isConsumingMana && // No regenerar si hay consumo continuo
                            currentMana < maxMana && // No regenerar si está lleno
                            (!inCombat || (currentTick - lastCombatExitTick >= configs.getManaDelayAfterCombatTicks())); // Regenerar si no está en combate, o si salió de combate y pasó el delay

                    if (canRegenMana && actualManaRegenRate > 0) {
                        playerStats.setCurrentMana(currentMana + actualManaRegenRate);
                    }

                    // Regeneración de Vigor
                    float currentVigor = playerStats.getCurrentVigor();
                    float maxVigor = playerStats.getMaxVigor();
                    float vigorRegenRate = StatCalculator.calculateVigorRegenPerTick(dexterity, inCombat);

                    // Calcula el multiplicador de penalización por hambre para el Vigor
                    float hungerVigorRegenPenalty = 1.0f; // Por defecto, sin penalización
                    if (newHungerStage == 1) { // Hambre Moderada
                        hungerVigorRegenPenalty = 1.0f + configs.getHungryModerateVigorRegenPenalty(); // Suma la penalización (que es negativa)
                    } else if (newHungerStage == 2) { // Hambre Intensa
                        hungerVigorRegenPenalty = 1.0f + configs.getHungryIntenseVigorRegenPenalty();
                    } else if (newHungerStage == 3) { // Famélico
                        hungerVigorRegenPenalty = 1.0f + configs.getStarvingVigorRegenPenalty();
                    }
                    // Asegurarse de que el multiplicador no sea negativo
                    hungerVigorRegenPenalty = Math.max(0.0f, hungerVigorRegenPenalty);

                    float actualVigorRegenRate = vigorRegenRate * hungerVigorRegenPenalty; // Aplica la penalización

                    // Obtener si el Vigor está siendo consumido continuamente (ahora desde PlayerStats)
                    boolean isConsumingVigor = playerStats.isVigorBeingConsumed();

                    // Lógica de regeneración de Vigor
                    boolean canRegenVigor = !isConsumingVigor && // No regenerar si hay consumo continuo
                            currentVigor < maxVigor && // No regenerar si está lleno
                            (!inCombat || (currentTick - lastCombatExitTick >= configs.getVigorDelayAfterCombatTicks())); // Regenerar si no está en combate, o si salió de combate y pasó el delay

                    if (canRegenVigor && actualVigorRegenRate > 0) {
                        playerStats.setCurrentVigor(currentVigor + actualVigorRegenRate);
                    }

                    // Regeneración Lenta de Salud
                    int effectiveHealthCooldown = StatCalculator.calculateHealthRegenCooldown(
                            constitution,
                            playerStats.getRegenSpeedBonusTicks(),
                            inCombat,
                            lastCombatExitTick,
                            currentTick
                    );

                    // Condición de regeneración de salud base:
                    boolean canRegenHealth = newHungerStage != 3 && // No famélico
                            foodStats.getFoodLevel() >= configs.getHealthMinFoodLevelForRegen() &&
                            player.getHealth() < player.getMaxHealth() &&
                            !inCombat &&
                            (currentTick - lastCombatExitTick >= configs.getHealthDelayAfterCombatTicks());

                    if (player.tickCount % effectiveHealthCooldown == 0 && canRegenHealth) {
                        player.heal(configs.getHealthAmountToHealPerPulse());
                        foodStats.addExhaustion(configs.getHealthExhaustionCostPerHealPulse());
                    }

                    // Regeneración de Protección Innata
                    float currentInnateProtection = playerStats.getCurrentInnateProtection();
                    float maxInnateProtection = playerStats.getMaxInnateProtection();

                    boolean canRegenInnateProtection = currentInnateProtection < maxInnateProtection &&
                            player.getHealth() == player.getMaxHealth() &&
                            newHungerStage != 3 &&
                            (!inCombat || (currentTick - lastCombatExitTick >= configs.getInnateProtectionDelayAfterCombatTicks())); // Regenerar si no está en combate, o si salió de combate y pasó el delay

                    if (player.tickCount % configs.getInnateProtectionRegenCooldownTicks() == 0 && canRegenInnateProtection) {
                        playerStats.restoreInnateProtection(configs.getInnateProtectionAmountPerPulse());
                    }
                });
            });
        }
    }


    // Procedimiento de utilidad para obtener el nivel del jugador desde IPlayerXP
    public static int getPlayerLevel(Player player) {
        return player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY)
                .map(IPlayerXP::getLevel)
                .orElse(1); // Default a 1 si la capacidad no está presente
    }


    // Recalcula y aplica las estadísticas al jugador
    // Este método ahora llama a recalculateStats() de la capacidad, que ya maneja el nivel y la sincronización.
    public static void recalculateAndApplyStats(Player player) {
        CapabilityUtils.ifPlayerStatsPresent(player, stats -> {
            stats.recalculateStats(); // Este método ahora se encarga de llamar a sync()

            // Asegurar que MAX_HEALTH vanilla se actualice.
            AttributeInstance maxHealthAttribute = player.getAttribute(Attributes.MAX_HEALTH);
            if (maxHealthAttribute != null) {
                maxHealthAttribute.removeModifier(CUSTOM_MAX_HEALTH_MODIFIER_UUID);
                maxHealthAttribute.setBaseValue(stats.getMaxHealth());
            }

            // Asegurar que la salud actual del jugador no exceda la nueva salud máxima.
            player.setHealth(Math.min(player.getHealth(), stats.getMaxHealth()));
        });
    }

    // Este evento se dispara justo ANTES de que el daño se aplique a la entidad.
    @SubscribeEvent
    public static void onLivingDamage(LivingDamageEvent event) {
        if (event.getEntity() instanceof Player player && !player.level().isClientSide()) {
            CapabilityUtils.ifPlayerStatsPresent(player, stats -> {
                DamageSource source = event.getSource();
                float incomingDamage = event.getAmount();
                float currentProtectionSTRBased = stats.getCurrentProtection();
                float currentInnateProtection = stats.getCurrentInnateProtection(); // Obtener protección innata actual

                float damageToApplyToHealth = 0.0f;

                if (source.is(ModDamageTypeTags.IGNORES_PROTECTION)) {
                    damageToApplyToHealth = incomingDamage;
                } else {
                    float penetratingDamage = 0.0f;
                    float nonPenetratingDamage = incomingDamage;

                    if (source.is(ModDamageTypeTags.IS_PENETRATING)) {
                        float penetrationPercentage = 0.25f; // Configurable en ModConfigs si se desea
                        penetratingDamage = incomingDamage * penetrationPercentage;
                        nonPenetratingDamage = incomingDamage - penetratingDamage;
                        damageToApplyToHealth += penetratingDamage;
                    }

                    float damageAfterSTRProtection = nonPenetratingDamage;
                    if (currentProtectionSTRBased > 0) {
                        float absorbedBySTRProtection = Math.min(nonPenetratingDamage, currentProtectionSTRBased);
                        stats.setCurrentProtection(currentProtectionSTRBased - absorbedBySTRProtection); // Consume protección STR-basada
                        damageAfterSTRProtection = nonPenetratingDamage - absorbedBySTRProtection;
                    }

                    float damageAfterInnateProtection = damageAfterSTRProtection;
                    if (damageAfterInnateProtection > 0 && currentInnateProtection > 0) {
                        float absorbedByInnateProtection = Math.min(damageAfterInnateProtection, currentInnateProtection);
                        stats.setCurrentInnateProtection(currentInnateProtection - absorbedByInnateProtection); // Consume protección innata
                        damageAfterInnateProtection = damageAfterInnateProtection - absorbedByInnateProtection;
                    }

                    damageToApplyToHealth += damageAfterInnateProtection; // Daño restante va a la salud
                }

                event.setAmount(damageToApplyToHealth);
            });
        }
    }

    // Procedimiento para manejar los atributos de la armadura (vacío, la anulación se hace en onLivingTick)
    @SubscribeEvent
    public static void onItemAttributeModification(ItemAttributeModifierEvent event) {
        // Este evento se deja vacío para la anulación de la armadura vanilla.
        // La anulación se maneja en onLivingTick para una supresión más consistente.
    }

    // Procedimiento para controlar el uso y desuso de armadura
    @SubscribeEvent
    public static void onLivingEquipmentChange(LivingEquipmentChangeEvent event) {
        if (event.getEntity() instanceof Player player) {
            player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                float totalProtectionFromEquippedArmor = calculateEquippedArmorProtection(player);

                // La protección actual se limita por la protección STR-basada máxima
                float finalCurrentProtection = Math.min(totalProtectionFromEquippedArmor, playerStats.getMaxProtection());

                playerStats.setCurrentProtection(finalCurrentProtection);
            });
        }
    }

    // Configuración personalizada para el Tooltip de armaduras
    @OnlyIn(Dist.CLIENT)
    @SubscribeEvent
    public static void onTooltip(ItemTooltipEvent event) {
        ItemStack stack = event.getItemStack();
        List<Component> tooltip = event.getToolTip();

        if (stack.getItem() instanceof ArmorItem armorItem) {
            List<Component> newTooltip = new ArrayList<>();
            int insertionIndex = -1;

            for (int i = 0; i < tooltip.size(); i++) {
                Component component = tooltip.get(i);
                String text = component.getString().trim().toLowerCase();

                // Filtrar líneas de tooltip vanilla que ya no son relevantes
                if (text.startsWith("when in ") || text.startsWith("when on ")) {
                    continue;
                }
                if (text.contains("armor") || text.contains("armadura") ||
                        text.contains("toughness") || text.contains("dureza")) {
                    continue;
                }

                // Encontrar el punto de inserción para la nueva información
                if (insertionIndex == -1) {
                    if (text.contains("combat") || text.contains("combate")) {
                        insertionIndex = i + 1;
                    } else if (text.contains("durability") || text.contains("durabilidad") ||
                            text.contains("unbreakable") || text.contains("inrompible")) {
                        insertionIndex = i;
                    }
                }

                newTooltip.add(component);
            }

            // Si no se encontró un punto de inserción específico, añadir al final
            if (insertionIndex == -1) {
                insertionIndex = newTooltip.size();
            }

            float itemProtectionValue = ModArmorStats.getProtectionValue(armorItem);

            newTooltip.add(insertionIndex, Component.empty()); // Añadir una línea vacía para espaciado
            newTooltip.add(insertionIndex + 1, Component.literal("§9Protección BrokenPath: " + (int)itemProtectionValue));

            tooltip.clear();
            tooltip.addAll(newTooltip);
        }
    }


    // Este procedimiento normalmente se llamaría desde tu UI personalizada o desde un comando que gestione
    public static void onPlayerSpendAttributePoints(Player player, String attributeName, int amount) {
        CapabilityUtils.ifPlayerStatsPresent(player, stats -> {
            boolean success = stats.spendAttributePoints(attributeName, amount);
            if (success) {
                // spendAttributePoints ya llama a recalculateStats() que a su vez llama a sync()
            }
        });
    }

    // Este procedimiento asume que el sistema de XP lo llama cuando un jugador sube de nivel.
    public static void onPlayerGainedLevel(Player player, int newLevel) {
        CapabilityUtils.ifPlayerStatsPresent(player, stats -> {
            int attributePointsGained = ModConfigs.getInstance().getAttributePointsForLevelRange(newLevel);
            if (attributePointsGained > 0) {
                stats.addAttributePoints(attributePointsGained); // Add points to player's available pool
            }
            recalculateAndApplyStats(player); // Recalcula stats y sincroniza
        });
    }

    // Procedimiento que maneja la regeneración de vida
    @SubscribeEvent
    public static void onLivingHeal(LivingHealEvent event) {
        if (event.getEntity() instanceof Player player) {
            // Comprueba si el jugador tiene actualmente el efecto de poción de Regeneración
            if (player.hasEffect(MobEffects.REGENERATION)) {
                // Obtiene el multiplicador de mejora desde las configuraciones
                float regenEffectHealingBonusMultiplier = ModConfigs.getInstance().getRegenEffectHealingBonusMultiplier();

                // Aplica el multiplicador a la cantidad de curación
                event.setAmount(event.getAmount() * regenEffectHealingBonusMultiplier);
            }
        }
    }

    // Calcula la protección total proporcionada por la armadura actualmente equipada por el jugador.
    private static float calculateEquippedArmorProtection(Player player) {
        float equippedProtection = 0;
        for (EquipmentSlot slot : EquipmentSlot.values()) {
            if (slot.getType() == EquipmentSlot.Type.ARMOR) {
                ItemStack equippedStack = player.getItemBySlot(slot);
                if (!equippedStack.isEmpty() && equippedStack.getItem() instanceof ArmorItem armorItem) {
                    equippedProtection += ModArmorStats.getProtectionValue(armorItem);
                }
            }
        }
        return equippedProtection;
    }
}
