package com.malware98.brokenpath.events;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.calculation.StatCalculator;
import com.malware98.brokenpath.capabilities.IPlayerXP;
import com.malware98.brokenpath.capabilities.PlayerStats;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.data.ModDamageTypeTags;
import com.malware98.brokenpath.util.CapabilityUtils;
import com.malware98.brokenpath.util.ModArmorStats;
import net.minecraft.network.chat.Component;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.EquipmentSlot;
import net.minecraft.world.entity.ai.attributes.AttributeInstance;
import net.minecraft.world.entity.ai.attributes.AttributeModifier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.food.FoodData;
import net.minecraft.world.item.ArmorItem;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.GameRules;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;
import net.minecraftforge.event.ItemAttributeModifierEvent;
import net.minecraftforge.event.TickEvent;
import net.minecraftforge.event.entity.living.*;
import net.minecraftforge.event.entity.player.ItemTooltipEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;

import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.UUID;
import java.util.ArrayList;

/**
 * Handles events related to player statistics within the "BrokenPath" mod.
 * This class includes comprehensive logic for:
 * - Player capability synchronization (stats and XP) on login/respawn/clone.
 * - Custom health, mana, vigor, and innate protection regeneration systems.
 * - Custom damage mitigation and protection mechanics.
 * - Overriding and nullifying vanilla armor attributes.
 * - Managing player hunger effects and starvation.
 * - Custom tooltips for mod-specific armor values.
 * It subscribes to various Forge events to intercept and modify player behavior.
 */
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class PlayerStatEventHandler {

    // --- UUIDs for Attribute Modifiers ---
    // UUID for a modifier that nullifies vanilla armor attributes.
    // This is crucial to ensure the mod's custom Protection system is the sole arbiter of armor.
    private static final UUID VANILLA_ARMOR_NULLIFIER_UUID = UUID.fromString("f8b7a6c5-4d3e-2b1a-9c8d-7e6f5a4b3c2d");
    // UUID for a modifier that nullifies vanilla armor toughness attributes.
    private static final UUID VANILLA_TOUGHNESS_NULLIFIER_UUID = UUID.fromString("e9f8d7c6-b5a4-1c2d-3e4f-5f6a7b8c9d0e");

    // UUID for Max Health modifiers, used to set the base value of the vanilla attribute
    // to match the mod's calculated maximum health.
    private static final UUID CUSTOM_MAX_HEALTH_MODIFIER_UUID = UUID.fromString("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d");

    // Map to track the last game tick when starvation damage was applied to each player,
    // used to regulate damage frequency.
    private static final Map<UUID, Long> lastStarveDamageTick = new java.util.HashMap<>();

    // --- Player Event Listeners ---
    /**
     * Handles various player-related events to ensure proper mod functionality.
     * This group includes event handlers for:
     * - Player login and logout.
     * - Player cloning (on death or dimension change).
     * - Player respawn.
     * - Player attacking and being attacked.
     * - Player ticking (every game tick).
     * - Item attribute modifications (specifically for armor).
     * - Living entity equipment changes.
     * - Item tooltip rendering.
     * - Living entity healing.
     */
    // Player Login Event
    @SubscribeEvent
    public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event) {
        if (!event.getEntity().level().isClientSide()) {
            ServerPlayer serverPlayer = (ServerPlayer) event.getEntity();

            BrokenPath.LOGGER.info("Player {} logged in. Syncing capabilities.", serverPlayer.getName().getString());

            CapabilityUtils.ifPlayerStatsPresent(serverPlayer, stats -> {
                if (stats.getRace().isEmpty() || stats.getRace().equals("NO_RACE")) {
                    stats.setRace("SPIRIT");
                    BrokenPath.LOGGER.info("Player {}'s race set to default SPIRIT.", serverPlayer.getName().getString());
                }
                BrokenPath.LOGGER.info("PlayerStats data prepared for {}.", serverPlayer.getName().getString());
            });

            serverPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(xp -> {
                xp.sync();
                BrokenPath.LOGGER.info("PlayerXP synced for {}.", serverPlayer.getName().getString());
            });

            recalculateAndApplyStats(serverPlayer); // Ensure vanilla attributes match mod's stats.

            serverPlayer.server.getGameRules().getRule(GameRules.RULE_NATURAL_REGENERATION).set(false, serverPlayer.server);
            lastStarveDamageTick.remove(serverPlayer.getUUID()); // Clear starvation damage history.
        }
    }

    // Player Logout Event
    @SubscribeEvent
    public static void onPlayerLoggedOut(PlayerEvent.PlayerLoggedOutEvent event) {
        if (!event.getEntity().level().isClientSide()) {
            UUID playerUUID = event.getEntity().getUUID();
            BrokenPath.LOGGER.info("Player {} logged out. Cleaning up static consumption states.", event.getEntity().getName().getString());
            PlayerStats.removePlayerConsumptionState(playerUUID);
            lastStarveDamageTick.remove(playerUUID); // Clear starvation damage history.
        }
    }

    // Player Clone Event (on death or dimension change)
    @SubscribeEvent
    public static void onPlayerClone(PlayerEvent.Clone event) {
        if (!event.getEntity().level().isClientSide()) {
            event.getOriginal().getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(oldStats -> {
                event.getEntity().getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(newStats -> {
                    newStats.copyFrom(oldStats);
                    BrokenPath.LOGGER.info("PlayerStats copied from original to new player {}.", event.getEntity().getName().getString());
                });
            });

            event.getOriginal().getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(oldXP -> {
                event.getEntity().getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(newXP -> {
                    newXP.copyFrom(oldXP);
                    BrokenPath.LOGGER.info("PlayerXP copied from original to new player {}.", event.getEntity().getName().getString());
                });
            });
        }
    }

    // Player Respawn Event
    @SubscribeEvent
    public static void onPlayerRespawn(PlayerEvent.PlayerRespawnEvent event) {
        if (!event.getEntity().level().isClientSide()) {
            ServerPlayer serverPlayer = (ServerPlayer) event.getEntity();
            BrokenPath.LOGGER.info("Player {} respawned. Applying respawn logic and syncing.", serverPlayer.getName().getString());

            CapabilityUtils.ifPlayerStatsPresent(serverPlayer, stats -> {
                stats.setCurrentHealth(stats.getMaxHealth()); // Reset current health to max.
                stats.setCurrentMana(stats.getMaxMana());
                stats.setCurrentVigor(stats.getMaxVigor());
                stats.setHungerStage(0); // Reset hunger stage.
                serverPlayer.setHealth(stats.getMaxHealth()); // Update vanilla health.
            });

            serverPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(IPlayerXP::sync);
            recalculateAndApplyStats(serverPlayer); // Ensure full sync and attribute application.
            lastStarveDamageTick.remove(serverPlayer.getUUID()); // Clear starvation damage history.
        }
    }

    // Living Attack Event (for combat state)
    @SubscribeEvent
    public static void onLivingAttack(LivingAttackEvent event) {
        // Mark the attacked player as in combat.
        if (event.getEntity() instanceof Player player && !player.level().isClientSide()) {
            CapabilityUtils.ifPlayerStatsPresent(player, stats -> {
                stats.enterCombat(player.level().getGameTime());
            });
        }
        // Mark the attacking player as in combat.
        if (event.getSource().getEntity() instanceof Player player && !player.level().isClientSide()) {
            CapabilityUtils.ifPlayerStatsPresent(player, stats -> {
                stats.enterCombat(player.level().getGameTime());
            });
        }
    }

    // Living Tick Event (main loop for stat updates)
    @SubscribeEvent
    public static void onLivingTick(LivingEvent.LivingTickEvent event) {
        if (event.getEntity() instanceof Player player && !player.level().isClientSide()) {
            long currentTick = player.level().getGameTime();
            ModConfigs configs = ModConfigs.getInstance();
            FoodData foodStats = player.getFoodData();
            int foodLevel = foodStats.getFoodLevel();

            // --- Nullify Vanilla Armor and Armor_Toughness ---
            // This ensures the mod's custom Protection system is the only active defense.
            AttributeInstance armorAttribute = player.getAttribute(Attributes.ARMOR);
            if (armorAttribute != null && armorAttribute.getValue() != 0.0) {
                armorAttribute.removeModifier(VANILLA_ARMOR_NULLIFIER_UUID);
                armorAttribute.addPermanentModifier(new AttributeModifier(
                        VANILLA_ARMOR_NULLIFIER_UUID, "BrokenPath Armor Reset",
                        -armorAttribute.getValue(), AttributeModifier.Operation.ADDITION));
            }
            AttributeInstance armorToughnessAttribute = player.getAttribute(Attributes.ARMOR_TOUGHNESS);
            if (armorToughnessAttribute != null && armorToughnessAttribute.getValue() != 0.0) {
                armorToughnessAttribute.removeModifier(VANILLA_TOUGHNESS_NULLIFIER_UUID);
                armorToughnessAttribute.addPermanentModifier(new AttributeModifier(
                        VANILLA_TOUGHNESS_NULLIFIER_UUID, "BrokenPath Toughness Reset",
                        -armorToughnessAttribute.getValue(), AttributeModifier.Operation.ADDITION));
            }

            CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
                // --- Synchronize Vanilla Health with Mod's Health ---
                AttributeInstance maxHealthAttribute = player.getAttribute(Attributes.MAX_HEALTH);
                if (maxHealthAttribute != null && maxHealthAttribute.getBaseValue() != playerStats.getMaxHealth()) {
                    maxHealthAttribute.removeModifier(CUSTOM_MAX_HEALTH_MODIFIER_UUID);
                    maxHealthAttribute.setBaseValue(playerStats.getMaxHealth());
                    // Cap vanilla current health if max health decreased.
                    player.setHealth(Math.min(player.getHealth(), playerStats.getMaxHealth()));
                }
                // Update mod's current health from vanilla after all syncs to ensure consistency.
                if (playerStats.getCurrentHealth() != player.getHealth()) {
                    playerStats.setCurrentHealth(player.getHealth(), true);
                }


                player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                    int intelligence = playerStats.getIntelligence();
                    int dexterity = playerStats.getDexterity();
                    int constitution = playerStats.getConstitution();

                    boolean inCombat = playerStats.isInCombat(currentTick);
                    long lastCombatExitTick = playerStats.getLastCombatExitTick();

                    // --- Hunger Drain and Penalty Logic ---
                    int newHungerStage = 0; // 0 = Normal/Saturated.
                    if (foodLevel <= 0) newHungerStage = 3; // Starving (0-1 food point).
                    else if (foodLevel >= 2 && foodLevel <= 5) newHungerStage = 2; // Intense Hunger (2-5 food points).
                    else if (foodLevel >= 6 && foodLevel <= 15) newHungerStage = 1; // Moderate Hunger (6-15 food points).
                    playerStats.setHungerStage(newHungerStage);

                    // Starvation damage logic.
                    if (newHungerStage == 3) {
                        Long lastDamage = lastStarveDamageTick.get(player.getUUID());
                        int starveDamageInterval = configs.getStarvingDamageIntervalTicks();
                        if (lastDamage == null || (currentTick - lastDamage >= starveDamageInterval)) {
                            player.hurt(player.damageSources().starve(), configs.getStarvingDamageAmount());
                            lastStarveDamageTick.put(player.getUUID(), currentTick);
                        }
                    }

                    // Apply passive hunger exhaustion penalty.
                    float passiveExhaustionToAdd = 0.0f;
                    switch (newHungerStage) {
                        case 1: passiveExhaustionToAdd = configs.hungryModeratePassiveExhaustionPerTick(); break;
                        case 2: passiveExhaustionToAdd = configs.hungryIntensePassiveExhaustionPerTick(); break;
                        case 3: passiveExhaustionToAdd = configs.starvingPassiveExhaustionPerTick(); break;
                    }
                    if (passiveExhaustionToAdd > 0) foodStats.addExhaustion(passiveExhaustionToAdd);

                    // --- Mana Regeneration Logic ---
                    float currentMana = playerStats.getCurrentMana();
                    float maxMana = playerStats.getMaxMana();
                    float manaRegenRatePerTick = StatCalculator.calculateManaRegenPerTick(intelligence, inCombat);
                    float hungerManaRegenPenalty = (newHungerStage == 2) ? 0.85f : (newHungerStage == 3) ? 0.0f : 1.0f;
                    float actualManaRegenRatePerTick = manaRegenRatePerTick * hungerManaRegenPenalty;
                    boolean isConsumingMana = playerStats.isManaBeingConsumed();
                    boolean canRegenMana = !isConsumingMana && currentMana < maxMana &&
                            (!inCombat || (currentTick - lastCombatExitTick >= configs.getManaDelayAfterCombatTicks()));

                    if (configs.getBaseRegenPulseCooldownTicks() > 0 && player.tickCount % configs.getBaseRegenPulseCooldownTicks() == 0) {
                        if (canRegenMana && actualManaRegenRatePerTick > 0) {
                            float amountToHeal = actualManaRegenRatePerTick * configs.getBaseRegenPulseCooldownTicks();
                            playerStats.setCurrentMana(currentMana + amountToHeal);
                        }
                    }

                    // --- Vigor Regeneration Logic ---
                    float currentVigor = playerStats.getCurrentVigor();
                    float maxVigor = playerStats.getMaxVigor();
                    float vigorRegenRatePerTick = StatCalculator.calculateVigorRegenPerTick(dexterity, inCombat);
                    float hungerVigorRegenPenalty = 1.0f;
                    if (newHungerStage == 1) hungerVigorRegenPenalty = 1.0f + configs.hungryModerateVigorRegenPenalty();
                    else if (newHungerStage == 2) hungerVigorRegenPenalty = 1.0f + configs.hungryIntenseVigorRegenPenalty();
                    else if (newHungerStage == 3) hungerVigorRegenPenalty = 1.0f + configs.starvingVigorRegenPenalty();
                    hungerVigorRegenPenalty = Math.max(0.0f, hungerVigorRegenPenalty);
                    float actualVigorRegenRatePerTick = vigorRegenRatePerTick * hungerVigorRegenPenalty;
                    boolean isConsumingVigor = playerStats.isVigorBeingConsumed();
                    boolean canRegenVigor = !isConsumingVigor && currentVigor < maxVigor &&
                            (!inCombat || (currentTick - lastCombatExitTick >= configs.getVigorDelayAfterCombatTicks()));

                    if (configs.getBaseRegenPulseCooldownTicks() > 0 && player.tickCount % configs.getBaseRegenPulseCooldownTicks() == 0) {
                        if (canRegenVigor && actualVigorRegenRatePerTick > 0) {
                            float amountToHeal = actualVigorRegenRatePerTick * configs.getBaseRegenPulseCooldownTicks();
                            playerStats.setCurrentVigor(currentVigor + amountToHeal);
                        }
                    }

                    // --- Slow Health Regeneration Logic (Mod Controlled) ---
                    int effectiveHealthCooldown = StatCalculator.calculateHealthRegenCooldown(
                            constitution, playerStats.getRegenSpeedBonusTicks(), inCombat, lastCombatExitTick, currentTick);
                    boolean canRegenHealth = newHungerStage != 3 && foodStats.getFoodLevel() >= configs.getHealthMinFoodLevelForRegen() &&
                            playerStats.getCurrentHealth() < playerStats.getMaxHealth() && !inCombat &&
                            (currentTick - lastCombatExitTick >= configs.getHealthDelayAfterCombatTicks());

                    if (player.tickCount % effectiveHealthCooldown == 0 && canRegenHealth) {
                        float baseAmount = configs.getHealthAmountToHealPerPulse();
                        float conBonusAmount = constitution * configs.getHealthRegenAmountPerConPoint();
                        float totalAmountToHeal = baseAmount + conBonusAmount;
                        playerStats.setCurrentHealth(playerStats.getCurrentHealth() + totalAmountToHeal);
                        foodStats.addExhaustion(configs.getHealthExhaustionCostPerHealPulse());
                    }

                    // --- Innate Protection Regeneration Logic ---
                    float currentInnateProtection = playerStats.getCurrentInnateProtection();
                    float maxInnateProtection = playerStats.getMaxInnateProtection();
                    boolean canRegenInnateProtection = currentInnateProtection < maxInnateProtection &&
                            playerStats.getCurrentHealth() == playerStats.getMaxHealth() && newHungerStage != 3 &&
                            (!inCombat || (currentTick - lastCombatExitTick >= configs.getInnateProtectionDelayAfterCombatTicks()));

                    if (player.tickCount % configs.getBaseRegenPulseCooldownTicks() == 0 && canRegenInnateProtection) {
                        playerStats.restoreInnateProtection(configs.getInnateProtectionAmountPerPulse());
                    }
                });
            });
        }
    }

    // Player Tick Event (for vanilla XP nullification)
    @SubscribeEvent
    public static void onPlayerTick(TickEvent.PlayerTickEvent event) {
        if (event.phase == TickEvent.Phase.END && !event.player.level().isClientSide()) {
            Player player = event.player;
            // Force vanilla player experience to zero to prevent interference.
            player.experienceLevel = 0;
            player.experienceProgress = 0.0f;
            player.totalExperience = 0;
        }
    }

    // Living Damage Event (custom damage mitigation)
    @SubscribeEvent
    public static void onLivingDamage(LivingDamageEvent event) {
        if (event.getEntity() instanceof Player player && !player.level().isClientSide()) {
            CapabilityUtils.ifPlayerStatsPresent(player, stats -> {
                DamageSource source = event.getSource();
                float incomingDamage = event.getAmount();
                float currentProtectionSTRBased = stats.getCurrentProtection();
                float currentInnateProtection = stats.getCurrentInnateProtection();
                float damageToApplyToHealth = 0.0f;

                if (source.is(ModDamageTypeTags.IGNORES_PROTECTION)) {
                    damageToApplyToHealth = incomingDamage;
                } else {
                    float penetratingDamage = 0.0f;
                    float nonPenetratingDamage = incomingDamage;
                    if (source.is(ModDamageTypeTags.IS_PENETRATING)) {
                        float penetrationPercentage = ModConfigs.getInstance().getDamagePenetrationPercentage();
                        penetratingDamage = incomingDamage * penetrationPercentage;
                        nonPenetratingDamage = incomingDamage - penetratingDamage;
                        damageToApplyToHealth += penetratingDamage;
                    }

                    float damageAfterSTRProtection = nonPenetratingDamage;
                    if (currentProtectionSTRBased > 0) {
                        float absorbedBySTRProtection = Math.min(nonPenetratingDamage, currentProtectionSTRBased);
                        stats.setCurrentProtection(currentProtectionSTRBased - absorbedBySTRProtection);
                        damageAfterSTRProtection = nonPenetratingDamage - absorbedBySTRProtection;
                    }

                    float damageAfterInnateProtection = damageAfterSTRProtection;
                    if (damageAfterInnateProtection > 0 && currentInnateProtection > 0) {
                        float absorbedByInnateProtection = Math.min(damageAfterInnateProtection, currentInnateProtection);
                        stats.setCurrentInnateProtection(currentInnateProtection - absorbedByInnateProtection);
                        damageAfterInnateProtection = damageAfterInnateProtection - absorbedByInnateProtection;
                    }
                    damageToApplyToHealth += damageAfterInnateProtection;
                }
                event.setAmount(damageToApplyToHealth);
            });
        }
    }

    // Item Attribute Modification Event (empty, handled elsewhere)
    @SubscribeEvent
    public static void onItemAttributeModification(ItemAttributeModifierEvent event) {
        // This event is intentionally empty for vanilla armor override.
        // Overriding is handled in onLivingTick for consistent suppression.
    }

    // Living Equipment Change Event (for armor protection recalculation)
    @SubscribeEvent
    public static void onLivingEquipmentChange(LivingEquipmentChangeEvent event) {
        if (event.getEntity() instanceof Player player) {
            player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                float totalProtectionFromEquippedArmor = calculateEquippedArmorProtection(player);
                // Current protection is capped by the maximum STR-based protection.
                float finalCurrentProtection = Math.min(totalProtectionFromEquippedArmor, playerStats.getMaxProtection());
                playerStats.setCurrentProtection(finalCurrentProtection);
            });
        }
    }

    // Item Tooltip Event (for custom armor tooltips)
    @OnlyIn(Dist.CLIENT) // Only run on the client side.
    @SubscribeEvent
    public static void onTooltip(ItemTooltipEvent event) {
        ItemStack stack = event.getItemStack();
        List<Component> tooltip = event.getToolTip();

        if (stack.getItem() instanceof ArmorItem armorItem) {
            List<Component> newTooltip = new ArrayList<>();
            int insertionIndex = -1;

            // Filter out irrelevant vanilla tooltip lines and find an insertion point.
            for (int i = 0; i < tooltip.size(); i++) {
                Component component = tooltip.get(i);
                String text = component.getString().trim().toLowerCase(Locale.ROOT);
                if (text.startsWith("when in ") || text.startsWith("when on ") ||
                        text.contains("armor") || text.contains("armadura") ||
                        text.contains("toughness") || text.contains("dureza")) {
                    continue;
                }
                if (insertionIndex == -1) {
                    if (text.contains("combat") || text.contains("combate")) insertionIndex = i + 1;
                    else if (text.contains("durability") || text.contains("durabilidad") ||
                            text.contains("unbreakable") || text.contains("inrompible")) insertionIndex = i;
                }
                newTooltip.add(component);
            }

            if (insertionIndex == -1) insertionIndex = newTooltip.size();

            float itemProtectionValue = ModArmorStats.getProtectionValue(armorItem);

            newTooltip.add(insertionIndex, Component.empty());
            newTooltip.add(insertionIndex + 1, Component.literal("§9BrokenPath Protection: " + (int)itemProtectionValue));

            tooltip.clear();
            tooltip.addAll(newTooltip);
        }
    }

    // Living Heal Event (for regeneration effect multiplier)
    @SubscribeEvent
    public static void onLivingHeal(LivingHealEvent event) {
        if (event.getEntity() instanceof Player player) {
            if (player.hasEffect(MobEffects.REGENERATION)) {
                float regenEffectHealingBonusMultiplier = ModConfigs.getInstance().getRegenEffectHealingBonusMultiplier();
                event.setAmount(event.getAmount() * regenEffectHealingBonusMultiplier);
            }
        }
    }

    // --- Core Stat Recalculation ---
    /**
     * Recalculates and applies all primary player statistics to the vanilla player attributes.
     * This method is crucial and should be called after any attribute changes (e.g., spending points, leveling up)
     * or on player events like respawn/login to ensure vanilla attributes like MAX_HEALTH accurately reflect
     * the mod's internal stat system. It also ensures current health is synchronized.
     * @param player The player whose stats need recalculating and applying.
     */
    public static void recalculateAndApplyStats(Player player) {
        CapabilityUtils.ifPlayerStatsPresent(player, stats -> {
            stats.recalculateStats(); // Updates mod's internal maxHealth, maxMana, etc.

            // Ensure the vanilla MAX_HEALTH attribute is updated with the mod's calculated max health.
            AttributeInstance maxHealthAttribute = player.getAttribute(Attributes.MAX_HEALTH);
            if (maxHealthAttribute != null) {
                maxHealthAttribute.removeModifier(CUSTOM_MAX_HEALTH_MODIFIER_UUID);
                maxHealthAttribute.setBaseValue(stats.getMaxHealth());
            }

            // Immediately set vanilla player's current health to match mod's current health.
            // This is crucial for:
            // 1. Initial sync when max health increases (e.g., from CON points).
            // 2. Fixing regeneration issues by ensuring vanilla health matches mod's health.
            player.setHealth(stats.getCurrentHealth());

            // Update the mod's internal current health from vanilla after vanilla's setHealth might clamp.
            stats.setCurrentHealth(player.getHealth(), false); // Do not trigger another sync from here.
        });
    }

    // --- Helper Routines ---
    /**
     * Calculates the total Protection value provided by all armor pieces currently equipped by the player.
     * It iterates through all armor slots, retrieves the custom "BrokenPath Protection" value
     * from each equipped armor item, and sums them up.
     * @param player The player whose equipped armor protection is to be calculated.
     * @return The total combined custom protection value from equipped armor.
     */
    private static float calculateEquippedArmorProtection(Player player) {
        float equippedProtection = 0;
        for (EquipmentSlot slot : EquipmentSlot.values()) {
            if (slot.getType() == EquipmentSlot.Type.ARMOR) { // Only consider armor slots (HEAD, CHEST, LEGS, FEET).
                ItemStack equippedStack = player.getItemBySlot(slot);
                if (!equippedStack.isEmpty() && equippedStack.getItem() instanceof ArmorItem armorItem) {
                    equippedProtection += ModArmorStats.getProtectionValue(armorItem); // Add mod's custom protection.
                }
            }
        }
        return equippedProtection;
    }
}