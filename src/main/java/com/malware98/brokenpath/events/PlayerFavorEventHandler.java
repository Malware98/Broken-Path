package com.malware98.brokenpath.events;

import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import net.minecraft.core.BlockPos;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.ai.village.poi.PoiManager;
import net.minecraft.world.entity.ai.village.poi.PoiTypes;
import net.minecraft.world.entity.animal.*;
import net.minecraft.world.entity.npc.Villager;
import net.minecraft.world.entity.npc.VillagerProfession;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.block.BedBlock;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.DoorBlock;
import net.minecraftforge.event.entity.living.AnimalTameEvent;
import net.minecraftforge.event.entity.living.LivingDamageEvent;
import net.minecraftforge.event.entity.living.LivingDeathEvent;
import net.minecraftforge.event.entity.living.MobEffectEvent;
import net.minecraftforge.event.entity.player.PlayerInteractEvent;
import net.minecraftforge.event.entity.player.TradeWithVillagerEvent;
import net.minecraftforge.event.level.BlockEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.registries.ForgeRegistries;

@Mod.EventBusSubscriber(modid = "brokenpath", bus = Mod.EventBusSubscriber.Bus.FORGE)
public class PlayerFavorEventHandler { // Mantener el nombre de la clase Luck para evitar refactorizaciones masivas de archivos externos

    // ACCIONES PARA RECIBIR FAVOR (antes Suerte)
    // 1. Domar Animales
    @SubscribeEvent
    public static void onAnimalTamed(AnimalTameEvent event) {
        Player player = event.getTamer();
        if (player != null) {
            player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                ResourceLocation entityId = ForgeRegistries.ENTITY_TYPES.getKey(event.getAnimal().getType());
                if (entityId != null) {
                    String actionKey = "TAME_" + entityId.getPath().toUpperCase();
                    // Usar favorActionModifiers y applyFavorModifier
                    if (ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                        playerStats.applyFavorModifier(actionKey);
                    }
                }
            });
        }
    }

    // 2. Alimentar Animales
    @SubscribeEvent
    public static void onPlayerFeedAnimal(PlayerInteractEvent.EntityInteract event) {
        if (event.getTarget() instanceof Animal animal && event.getHand() == InteractionHand.MAIN_HAND) {
            Player player = event.getEntity();
            ItemStack heldItem = player.getItemInHand(event.getHand());

            if (isFedSuccessfully(animal, heldItem)) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    ResourceLocation entityId = ForgeRegistries.ENTITY_TYPES.getKey(animal.getType());
                    if (entityId != null) {
                        String actionKey = "FEED_" + entityId.getPath().toUpperCase();
                        // Usar favorActionModifiers y applyFavorModifier
                        if (ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                            playerStats.applyFavorModifier(actionKey);
                        }
                    }
                });
            }
        }
    }

    // 3. Comerciar con Aldeanos (por Profesión) - ¡XP REDIRIGIDA!
    @SubscribeEvent
    public static void onVillagerTrade(TradeWithVillagerEvent event) {
        Entity traderEntity = event.getEntity();
        if (traderEntity instanceof Player player) {
            if (event.getAbstractVillager() instanceof Villager villager) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    String actionKey;
                    VillagerProfession profession = villager.getVillagerData().getProfession();

                    // Construimos la clave de acción basada en la profesión.
                    if (profession != VillagerProfession.NONE && profession != VillagerProfession.NITWIT) {
                        String professionName = ForgeRegistries.VILLAGER_PROFESSIONS.getKey(profession).getPath().toUpperCase();
                        actionKey = "TRADE_" + professionName;

                        // Usar favorActionModifiers
                        if (!ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                            actionKey = "TRADE_VILLAGER";
                        }
                    } else {
                        actionKey = "TRADE_VILLAGER"; // Para aldeanos sin profesión o "nitwits"
                    }

                    // Usar favorActionModifiers y applyFavorModifier
                    if (ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                        playerStats.applyFavorModifier(actionKey);

                        int experienceAmount = 5; // Cantidad de experiencia base (configurable si se desea)
                        if (!player.level().isClientSide) {
                            // player.giveExperiencePoints(experienceAmount); // ¡ELIMINADO!
                            // Redirigir XP al sistema de XP del mod
                            player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                                playerXP.addExperience(experienceAmount);
                            });
                        }
                    }
                });
            }
        }
    }

    // 4. Reparar Golems
    @SubscribeEvent
    public static void onPlayerRepairGolem(PlayerInteractEvent.EntityInteract event) {
        if (event.getHand() == InteractionHand.MAIN_HAND && !event.getLevel().isClientSide()) {
            if (event.getTarget() instanceof IronGolem golem) {
                Player player = event.getEntity();
                ItemStack heldItem = player.getItemInHand(event.getHand());

                if (heldItem.getItem() == Items.IRON_INGOT) {
                    if (golem.getHealth() < golem.getMaxHealth()) {
                        player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                            String actionKey = "REPAIR_GOLEM";
                            // Usar favorActionModifiers y applyFavorModifier
                            if (ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                                playerStats.applyFavorModifier(actionKey);
                            }
                        });
                    }
                }
            }
        }
    }

    // 5. Defender Aldea de Invasiones --- DETECCIÓN POR EFECTO HERO OF THE VILLAGE ---
    @SubscribeEvent
    public static void onHeroOfTheVillageApplied(MobEffectEvent.Added event) {
        // Aseguramos que el efecto se aplica a un jugador y solo en el lado del servidor
        if (event.getEntity() instanceof Player player && !event.getEntity().level().isClientSide()) {
            // Verificamos si el efecto añadido es Hero of the Village
            if (event.getEffectInstance().getEffect() == MobEffects.HERO_OF_THE_VILLAGE) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    String actionKey = "DEFEND_RAID";
                    // Usar favorActionModifiers y applyFavorModifier
                    if (ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                        playerStats.applyFavorModifier(actionKey);
                        System.out.println("DEBUG FavorEvent: Player " + player.getName().getString() +
                                " received Hero of the Village effect. Applied favor modifier for '" + actionKey + "'.");
                    } else {
                        System.out.println("DEBUG FavorEvent: Action key '" + actionKey + "' not found in ModConfigs. Skipping favor modifier for defending raid (Hero of the Village).");
                    }
                });
            }
        }
    }

    // ACCIONES PARA PERDER FAVOR (antes Suerte)
    // 1. Matar Entidades (Aldeanos, Golems, Animales)
    @SubscribeEvent
    public static void onLivingKilled(LivingDeathEvent event) {
        // Aseguramos que el asesino sea un jugador y solo en el lado del servidor
        if (event.getSource().getEntity() instanceof Player player && !event.getEntity().level().isClientSide()) {

            // Caso 1: Matar un Aldeano
            if (event.getEntity() instanceof Villager) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    String actionKey = "KILL_VILLAGER";
                    // Usar favorActionModifiers y applyFavorModifier
                    if (ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                        playerStats.applyFavorModifier(actionKey);
                    }
                });
            }
            // Caso 2: Matar un Golem (Iron Golem o Snow Golem)
            else if (event.getEntity() instanceof IronGolem || event.getEntity() instanceof SnowGolem) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    String actionKey = "KILL_GOLEM";
                    // Usar favorActionModifiers y applyFavorModifier
                    if (ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                        playerStats.applyFavorModifier(actionKey);
                    }
                });
            }
            // Caso 3: Matar Animales
            else if (event.getEntity() instanceof Animal animal) {
                ResourceLocation entityId = ForgeRegistries.ENTITY_TYPES.getKey(animal.getType());
                if (entityId != null) {
                    String entityTypeName = entityId.getPath();
                    boolean givesFood = animal instanceof Chicken || animal instanceof Cow ||
                            animal instanceof Pig || animal instanceof Sheep;

                    if (!givesFood) { // Si el animal NO da comida al matarlo (ej. lobo, gato, caballo, zorro, etc.)
                        String actionKey = "KILL_" + entityTypeName.toUpperCase();
                        // Usar favorActionModifiers y applyFavorModifier
                        if (ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                            player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                                playerStats.applyFavorModifier(actionKey);
                            });
                        }
                    }
                }
            }
        }
    }

    // ACCIONES PARA PERDER FAVOR (antes Suerte)
    // 1. Atacar Aldeanos
    @SubscribeEvent
    public static void onVillagerDamaged(LivingDamageEvent event) {
        // Aseguramos que el atacante sea un jugador y solo en el lado del servidor
        if (event.getSource().getEntity() instanceof Player player && !event.getEntity().level().isClientSide()) {
            // Verificar si el objetivo dañado es un Aldeano
            if (event.getEntity() instanceof Villager villager) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    String actionKey;
                    VillagerProfession profession = villager.getVillagerData().getProfession();

                    if (profession != VillagerProfession.NONE && profession != VillagerProfession.NITWIT) {
                        String professionName = ForgeRegistries.VILLAGER_PROFESSIONS.getKey(profession).getPath().toUpperCase();
                        actionKey = "ATTACK_" + professionName;

                        // Usar favorActionModifiers
                        if (!ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                            actionKey = "ATTACK_VILLAGER";
                        }
                    } else {
                        actionKey = "ATTACK_VILLAGER";
                    }

                    // Usar favorActionModifiers y applyFavorModifier
                    if (ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                        playerStats.applyFavorModifier(actionKey);
                    }
                });
            }
        }
    }

    // 2. Dañar Golems
    @SubscribeEvent
    public static void onGolemDamaged(LivingDamageEvent event) {
        // Aseguramos que el atacante sea un jugador y que el objetivo sea un Iron Golem o un Snow Golem
        if (event.getSource().getEntity() instanceof Player player) {
            if (event.getEntity() instanceof IronGolem || event.getEntity() instanceof SnowGolem) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    String actionKey = "DAMAGE_GOLEM";
                    // Usar favorActionModifiers y applyFavorModifier
                    if (ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                        playerStats.applyFavorModifier(actionKey);
                    }
                });
            }
        }
    }

    // 3. Quitar Calabaza a Golem de Nieve
    @SubscribeEvent
    public static void onPlayerShearSnowGolemPumpkin(PlayerInteractEvent.EntityInteract event) {
        if (event.getHand() == InteractionHand.MAIN_HAND && !event.getLevel().isClientSide()) {
            if (event.getTarget() instanceof SnowGolem snowGolem) {
                Player player = event.getEntity();
                ItemStack heldItem = player.getItemInHand(event.getHand());

                // Los golems de nieve tienen una calabaza tallada
                if (heldItem.getItem() == Items.SHEARS) {
                    // Verificamos si el golem de nieve realmente tiene una calabaza
                    if (snowGolem.hasPumpkin()) {
                        // El evento se dispara ANTES de que la lógica interna del golem quite la calabaza.
                        player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                            String actionKey = "SHEAR_SNOW_GOLEM_PUMPKIN";
                            // Usar favorActionModifiers y applyFavorModifier
                            if (ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                                playerStats.applyFavorModifier(actionKey);
                            }
                        });
                    }
                }
            }
        }
    }

    // 4. Destruir Bloques de Aldea
    @SubscribeEvent
    public static void onBlockBrokenInVillage(BlockEvent.BreakEvent event) {
        Player player = event.getPlayer();
        if (player != null && !event.getLevel().isClientSide()) {
            ServerLevel serverLevel = (ServerLevel) event.getLevel();
            BlockPos brokenPos = event.getPos();
            Block brokenBlock = event.getState().getBlock();

            PoiManager poiManager = serverLevel.getPoiManager();

            boolean isNearVillagePoi = poiManager.getInRange(poiType -> {
                                // Verificar si es un POI de hogar (cama, punto de encuentro)
                                return poiType.is(PoiTypes.HOME) ||
                                        poiType.is(PoiTypes.ARMORER) ||
                                        poiType.is(PoiTypes.BUTCHER) ||
                                        poiType.is(PoiTypes.CARTOGRAPHER) ||
                                        poiType.is(PoiTypes.CLERIC) ||
                                        poiType.is(PoiTypes.FARMER) ||
                                        poiType.is(PoiTypes.FISHERMAN) ||
                                        poiType.is(PoiTypes.FLETCHER) ||
                                        poiType.is(PoiTypes.LEATHERWORKER) ||
                                        poiType.is(PoiTypes.LIBRARIAN) ||
                                        poiType.is(PoiTypes.MASON) ||
                                        poiType.is(PoiTypes.SHEPHERD) ||
                                        poiType.is(PoiTypes.TOOLSMITH) ||
                                        poiType.is(PoiTypes.WEAPONSMITH);
                            },
                            brokenPos, 32, PoiManager.Occupancy.ANY) // Radio de 32 bloques
                    .findAny()
                    .isPresent();

            if (isNearVillagePoi) {
                boolean isImportantBlock =
                        brokenBlock instanceof BedBlock ||
                                brokenBlock instanceof DoorBlock ||
                                brokenBlock.equals(Blocks.COMPOSTER) ||
                                brokenBlock.equals(Blocks.BARREL) ||
                                brokenBlock.equals(Blocks.SMOKER) ||
                                brokenBlock.equals(Blocks.BLAST_FURNACE) ||
                                brokenBlock.equals(Blocks.LECTERN) ||
                                brokenBlock.equals(Blocks.CAULDRON) ||
                                brokenBlock.equals(Blocks.GRINDSTONE) ||
                                brokenBlock.equals(Blocks.LOOM) ||
                                brokenBlock.equals(Blocks.SMITHING_TABLE) ||
                                brokenBlock.equals(Blocks.CARTOGRAPHY_TABLE) ||
                                brokenBlock.equals(Blocks.FLETCHING_TABLE) ||
                                brokenBlock.equals(Blocks.BELL) ||
                                brokenBlock.equals(Blocks.DARK_OAK_DOOR) ||
                                brokenBlock.equals(Blocks.ACACIA_DOOR) ||
                                brokenBlock.equals(Blocks.BIRCH_DOOR) ||
                                brokenBlock.equals(Blocks.OAK_DOOR) ||
                                brokenBlock.equals(Blocks.SPRUCE_DOOR) ||
                                brokenBlock.equals(Blocks.JUNGLE_DOOR) ||
                                brokenBlock.equals(Blocks.BOOKSHELF) ||
                                brokenBlock.equals(Blocks.STONECUTTER);


                if (isImportantBlock) {
                    player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                        String actionKey = "DESTROY_VILLAGE_BLOCK";
                        // Usar favorActionModifiers y applyFavorModifier
                        if (ModConfigs.getInstance().favorActionModifiers.containsKey(actionKey)) {
                            playerStats.applyFavorModifier(actionKey);
                        }
                    });
                }
            }
        }
    }

    // Procedimiento para comprobar que se alimentó al animal
    private static boolean isFedSuccessfully(Animal animal, ItemStack heldItem) {
        if (animal instanceof Chicken && heldItem.getItem() == Items.WHEAT_SEEDS) {
            return true;
        } else if (animal instanceof Cow && heldItem.getItem() == Items.WHEAT) {
            return true;
        } else if (animal instanceof Pig && (heldItem.getItem() == Items.CARROT ||
                heldItem.getItem() == Items.POTATO || heldItem.getItem() == Items.BEETROOT)) {
            return true;
        } else if (animal instanceof Sheep && heldItem.getItem() == Items.WHEAT) {
            return true;
        } else if (animal instanceof Parrot && heldItem.getItem() == Items.WHEAT_SEEDS) {
            return true;
        } else if (animal instanceof Panda && heldItem.getItem() == Items.BAMBOO) {
            return true;
        } else return animal instanceof Fox && heldItem.getItem() == Items.SWEET_BERRIES;
    }

}
