package com.malware98.brokenpath.events;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.config.FavorActionDataConfig;
import com.malware98.brokenpath.data.config.VillagerTradeDataConfig;
import net.minecraft.core.BlockPos;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.ai.village.poi.PoiManager;
import net.minecraft.world.entity.ai.village.poi.PoiTypes;
import net.minecraft.world.entity.animal.*;
import net.minecraft.world.entity.npc.Villager;
import net.minecraft.world.entity.npc.VillagerProfession;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.block.BedBlock;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.DoorBlock;
import net.minecraftforge.event.entity.living.AnimalTameEvent;
import net.minecraftforge.event.entity.living.LivingDamageEvent;
import net.minecraftforge.event.entity.living.LivingDeathEvent;
import net.minecraftforge.event.entity.living.MobEffectEvent;
import net.minecraftforge.event.entity.player.PlayerInteractEvent;
import net.minecraftforge.event.entity.player.TradeWithVillagerEvent;
import net.minecraftforge.event.level.BlockEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.registries.ForgeRegistries;

import java.util.Objects;

/**
 * Handles events related to the player's Favor (Luck) system.
 * Listens for various interactions to gain or lose Favor.
 */
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class PlayerFavorEventHandler {

    // --- Favor Gain Methods ---
    @SubscribeEvent // Subscribes to AnimalTameEvent
    public static void onAnimalTamed(AnimalTameEvent event) {
        Player player = event.getTamer();
        if (player != null && !player.level().isClientSide()) {
            player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                ResourceLocation entityId = ForgeRegistries.ENTITY_TYPES.getKey(event.getAnimal().getType());
                if (entityId != null) {
                    String actionKey = "TAME_" + entityId.getPath().toUpperCase();
                    float favorModifier = FavorActionDataConfig.getInstance().getFavorModifier(actionKey);
                    if (favorModifier != 0.0f) {
                        playerStats.applyFavorModifier(actionKey);
                    }
                }
            });
        }
    }

    @SubscribeEvent // Subscribes to PlayerInteractEvent.EntityInteract
    public static void onPlayerFeedAnimal(PlayerInteractEvent.EntityInteract event) {
        if (event.getTarget() instanceof Animal animal && event.getHand() == InteractionHand.MAIN_HAND && !event.getLevel().isClientSide()) {
            Player player = event.getEntity();
            ItemStack heldItem = player.getItemInHand(event.getHand());

            if (isFedSuccessfully(animal, heldItem)) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    ResourceLocation entityId = ForgeRegistries.ENTITY_TYPES.getKey(animal.getType());
                    if (entityId != null) {
                        String actionKey = "FEED_" + entityId.getPath().toUpperCase();
                        float favorModifier = FavorActionDataConfig.getInstance().getFavorModifier(actionKey);
                        if (favorModifier != 0.0f) {
                            playerStats.applyFavorModifier(actionKey);
                        }
                    }
                });
            }
        }
    }

    @SubscribeEvent // Subscribes to TradeWithVillagerEvent
    public static void onVillagerTrade(TradeWithVillagerEvent event) {
        Entity traderEntity = event.getEntity();
        if (traderEntity instanceof Player player && !player.level().isClientSide()) {
            if (event.getAbstractVillager() instanceof Villager villager) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    VillagerTradeDataConfig tradeSettings = VillagerTradeDataConfig.getInstance();

                    long currentTick = player.level().getGameTime();

                    boolean canGainFavor = false;
                    if (playerStats.getVillagerTradesSinceLastFavor() < tradeSettings.getMaxTradesBeforeCooldown()) {
                        canGainFavor = true;
                    } else {
                        long timeSinceLastFavorGain = currentTick - playerStats.getLastVillagerFavorGainTick();
                        if (timeSinceLastFavorGain >= tradeSettings.getTradeFavorCooldownTicks()) {
                            playerStats.setVillagerTradesSinceLastFavor(0);
                            canGainFavor = true;
                        }
                    }

                    if (canGainFavor) {
                        String actionKey;
                        VillagerProfession profession = villager.getVillagerData().getProfession();

                        if (profession != VillagerProfession.NONE && profession != VillagerProfession.NITWIT) {
                            String professionName = Objects.requireNonNull(ForgeRegistries.VILLAGER_PROFESSIONS.getKey(profession)).getPath().toUpperCase();
                            actionKey = "TRADE_" + professionName;
                            if (FavorActionDataConfig.getInstance().getFavorModifier(actionKey) == 0.0f) {
                                actionKey = "TRADE_VILLAGER";
                            }
                        } else {
                            actionKey = "TRADE_VILLAGER";
                        }

                        float favorModifier = FavorActionDataConfig.getInstance().getFavorModifier(actionKey);
                        if (favorModifier != 0.0f) {
                            playerStats.applyFavorModifier(actionKey);
                            playerStats.setVillagerTradesSinceLastFavor(playerStats.getVillagerTradesSinceLastFavor() + 1);
                            playerStats.setLastVillagerFavorGainTick(currentTick);
                        }
                    }

                    int experienceAmount = tradeSettings.getDefaultTradeXp();
                    player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                        playerXP.addExperience(experienceAmount);
                    });
                });
            }
        }
    }

    @SubscribeEvent // Subscribes to PlayerInteractEvent.EntityInteract
    public static void onPlayerRepairGolem(PlayerInteractEvent.EntityInteract event) {
        if (event.getHand() == InteractionHand.MAIN_HAND && !event.getLevel().isClientSide()) {
            if (event.getTarget() instanceof IronGolem golem) {
                Player player = event.getEntity();
                ItemStack heldItem = player.getItemInHand(event.getHand());

                if (heldItem.getItem() == Items.IRON_INGOT) {
                    if (golem.getHealth() < golem.getMaxHealth()) {
                        player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                            String actionKey = "REPAIR_GOLEM";
                            float favorModifier = FavorActionDataConfig.getInstance().getFavorModifier(actionKey);
                            if (favorModifier != 0.0f) {
                                playerStats.applyFavorModifier(actionKey);
                            }
                        });
                    }
                }
            }
        }
    }

    @SubscribeEvent // Subscribes to MobEffectEvent.Added
    public static void onHeroOfTheVillageApplied(MobEffectEvent.Added event) {
        if (event.getEntity() instanceof Player player && !event.getEntity().level().isClientSide()) {
            if (event.getEffectInstance().getEffect() == MobEffects.HERO_OF_THE_VILLAGE) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    String actionKey = "DEFEND_RAID";
                    float favorModifier = FavorActionDataConfig.getInstance().getFavorModifier(actionKey);
                    if (favorModifier != 0.0f) {
                        playerStats.applyFavorModifier(actionKey);
                    }
                });
            }
        }
    }

    // --- Favor Loss Methods ---
    @SubscribeEvent // Subscribes to LivingDeathEvent
    public static void onLivingKilled(LivingDeathEvent event) {
        if (event.getSource().getEntity() instanceof Player player && !event.getEntity().level().isClientSide()) {
            if (event.getEntity() instanceof Villager) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    String actionKey = "KILL_VILLAGER";
                    float favorModifier = FavorActionDataConfig.getInstance().getFavorModifier(actionKey);
                    if (favorModifier != 0.0f) {
                        playerStats.applyFavorModifier(actionKey);
                    }
                });
            } else if (event.getEntity() instanceof IronGolem || event.getEntity() instanceof SnowGolem) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    String actionKey = "KILL_GOLEM";
                    float favorModifier = FavorActionDataConfig.getInstance().getFavorModifier(actionKey);
                    if (favorModifier != 0.0f) {
                        playerStats.applyFavorModifier(actionKey);
                    }
                });
            } else if (event.getEntity() instanceof Animal animal) {
                ResourceLocation entityId = ForgeRegistries.ENTITY_TYPES.getKey(animal.getType());
                if (entityId != null) {
                    String entityTypeName = entityId.getPath();
                    boolean givesFood = animal instanceof Chicken || animal instanceof Cow ||
                            animal instanceof Pig || animal instanceof Sheep;

                    if (!givesFood) {
                        player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                            String actionKey = "KILL_" + entityTypeName.toUpperCase();
                            float favorModifier = FavorActionDataConfig.getInstance().getFavorModifier(actionKey);
                            if (favorModifier != 0.0f) {
                                playerStats.applyFavorModifier(actionKey);
                            }
                        });
                    }
                }
            }
        }
    }

    @SubscribeEvent // Subscribes to LivingDamageEvent
    public static void onVillagerDamaged(LivingDamageEvent event) {
        if (event.getSource().getEntity() instanceof Player player && !event.getEntity().level().isClientSide()) {
            if (event.getEntity() instanceof Villager villager) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    String actionKey;
                    VillagerProfession profession = villager.getVillagerData().getProfession();

                    if (profession != VillagerProfession.NONE && profession != VillagerProfession.NITWIT) {
                        String professionName = Objects.requireNonNull(ForgeRegistries.VILLAGER_PROFESSIONS.getKey(profession)).getPath().toUpperCase();
                        actionKey = "ATTACK_" + professionName;
                        if (FavorActionDataConfig.getInstance().getFavorModifier(actionKey) == 0.0f) {
                            actionKey = "ATTACK_VILLAGER";
                        }
                    } else {
                        actionKey = "ATTACK_VILLAGER";
                    }

                    float favorModifier = FavorActionDataConfig.getInstance().getFavorModifier(actionKey);
                    if (favorModifier != 0.0f) {
                        playerStats.applyFavorModifier(actionKey);
                    }
                });
            }
        }
    }

    @SubscribeEvent // Subscribes to LivingDamageEvent
    public static void onGolemDamaged(LivingDamageEvent event) {
        if (event.getSource().getEntity() instanceof Player player && !event.getEntity().level().isClientSide()) {
            if (event.getEntity() instanceof IronGolem || event.getEntity() instanceof SnowGolem) {
                player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                    String actionKey = "DAMAGE_GOLEM";
                    float favorModifier = FavorActionDataConfig.getInstance().getFavorModifier(actionKey);
                    if (favorModifier != 0.0f) {
                        playerStats.applyFavorModifier(actionKey);
                    }
                });
            }
        }
    }

    @SubscribeEvent // Subscribes to PlayerInteractEvent.EntityInteract
    public static void onPlayerShearSnowGolemPumpkin(PlayerInteractEvent.EntityInteract event) {
        if (event.getHand() == InteractionHand.MAIN_HAND && !event.getLevel().isClientSide()) {
            if (event.getTarget() instanceof SnowGolem snowGolem) {
                Player player = event.getEntity();
                ItemStack heldItem = player.getItemInHand(event.getHand());

                if (heldItem.getItem() == Items.SHEARS && snowGolem.hasPumpkin()) {
                    player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                        String actionKey = "SHEAR_SNOW_GOLEM_PUMAREN";
                        float favorModifier = FavorActionDataConfig.getInstance().getFavorModifier(actionKey);
                        if (favorModifier != 0.0f) {
                            playerStats.applyFavorModifier(actionKey);
                        }
                    });
                }
            }
        }
    }

    @SubscribeEvent // Subscribes to BlockEvent.BreakEvent
    public static void onBlockBrokenInVillage(BlockEvent.BreakEvent event) {
        Player player = event.getPlayer();
        if (player != null && !event.getLevel().isClientSide()) {
            ServerLevel serverLevel = (ServerLevel) event.getLevel();
            BlockPos brokenPos = event.getPos();
            Block brokenBlock = event.getState().getBlock();

            PoiManager poiManager = serverLevel.getPoiManager();
            boolean isNearVillagePoi = poiManager.getInRange(poiType ->
                                    poiType.is(PoiTypes.HOME) || poiType.is(PoiTypes.ARMORER) ||
                                            poiType.is(PoiTypes.BUTCHER) || poiType.is(PoiTypes.CARTOGRAPHER) ||
                                            poiType.is(PoiTypes.CLERIC) || poiType.is(PoiTypes.FARMER) ||
                                            poiType.is(PoiTypes.FISHERMAN) || poiType.is(PoiTypes.FLETCHER) ||
                                            poiType.is(PoiTypes.LEATHERWORKER) || poiType.is(PoiTypes.LIBRARIAN) ||
                                            poiType.is(PoiTypes.MASON) || poiType.is(PoiTypes.SHEPHERD) ||
                                            poiType.is(PoiTypes.TOOLSMITH) || poiType.is(PoiTypes.WEAPONSMITH),
                            brokenPos, 32, PoiManager.Occupancy.ANY)
                    .findAny()
                    .isPresent();

            if (isNearVillagePoi) {
                boolean isImportantBlock =
                        brokenBlock instanceof BedBlock || brokenBlock instanceof DoorBlock ||
                                Objects.equals(brokenBlock, Blocks.COMPOSTER) || Objects.equals(brokenBlock, Blocks.BARREL) ||
                                Objects.equals(brokenBlock, Blocks.SMOKER) || Objects.equals(brokenBlock, Blocks.BLAST_FURNACE) ||
                                Objects.equals(brokenBlock, Blocks.LECTERN) || Objects.equals(brokenBlock, Blocks.CAULDRON) ||
                                Objects.equals(brokenBlock, Blocks.GRINDSTONE) || Objects.equals(brokenBlock, Blocks.LOOM) ||
                                Objects.equals(brokenBlock, Blocks.SMITHING_TABLE) || Objects.equals(brokenBlock, Blocks.CARTOGRAPHY_TABLE) ||
                                Objects.equals(brokenBlock, Blocks.FLETCHING_TABLE) || Objects.equals(brokenBlock, Blocks.BELL) ||
                                Objects.equals(brokenBlock, Blocks.DARK_OAK_DOOR) || Objects.equals(brokenBlock, Blocks.ACACIA_DOOR) ||
                                Objects.equals(brokenBlock, Blocks.BIRCH_DOOR) || Objects.equals(brokenBlock, Blocks.OAK_DOOR) ||
                                Objects.equals(brokenBlock, Blocks.SPRUCE_DOOR) || Objects.equals(brokenBlock, Blocks.JUNGLE_DOOR) ||
                                Objects.equals(brokenBlock, Blocks.BOOKSHELF) || Objects.equals(brokenBlock, Blocks.STONECUTTER);

                if (isImportantBlock) {
                    player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                        String actionKey = "DESTROY_VILLAGE_BLOCK";
                        float favorModifier = FavorActionDataConfig.getInstance().getFavorModifier(actionKey);
                        if (favorModifier != 0.0f) {
                            playerStats.applyFavorModifier(actionKey);
                        }
                    });
                }
            }
        }
    }

    // --- Helper Methods ---
    /**
     * Checks if an animal was successfully fed with its specific correct item.
     * @param animal The animal entity.
     * @param heldItem The item held by the player.
     * @return True if the animal was fed, false otherwise.
     */
    private static boolean isFedSuccessfully(Animal animal, ItemStack heldItem) {
        return animal.isFood(heldItem) && !animal.isInLove() && animal.getAge() == 0;
    }
}