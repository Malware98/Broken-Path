package com.malware98.brokenpath.events;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.capabilities.PlayerCapabilityProvider;
import com.malware98.brokenpath.capabilities.PlayerXPCapabilityProvider;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.config.MainModConfigManager;
import com.malware98.brokenpath.data.config.XpDataConfig;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.player.Player;
import net.minecraftforge.event.AttachCapabilitiesEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;

import java.util.Optional;

/**
 * Handles events related to custom player capabilities in "BrokenPath".
 * Responsible for attaching capabilities and managing data transfer on clone events.
 */
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class ModCapabilityEventHandler {

    /**
     * Attaches custom capabilities to player entities.
     */
    @SubscribeEvent // Subscribes to AttachCapabilitiesEvent<Entity>
    public static void onAttachCapabilitiesEntity(AttachCapabilitiesEvent<Entity> event) {
        if (event.getObject() instanceof Player player) {
            if (!player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).isPresent()) {
                event.addCapability(new ResourceLocation(BrokenPath.MOD_ID, "player_stats"), new PlayerCapabilityProvider(player));
            }
            if (!player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).isPresent()) {
                event.addCapability(new ResourceLocation(BrokenPath.MOD_ID, "player_xp"), new PlayerXPCapabilityProvider(player));
            }
        }
    }

    /**
     * Handles player cloning events (death or dimension change) for data persistence.
     */
    @SubscribeEvent // Subscribes to PlayerEvent.Clone
    public static void onPlayerClone(PlayerEvent.Clone event) {
        if (!event.getEntity().level().isClientSide()) {
            Player newPlayer = event.getEntity();
            Player originalPlayer = event.getOriginal();

            // --- Handle Player Death (data transfer with penalties) ---
            if (event.isWasDeath()) {
                originalPlayer.reviveCaps();

                originalPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(oldXP -> {
                    newPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(newXP -> {
                        CompoundTag xpNBT = oldXP.serializeNBT();
                        newXP.deserializeNBT(xpNBT);

                        if (newXP.getLevel() < MainModConfigManager.getInstance().maxLevel) {
                            XpDataConfig xpConfigs = XpDataConfig.getInstance();
                            float penaltyPercentage = xpConfigs.getXpLossPercentageOnDeath();
                            float maxDebtPercentage = xpConfigs.getXpMaxDebtPercentage();

                            int xpPotencial = xpConfigs.getXpNeededForNextLevel(newXP.getLevel());
                            if (xpPotencial == 0 && newXP.getLevel() < MainModConfigManager.getInstance().maxLevel) {
                                xpPotencial = 1000;
                            }

                            int basePenalty = (int) (xpPotencial * penaltyPercentage);
                            int maxAllowedDebt = (int) (xpPotencial * maxDebtPercentage);

                            if (newXP.getXPDebt() < maxAllowedDebt) {
                                newXP.setXPDebt(newXP.getXPDebt() + basePenalty);
                                if (newXP.getXPDebt() > maxAllowedDebt) {
                                    newXP.setXPDebt(maxAllowedDebt);
                                }
                            }
                        }
                    });
                });

                originalPlayer.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(oldStats -> {
                    newPlayer.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(newStats -> {
                        CompoundTag statsNBT = oldStats.serializeNBT();
                        newStats.deserializeNBT(statsNBT);
                        PlayerStatEventHandler.recalculateAndApplyStats(newPlayer);
                    });
                });

                originalPlayer.invalidateCaps();

            } else { // --- Handle Dimension Change (direct data copy) ---
                originalPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(oldXP -> {
                    newPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(newXP -> {
                        newXP.copyFrom(oldXP);
                    });
                });

                originalPlayer.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(oldStats -> {
                    newPlayer.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(newStats -> {
                        newStats.copyFrom(oldStats);
                    });
                });
            }
        }
    }
}