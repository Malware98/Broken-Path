package com.malware98.brokenpath.events;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.capabilities.PlayerCapabilityProvider;
import com.malware98.brokenpath.capabilities.PlayerXPCapabilityProvider;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.player.Player;
import net.minecraftforge.event.AttachCapabilitiesEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;

/*
 * Clase de manejo de eventos para las capacidades personalizadas del mod.
 * Se encarga de adjuntar las capacidades de jugador (Player Data y Player XP)
 * a las entidades de jugador y de gestionar la copia/transferencia de datos
 * entre jugadores al morir o cambiar de dimensión.
 */
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class ModCapabilityEventHandler {

    // Maneja el evento de adjuntar capacidades a una entidad.
    // Adjunta las capacidades de datos de jugador y experiencia a las entidades de jugador.
    @SubscribeEvent
    public static void onAttachCapabilitiesEntity(AttachCapabilitiesEvent<Entity> event) {
        if (event.getObject() instanceof Player player) {
            if (!player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).isPresent()) {
                event.addCapability(new ResourceLocation(BrokenPath.MOD_ID, "player_stats"), new PlayerCapabilityProvider(player));
            }
            if (!player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).isPresent()) {
                event.addCapability(new ResourceLocation(BrokenPath.MOD_ID, "player_xp"), new PlayerXPCapabilityProvider(player));
            }
        }
    }

    // Maneja el evento de clonación de jugador.
    // Transfiere los datos de capacidad del jugador original al nuevo jugador al morir o cambiar de dimensión.
    @SubscribeEvent
    public static void onPlayerClone(PlayerEvent.Clone event) {
        Player newPlayer = event.getEntity();
        Player originalPlayer = event.getOriginal();

        if (event.isWasDeath()) {
            // Revive todas las capacidades adjuntas al jugador original para su lectura.
            originalPlayer.reviveCaps();

            // Transfiere la capacidad de XP del jugador original al nuevo jugador.
            originalPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(oldXP -> {
                newPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(newXP -> {
                    // Serializa el NBT de oldXP y deserializa en newXP.
                    CompoundTag xpNBT = oldXP.serializeNBT();
                    newXP.deserializeNBT(xpNBT); // deserializeNBT llama a sync() internamente.

                    // Aplica la lógica de penalización por muerte si el jugador no está en el nivel máximo.
                    if (newXP.getLevel() >= ModConfigs.MAX_LEVEL) {
                        // Penalización de XP omitida, ya que el jugador está en el Nivel Máximo.
                    } else {
                        ModConfigs configs = ModConfigs.getInstance();
                        float penaltyPercentage = configs.xpSettings.xpLossPercentageOnDeath;
                        float maxDebtPercentage = configs.xpSettings.xpMaxDebtPercentage;

                        int xpPotencial = configs.getXPForNextLevel(newXP.getLevel());
                        if (newXP.getLevel() == 1 && xpPotencial == 0 && ModConfigs.MAX_LEVEL > 1) {
                            xpPotencial = configs.getXPForNextLevel(1);
                        }
                        if (xpPotencial == 0 && newXP.getLevel() < ModConfigs.MAX_LEVEL) {
                            // Valor de respaldo si la XP para el siguiente nivel es 0.
                            xpPotencial = 1000;
                        }

                        int penalizacionBase = (int) (xpPotencial * penaltyPercentage);
                        int deudaMaximaPermitida = (int) (xpPotencial * maxDebtPercentage);

                        if (newXP.getXPDebt() >= deudaMaximaPermitida) {
                            // Penalización de XP omitida: Deuda Actual >= Deuda Máxima Permitida.
                        } else {
                            newXP.addExperience(-penalizacionBase);

                            if (newXP.getXPDebt() > deudaMaximaPermitida) {
                                newXP.setXPDebt(deudaMaximaPermitida);
                            }
                        }
                    }
                });
            });

            // Transfiere la capacidad de datos del jugador original al nuevo jugador.
            originalPlayer.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(oldStats -> {
                newPlayer.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(newStats -> {
                    // Serializa el NBT de oldStats y deserializa en newStats.
                    CompoundTag statsNBT = oldStats.serializeNBT();
                    newStats.deserializeNBT(statsNBT);
                });
            });

            // Invalida las capacidades del jugador original después de la copia para liberar recursos.
            originalPlayer.invalidateCaps();

        } else { // No fue por muerte (ej. cambio de dimensión).
            // Copia directa para la capacidad de XP del jugador.
            originalPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(oldXP -> {
                newPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(newXP -> {
                    newXP.copyFrom(oldXP);
                });
            });

            // Copia directa para la capacidad de datos del jugador.
            originalPlayer.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(oldStats -> {
                newPlayer.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(newStats -> {
                    newStats.copyFrom(oldStats);
                });
            });
        }
    }
}