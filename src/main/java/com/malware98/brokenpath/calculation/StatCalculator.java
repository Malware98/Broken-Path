package com.malware98.brokenpath.calculation;

import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.data.ModConfigs.*;

/**
 * Utility class for calculating the player's final statistics
 * based on attributes, mod configuration, race, and class.
 * Includes calculations for health, mana, vigor, protection, and regeneration.
 */
public class StatCalculator {

    // --- Final Static Calculations ---

    /**
     * Calculates maximum health based on Constitution, race, and class.
     * @param raceName The player's race name.
     * @param className The player's class name.
     * @param conPoints The player's Constitution attribute points.
     * @return The calculated maximum health.
     */
    public static float calculateHealth(String raceName, String className, int conPoints) {
        ModConfigs configs = ModConfigs.getInstance();
        // Cast is necessary as getRaceStatConfig returns StatConfigBase.
        HealthStatConfig healthConfig = (HealthStatConfig) configs.getRaceStatConfig(raceName, "HEALTH");

        // Return 0.0f to prevent NullPointerException if config is missing.
        if (healthConfig == null || healthConfig.affinityLimits == null) {
            return 0.0f;
        }

        float calculatedHealth = healthConfig.baseInitialValue;
        // Directly apply CON multiplier.
        calculatedHealth += conPoints * healthConfig.conMultiplierPerPoint; // Acceso directo al multiplicador CON
        AffinityLimit activeAffinity = healthConfig.affinityLimits.get("BASE");

        boolean classBoostsAttribute = configs.doesClassBoostAttribute(className, "CONSTITUTION");
        boolean hasRacialAffinity = configs.isClassAffinToStat(raceName, className, "HEALTH");

        // Prioritize racial affinity over class bonus.
        if (hasRacialAffinity) {
            activeAffinity = healthConfig.affinityLimits.get("RACIAL_AFFINITY");
        } else if (classBoostsAttribute) {
            activeAffinity = healthConfig.affinityLimits.get("CLASS_BONUS");
        }

        // Fallback to a safe default if activeAffinity is null.
        if (activeAffinity == null) {
            activeAffinity = new AffinityLimit(1.0f, Float.MAX_VALUE); // Safe fallback
        }

        calculatedHealth *= activeAffinity.multiplier;
        calculatedHealth = Math.min(calculatedHealth, activeAffinity.limit);

        return calculatedHealth;
    }

    /**
     * Calculates maximum mana based on Intelligence, race, and class.
     * @param raceName The player's race name.
     * @param className The player's class name.
     * @param intPoints The player's Intelligence attribute points.
     * @return The calculated maximum mana.
     */
    public static float calculateMana(String raceName, String className, int intPoints) {
        ModConfigs configs = ModConfigs.getInstance();
        // Cast is necessary as getRaceStatConfig returns StatConfigBase.
        ManaStatConfig manaConfig = (ManaStatConfig) configs.getRaceStatConfig(raceName, "MANA"); // Cast necesario

        // Return 0.0f to prevent NullPointerException if config is missing.
        if (manaConfig == null || manaConfig.affinityLimits == null) {
            return 0.0f;
        }

        float calculatedMana = manaConfig.baseInitialValue;
        // Directly apply INT multiplier.
        calculatedMana += intPoints * manaConfig.intMultiplierPerPoint; // Acceso directo al multiplicador INT

        AffinityLimit activeAffinity = manaConfig.affinityLimits.get("BASE");
        boolean classBoostsAttribute = configs.doesClassBoostAttribute(className, "INTELLIGENCE");
        boolean hasRacialAffinity = configs.isClassAffinToStat(raceName, className, "MANA");

        // Prioritize racial affinity over class bonus.
        if (hasRacialAffinity) {
            activeAffinity = manaConfig.affinityLimits.get("RACIAL_AFFINITY");
        } else if (classBoostsAttribute) {
            activeAffinity = manaConfig.affinityLimits.get("CLASS_BONUS");
        }

        // Fallback to a safe default if activeAffinity is null.
        if (activeAffinity == null) {
            activeAffinity = new AffinityLimit(1.0f, Float.MAX_VALUE);
        }

        calculatedMana *= activeAffinity.multiplier;
        calculatedMana = Math.min(calculatedMana, activeAffinity.limit);

        return calculatedMana;
    }

    /**
     * Calculates maximum vigor based on Dexterity, race, and class.
     * @param raceName The player's race name.
     * @param className The player's class name.
     * @param dexPoints The player's Dexterity attribute points.
     * @return The calculated maximum vigor.
     */
    public static float calculateVigor(String raceName, String className, int dexPoints) {
        ModConfigs configs = ModConfigs.getInstance();
        // Cast is necessary as getRaceStatConfig returns StatConfigBase.
        VigorStatConfig vigorConfig = (VigorStatConfig) configs.getRaceStatConfig(raceName, "VIGOR");

        // Return 0.0f to prevent NullPointerException if config is missing.
        if (vigorConfig == null || vigorConfig.affinityLimits == null) {
            return 0.0f;
        }

        float calculatedVigor = vigorConfig.baseInitialValue;
        // Directly apply DEX multiplier.
        calculatedVigor += dexPoints * vigorConfig.dexMultiplierPerPoint; // Acceso directo al multiplicador DEX

        AffinityLimit activeAffinity = vigorConfig.affinityLimits.get("BASE");
        boolean classBoostsAttribute = configs.doesClassBoostAttribute(className, "DEXTERITY");
        boolean hasRacialAffinity = configs.isClassAffinToStat(raceName, className, "VIGOR");

        // Prioritize racial affinity over class bonus.
        if (hasRacialAffinity) {
            activeAffinity = vigorConfig.affinityLimits.get("RACIAL_AFFINITY");
        } else if (classBoostsAttribute) {
            activeAffinity = vigorConfig.affinityLimits.get("CLASS_BONUS");
        }

        // Fallback to a safe default if activeAffinity is null.
        if (activeAffinity == null) {
            activeAffinity = new AffinityLimit(1.0f, Float.MAX_VALUE);
        }

        calculatedVigor *= activeAffinity.multiplier;
        calculatedVigor = Math.min(calculatedVigor, activeAffinity.limit);

        return calculatedVigor;
    }

    /**
     * Calculates the protection value based on Strength, race, and class.
     *
     * @param raceName    The name of the player's race.
     * @param className   The name of the player's class.
     * @param strPoints   The player's Strength attribute points.
     * @return The calculated protection value.
     */
    public static float calculateProtectionFromSTR(String raceName, String className, int strPoints) {
        ModConfigs configs = ModConfigs.getInstance();
        ProtectionStatConfig protectionConfig = configs.getRaceProtectionConfig(raceName);

        // Return 0.0f to prevent NullPointerException if config is missing.
        if (protectionConfig == null || protectionConfig.affinityLimits == null) {
            return 0.0f;
        }

        // Directly apply STR efficacy multiplier.
        float strBasedProtection = strPoints * protectionConfig.strEfficacyMultiplierPerPoint; // Acceso directo al multiplicador STR

        AffinityLimit activeAffinity = protectionConfig.affinityLimits.get("BASE");
        boolean classBoostsAttribute = configs.doesClassBoostAttribute(className, "STRENGTH");
        boolean hasRacialAffinity = configs.isClassAffinToStat(raceName, className, "PROTECTION");

        // Prioritize racial affinity over class bonus.
        if (hasRacialAffinity) {
            activeAffinity = protectionConfig.affinityLimits.get("RACIAL_AFFINITY");
        } else if (classBoostsAttribute) {
            activeAffinity = protectionConfig.affinityLimits.get("CLASS_BONUS");
        }

        // Fallback to a safe default if activeAffinity is null.
        if (activeAffinity == null) {
            activeAffinity = new AffinityLimit(1.0f, Float.MAX_VALUE);
        }

        strBasedProtection *= activeAffinity.multiplier;
        strBasedProtection = Math.min(strBasedProtection, activeAffinity.limit);

        return strBasedProtection;
    }

    /**
     * Calculates innate protection based on player level and race.
     *
     * @param raceName     The name of the player's race.
     * @param currentLevel The player's current level.
     * @return The calculated innate protection value.
     */
    public static float calculateInnateProtection(String raceName, int currentLevel) {
        ModConfigs configs = ModConfigs.getInstance();
        ModConfigs.ProtectionInnateConfig innateConfig = configs.getRaceProtectionInnateConfig(raceName);

        // Return 0.0f if config is missing.
        if (innateConfig == null) {
            return 0.0f;
        }

        float innateProtection = innateConfig.baseValue;
        innateProtection += innateConfig.perLevelIncrease * (currentLevel - 1);
        return innateProtection;
    }

    // --- Regeneration Calculations ---

    /**
     * Calculates the cooldown ticks for health regeneration.
     * This cooldown is influenced by Constitution, regeneration speed bonuses, and combat status.
     *
     * @param constitution         The player's Constitution attribute points.
     * @param regenSpeedBonusTicks Bonus ticks to reduce cooldown (e.g., from effects).
     * @param inCombat             True if the player is currently in combat.
     * @param lastCombatExitTick   The game tick when the player last exited combat.
     * @param currentTick          The current game tick.
     * @return The effective health regeneration cooldown in ticks.
     */
    public static int calculateHealthRegenCooldown(int constitution, float regenSpeedBonusTicks, boolean inCombat, long lastCombatExitTick, long currentTick) {
        ModConfigs configs = ModConfigs.getInstance();

        // If in combat or combat delay not over, regeneration is very slow (high cooldown).
        // The effectiveCooldown calculation implicitly handles this by not having specific overrides here,
        // relying on the base values and modifiers.
        if (inCombat || (currentTick - lastCombatExitTick < configs.getHealthDelayAfterCombatTicks())) {
            // No specific action here, allowing the calculation to proceed with base values, as intended.
        }
        float conBonus = constitution * configs.getHealthRegenBonusPerConTicks();
        int effectiveCooldown = (int) (configs.getHealthRegenCooldownTicksBase() - regenSpeedBonusTicks - conBonus);
        // Ensure cooldown does not go below minimum configured value.
        return Math.max(effectiveCooldown, configs.getHealthMinEffectiveCooldownTicks());
    }

    /**
     * Calculates the amount of mana regenerated per tick.
     *
     * @param intelligence The player's Intelligence attribute points.
     * @param inCombat     True if the player is currently in combat.
     * @return The amount of mana regenerated per tick.
     */
    public static float calculateManaRegenPerTick(int intelligence, boolean inCombat) {
        ModConfigs configs = ModConfigs.getInstance();
        // Use different base regeneration rates for in/out of combat.
        float baseRegen = inCombat ? configs.getManaRegenInCombatBase() : configs.getManaRegenOutOfCombatBase();
        return baseRegen + (intelligence * configs.getManaRegenBonusPerInt());
    }

    /**
     * Calculates the amount of vigor regenerated per tick.
     *
     * @param dexterity The player's Dexterity attribute points.
     * @param inCombat  True if the player is currently in combat.
     * @return The amount of vigor regenerated per tick.
     */
    public static float calculateVigorRegenPerTick(int dexterity, boolean inCombat) {
        ModConfigs configs = ModConfigs.getInstance();
        // Use different base regeneration rates for in/out of combat.
        float baseRegen = inCombat ? configs.getVigorRegenInCombatBase() : configs.getVigorRegenOutOfCombatBase();
        return baseRegen + (dexterity * configs.getVigorRegenBonusPerDex());
    }
}