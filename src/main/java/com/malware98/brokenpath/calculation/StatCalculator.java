package com.malware98.brokenpath.calculation;

import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.data.ModConfigs.*;

/**
 * Utility class for calculating the player's final statistics
 * based on attributes, mod configuration, race, and class.
 * Includes calculations for health, mana, vigor, protection, and regeneration.
 */
public class StatCalculator {

    // --- Core Stat Calculations ---

    /**
     * Calculates maximum health based on Constitution, race, and class.
     * @param raceName The player's race name.
     * @param className The player's class name.
     * @param specializationName The player's specialization name.
     * @param conPoints The player's Constitution attribute points.
     * @return The calculated maximum health.
     */
    public static float calculateHealth(String raceName, String className, String specializationName, int conPoints) {
        ModConfigs configs = ModConfigs.getInstance();
        HealthStatConfig healthConfig = (HealthStatConfig) configs.getRaceStatConfig(raceName, "HEALTH");

        if (healthConfig == null) {
            return 0.0f;
        }

        float calculatedHealth = healthConfig.baseInitialValue;

        // Apply Constitution multiplier (global)
        calculatedHealth += conPoints * configs.getConMultiplier();

        // Apply racial affinity multiplier if applicable
        if (configs.isClassAffinToStat(raceName, className, "HEALTH")) {
            calculatedHealth *= configs.getRacialAffinityMultiplier();
        }

        // Apply flat class bonus
        calculatedHealth += configs.getClassStatBonus(className, "HEALTH");

        // Apply flat specialization bonus
        calculatedHealth += configs.getSpecializationStatBonus(specializationName, "HEALTH");

        return calculatedHealth;
    }

    /**
     * Calculates maximum mana based on Intelligence, race, and class.
     * @param raceName The player's race name.
     * @param className The player's class name.
     * @param specializationName The player's specialization name.
     * @param intPoints The player's Intelligence attribute points.
     * @return The calculated maximum mana.
     */
    public static float calculateMana(String raceName, String className, String specializationName, int intPoints) {
        ModConfigs configs = ModConfigs.getInstance();
        ManaStatConfig manaConfig = (ManaStatConfig) configs.getRaceStatConfig(raceName, "MANA");

        if (manaConfig == null) {
            return 0.0f;
        }

        float calculatedMana = manaConfig.baseInitialValue;

        // Apply Intelligence multiplier (global)
        calculatedMana += intPoints * configs.getIntMultiplier();

        // Apply racial affinity multiplier if applicable
        if (configs.isClassAffinToStat(raceName, className, "MANA")) {
            calculatedMana *= configs.getRacialAffinityMultiplier();
        }

        // Apply flat class bonus
        calculatedMana += configs.getClassStatBonus(className, "MANA");

        // Apply flat specialization bonus
        calculatedMana += configs.getSpecializationStatBonus(specializationName, "MANA");

        return calculatedMana;
    }

    /**
     * Calculates maximum vigor based on Dexterity, race, and class.
     * @param raceName The player's race name.
     * @param className The player's class name.
     * @param specializationName The player's specialization name.
     * @param dexPoints The player's Dexterity attribute points.
     * @return The calculated maximum vigor.
     */
    public static float calculateVigor(String raceName, String className, String specializationName, int dexPoints) {
        ModConfigs configs = ModConfigs.getInstance();
        VigorStatConfig vigorConfig = (VigorStatConfig) configs.getRaceStatConfig(raceName, "VIGOR");

        if (vigorConfig == null) {
            return 0.0f;
        }

        float calculatedVigor = vigorConfig.baseInitialValue;

        // Apply Dexterity multiplier (global)
        calculatedVigor += dexPoints * configs.getDexMultiplier();

        // Apply racial affinity multiplier if applicable
        if (configs.isClassAffinToStat(raceName, className, "VIGOR")) {
            calculatedVigor *= configs.getRacialAffinityMultiplier();
        }

        // Apply flat class bonus
        calculatedVigor += configs.getClassStatBonus(className, "VIGOR");

        // Apply flat specialization bonus
        calculatedVigor += configs.getSpecializationStatBonus(specializationName, "VIGOR");

        return calculatedVigor;
    }

    /**
     * Calculates the protection value based on Strength, race, and class.
     * This represents the amount of damage that can be absorbed by physical defense.
     * @param raceName The name of the player's race.
     * @param className The name of the player's class.
     * @param specializationName The player's specialization name.
     * @param strPoints The player's Strength attribute points.
     * @return The calculated protection value.
     */
    public static float calculateProtectionFromSTR(String raceName, String className, String specializationName, int strPoints) {
        ModConfigs configs = ModConfigs.getInstance();
        ProtectionStatConfig protectionConfig = configs.getRaceProtectionConfig(raceName);

        if (protectionConfig == null) {
            return 0.0f;
        }

        float calculatedProtection = protectionConfig.baseInitialValue;

        // Apply Strength efficacy multiplier (global)
        calculatedProtection += strPoints * configs.getStrMultiplier();

        // Apply racial affinity multiplier if applicable
        if (configs.isClassAffinToStat(raceName, className, "PROTECTION")) {
            calculatedProtection *= configs.getRacialAffinityMultiplier();
        }

        // Apply flat class bonus
        calculatedProtection += configs.getClassStatBonus(className, "PROTECTION");

        // Apply flat specialization bonus
        calculatedProtection += configs.getSpecializationStatBonus(specializationName, "PROTECTION");

        return calculatedProtection;
    }

    /**
     * Calculates innate protection based on player level and race.
     * Innate protection is a passive damage reduction that scales with level.
     * @param raceName The name of the player's race.
     * @param currentLevel The player's current level.
     * @return The calculated innate protection value.
     */
    public static float calculateInnateProtection(String raceName, int currentLevel) {
        ModConfigs configs = ModConfigs.getInstance();
        ModConfigs.ProtectionInnateConfig innateConfig = configs.getRaceProtectionInnateConfig(raceName);

        if (innateConfig == null) {
            return 0.0f;
        }

        float innateProtection = innateConfig.baseValue;

        // Only apply per-level increase if the base value is greater than 0.
        if (innateProtection > 0) { // NEW: Condition to check if base value is > 0
            innateProtection += configs.getInnateProtectionPerLevelIncrease() * (currentLevel - 1);
        }
        return (float) Math.round(innateProtection);
    }

    // --- Regeneration Calculations ---

    /**
     * Calculates the cooldown ticks for health regeneration.
     * This cooldown is influenced by Constitution, regeneration speed bonuses, and combat status.
     * A lower cooldown means faster regeneration.
     * @param constitution The player's Constitution attribute points.
     * @param regenSpeedBonusTicks Bonus ticks to reduce cooldown (e.g., from effects or gear).
     * @param inCombat True if the player is currently in combat.
     * @param lastCombatExitTick The game tick when the player last exited combat.
     * @param currentTick The current game tick.
     * @return The effective health regeneration cooldown in ticks.
     */
    public static int calculateHealthRegenCooldown(int constitution, float regenSpeedBonusTicks, boolean inCombat, long lastCombatExitTick, long currentTick) {
        ModConfigs configs = ModConfigs.getInstance();

        // Regeneration is significantly slowed if in combat or recently exited combat.
        // The base cooldown is modified by bonuses and CON.
        if (inCombat || (currentTick - lastCombatExitTick < configs.getHealthDelayAfterCombatTicks())) {
            // No specific action here, allowing the calculation to proceed with base values, as intended.
        }
        float conBonus = constitution * configs.getHealthRegenBonusPerConTicks();
        int effectiveCooldown = (int) (configs.getHealthRegenCooldownTicksBase() - regenSpeedBonusTicks - conBonus);
        // Ensure cooldown does not go below the minimum configured value to prevent excessively fast regen.
        return Math.max(effectiveCooldown, configs.getHealthMinEffectiveCooldownTicks());
    }

    /**
     * Calculates the amount of mana regenerated per tick.
     * Regeneration rate differs between in-combat and out-of-combat states.
     * @param intelligence The player's Intelligence attribute points.
     * @param inCombat True if the player is currently in combat.
     * @return The amount of mana regenerated per tick.
     */
    public static float calculateManaRegenPerTick(int intelligence, boolean inCombat) {
        ModConfigs configs = ModConfigs.getInstance();
        // Use different base regeneration rates depending on combat status.
        float baseRegen = inCombat ? configs.getManaRegenInCombatBase() : configs.getManaRegenOutOfCombatBase();
        return baseRegen + (intelligence * configs.getManaRegenBonusPerInt());
    }

    /**
     * Calculates the amount of vigor regenerated per tick.
     * Regeneration rate differs between in-combat and out-of-combat states.
     * @param dexterity The player's Dexterity attribute points.
     * @param inCombat True if the player is currently in combat.
     * @return The amount of vigor regenerated per tick.
     */
    public static float calculateVigorRegenPerTick(int dexterity, boolean inCombat) {
        ModConfigs configs = ModConfigs.getInstance();
        // Use different base regeneration rates depending on combat status.
        float baseRegen = inCombat ? configs.getVigorRegenInCombatBase() : configs.getVigorRegenOutOfCombatBase();
        return baseRegen + (dexterity * configs.getVigorRegenBonusPerDex());
    }
}