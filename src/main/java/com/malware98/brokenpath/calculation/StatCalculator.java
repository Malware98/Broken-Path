package com.malware98.brokenpath.calculation;

import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.data.ModConfigs.AffinityLimit;
import com.malware98.brokenpath.data.ModConfigs.ProtectionStatConfig; // Importar ProtectionStatConfig
import com.malware98.brokenpath.data.ModConfigs.StatConfigBase; // Importar StatConfigBase
import com.malware98.brokenpath.data.ModConfigs.HealthStatConfig; // Importar HealthStatConfig
import com.malware98.brokenpath.data.ModConfigs.ManaStatConfig;     // Importar ManaStatConfig
import com.malware98.brokenpath.data.ModConfigs.VigorStatConfig;   // Importar VigorStatConfig

/*
 * Clase utilitaria para calcular las estadísticas finales del jugador
 * basándose en atributos, configuración del mod, raza y clase.
 * Incluye cálculos para salud, maná, vigor, protección y regeneración.
 */
public class StatCalculator {

    // CÁLCULOS PARA ESTADÍSTICAS FINALES

    // Calcula la salud máxima basada en la Constitución, raza y clase.
    public static float calculateHealth(String raceName, String className, int conPoints) {
        ModConfigs configs = ModConfigs.getInstance();
        HealthStatConfig healthConfig = (HealthStatConfig) configs.getRaceStatConfig(raceName, "HEALTH"); // Cast necesario

        // Si healthConfig es null (lo que debería ser raro con el manejo de errores mejorado),
        // o si sus affinityLimits son null (también raro con el manejo de errores),
        // regresamos 0.0f para evitar NPE.
        if (healthConfig == null || healthConfig.affinityLimits == null) {
            return 0.0f;
        }

        float calculatedHealth = healthConfig.baseInitialValue;
        calculatedHealth += conPoints * healthConfig.conMultiplierPerPoint; // Acceso directo al multiplicador CON
        AffinityLimit activeAffinity = healthConfig.affinityLimits.get("BASE");

        boolean classBoostsAttribute = configs.doesClassBoostAttribute(className, "CONSTITUTION");
        boolean hasRacialAffinity = configs.isClassAffinToStat(raceName, className, "HEALTH");

        if (hasRacialAffinity) {
            activeAffinity = healthConfig.affinityLimits.get("RACIAL_AFFINITY");
        } else if (classBoostsAttribute) {
            activeAffinity = healthConfig.affinityLimits.get("CLASS_BONUS");
        }

        // Asegurarse de que activeAffinity no sea nulo antes de usarlo.
        if (activeAffinity == null) {
            // Esto no debería ocurrir si los constructores por defecto de AffinityLimit son robustos,
            // pero es una capa adicional de seguridad.
            activeAffinity = new AffinityLimit(1.0f, Float.MAX_VALUE); // Fallback seguro
        }

        calculatedHealth *= activeAffinity.multiplier;
        calculatedHealth = Math.min(calculatedHealth, activeAffinity.limit);

        return calculatedHealth;
    }

    // Calcula el maná máximo basada en la Inteligencia, raza y clase.
    public static float calculateMana(String raceName, String className, int intPoints) {
        ModConfigs configs = ModConfigs.getInstance();
        ManaStatConfig manaConfig = (ManaStatConfig) configs.getRaceStatConfig(raceName, "MANA"); // Cast necesario

        if (manaConfig == null || manaConfig.affinityLimits == null) {
            return 0.0f;
        }

        float calculatedMana = manaConfig.baseInitialValue;
        calculatedMana += intPoints * manaConfig.intMultiplierPerPoint; // Acceso directo al multiplicador INT

        AffinityLimit activeAffinity = manaConfig.affinityLimits.get("BASE");
        boolean classBoostsAttribute = configs.doesClassBoostAttribute(className, "INTELLIGENCE");
        boolean hasRacialAffinity = configs.isClassAffinToStat(raceName, className, "MANA");

        if (hasRacialAffinity) {
            activeAffinity = manaConfig.affinityLimits.get("RACIAL_AFFINITY");
        } else if (classBoostsAttribute) {
            activeAffinity = manaConfig.affinityLimits.get("CLASS_BONUS");
        }

        if (activeAffinity == null) {
            activeAffinity = new AffinityLimit(1.0f, Float.MAX_VALUE);
        }

        calculatedMana *= activeAffinity.multiplier;
        calculatedMana = Math.min(calculatedMana, activeAffinity.limit);

        return calculatedMana;
    }

    // Calcula el vigor máximo basada en la Destreza, raza y clase.
    public static float calculateVigor(String raceName, String className, int dexPoints) {
        ModConfigs configs = ModConfigs.getInstance();
        VigorStatConfig vigorConfig = (VigorStatConfig) configs.getRaceStatConfig(raceName, "VIGOR"); // Cast necesario

        if (vigorConfig == null || vigorConfig.affinityLimits == null) {
            return 0.0f;
        }

        float calculatedVigor = vigorConfig.baseInitialValue;
        calculatedVigor += dexPoints * vigorConfig.dexMultiplierPerPoint; // Acceso directo al multiplicador DEX

        AffinityLimit activeAffinity = vigorConfig.affinityLimits.get("BASE");
        boolean classBoostsAttribute = configs.doesClassBoostAttribute(className, "DEXTERITY");
        boolean hasRacialAffinity = configs.isClassAffinToStat(raceName, className, "VIGOR");

        if (hasRacialAffinity) {
            activeAffinity = vigorConfig.affinityLimits.get("RACIAL_AFFINITY");
        } else if (classBoostsAttribute) {
            activeAffinity = vigorConfig.affinityLimits.get("CLASS_BONUS");
        }

        if (activeAffinity == null) {
            activeAffinity = new AffinityLimit(1.0f, Float.MAX_VALUE);
        }

        calculatedVigor *= activeAffinity.multiplier;
        calculatedVigor = Math.min(calculatedVigor, activeAffinity.limit);

        return calculatedVigor;
    }

    // Calcula la protección basada en la Fuerza, raza y clase.
    public static float calculateProtectionFromSTR(String raceName, String className, int strPoints) {
        ModConfigs configs = ModConfigs.getInstance();
        ProtectionStatConfig protectionConfig = configs.getRaceProtectionConfig(raceName); // Obtiene ProtectionStatConfig

        if (protectionConfig == null || protectionConfig.affinityLimits == null) {
            return 0.0f;
        }

        float strBasedProtection = strPoints * protectionConfig.strEfficacyMultiplierPerPoint; // Acceso directo al multiplicador STR

        AffinityLimit activeAffinity = protectionConfig.affinityLimits.get("BASE");
        boolean classBoostsAttribute = configs.doesClassBoostAttribute(className, "STRENGTH");
        boolean hasRacialAffinity = configs.isClassAffinToStat(raceName, className, "PROTECTION");

        if (hasRacialAffinity) {
            activeAffinity = protectionConfig.affinityLimits.get("RACIAL_AFFINITY");
        } else if (classBoostsAttribute) {
            activeAffinity = protectionConfig.affinityLimits.get("CLASS_BONUS");
        }

        if (activeAffinity == null) {
            activeAffinity = new AffinityLimit(1.0f, Float.MAX_VALUE);
        }

        strBasedProtection *= activeAffinity.multiplier;
        strBasedProtection = Math.min(strBasedProtection, activeAffinity.limit);

        return strBasedProtection;
    }

    // Calcula la protección innata basada en el nivel del jugador y la raza.
    public static float calculateInnateProtection(String raceName, int currentLevel) {
        ModConfigs configs = ModConfigs.getInstance();
        ModConfigs.ProtectionInnateConfig innateConfig = configs.getRaceProtectionInnateConfig(raceName);

        if (innateConfig == null) {
            return 0.0f;
        }

        float innateProtection = innateConfig.baseValue;
        innateProtection += innateConfig.perLevelIncrease * (currentLevel - 1);
        return innateProtection;
    }

    // CÁLCULOS DE REGENERACIÓN

    // Calcula el tiempo de reutilización (cooldown) para la regeneración de salud.
    public static int calculateHealthRegenCooldown(int constitution, float regenSpeedBonusTicks, boolean inCombat, long lastCombatExitTick, long currentTick) {
        ModConfigs configs = ModConfigs.getInstance();

        // Si el jugador está en combate o el delay post-combate aún no ha terminado, la regeneración es extremadamente lenta (cooldown muy alto)
        if (inCombat || (currentTick - lastCombatExitTick < configs.getHealthDelayAfterCombatTicks())) {
            // Nota: Aquí no hay ninguna acción dentro del bloque if, lo que significa que el cálculo continuará con los valores base si las condiciones se cumplen, lo que se espera.
        }
        float conBonus = constitution * configs.getHealthRegenBonusPerConTicks();
        int effectiveCooldown = (int) (configs.getHealthRegenCooldownTicksBase() - regenSpeedBonusTicks - conBonus);
        return Math.max(effectiveCooldown, configs.getHealthMinEffectiveCooldownTicks());
    }

    // Calcula la cantidad de maná que se regenera por tick.
    public static float calculateManaRegenPerTick(int intelligence, boolean inCombat) {
        ModConfigs configs = ModConfigs.getInstance();
        float baseRegen = inCombat ? configs.getManaRegenInCombatBase() : configs.getManaRegenOutOfCombatBase();
        return baseRegen + (intelligence * configs.getManaRegenBonusPerInt());
    }

    // Calcula la cantidad de vigor que se regenera por tick.
    public static float calculateVigorRegenPerTick(int dexterity, boolean inCombat) {
        ModConfigs configs = ModConfigs.getInstance();
        float baseRegen = inCombat ? configs.getVigorRegenInCombatBase() : configs.getVigorRegenOutOfCombatBase();
        return baseRegen + (dexterity * configs.getVigorRegenBonusPerDex());
    }
}