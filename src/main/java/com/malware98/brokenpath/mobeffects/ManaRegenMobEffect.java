// ManaRegenMobEffect.java
package com.malware98.brokenpath.mobeffects;

import com.malware98.brokenpath.capabilities.IPlayerStats;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.config.RegenDataConfig; // NEW: Import RegenDataConfig
import net.minecraft.world.effect.MobEffect;
import net.minecraft.world.effect.MobEffectCategory;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.player.Player;
import net.minecraftforge.common.util.LazyOptional;

import javax.annotation.Nonnull;

/**
 * // Mob effect that provides Mana regeneration to a player.
 * // Regeneration amount is configurable and scales with the effect's amplifier.
 */
public class ManaRegenMobEffect extends MobEffect {

    // // --- Constructor ---
    /**
     * // Constructor for the Mana Regeneration mob effect.
     * @param pCategory The category of the mob effect (e.g., BENEFICIAL, HARMFUL).
     * @param pColor The color of the effect particles.
     */
    public ManaRegenMobEffect(MobEffectCategory pCategory, int pColor) {
        super(pCategory, pColor);
    }

    // // --- Effect Application ---
    /**
     * // Applies the effect logic per tick to the living entity.
     * // Calculates and applies Mana regeneration based on configured cooldown and amplifier.
     * @param pLivingEntity The entity the effect is applied to.
     * @param pAmplifier The amplifier level of the effect (0 for level I, 1 for level II, etc.).
     */
    @Override
    public void applyEffectTick(@Nonnull LivingEntity pLivingEntity, int pAmplifier) {
        // Ensure the entity is a player and on the server-side to apply stats changes.
        if (pLivingEntity instanceof Player player) {
            if (!player.level().isClientSide()) {
                // Attempt to get the player's custom stats' capability.
                LazyOptional<IPlayerStats> playerStatsOptional = player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY);

                // If the capability is present, apply mana regeneration.
                playerStatsOptional.ifPresent(playerStats -> {
                    RegenDataConfig regenConfigs = RegenDataConfig.getInstance(); // Use RegenDataConfig
                    // Retrieve vigor regeneration cooldown per effect pulse from configs.
                    int regenCooldown = regenConfigs.getBaseRegenPulseCooldownTicks();

                    // Regenerate Mana only if the current tick is a multiple of the cooldown.
                    // This controls the frequency of regeneration pulses.
                    if (player.tickCount % regenCooldown == 0) {
                        float baseAmount = regenConfigs.getManaAmountPerEffectPulse(); // Use RegenDataConfig
                        // Scale the regeneration amount with the effect's amplifier.
                        // Amplifier 0 (Level I) means multiplier 1, Amplifier 1 (Level II) means multiplier 2, etc.
                        float amountToHeal = baseAmount * (pAmplifier + 1);

                        // Increase the player's current Mana.
                        // The `setCurrentMana` method handles capping at max Mana and synchronization.
                        playerStats.setCurrentMana(playerStats.getCurrentMana() + amountToHeal);
                    }
                });
            }
        }
    }

    // // --- Tick Duration Check ---
    /**
     * // Indicates whether the effect should apply its logic on a given tick.
     * // Always returns true to allow `applyEffectTick` to manage its internal cooldown.
     * @param pDuration The remaining duration of the effect.
     * @param pAmplifier The amplifier level of the effect.
     * @return True, indicating the effect applies every tick.
     */
    @Override
    public boolean isDurationEffectTick(int pDuration, int pAmplifier) {
        return true; // Applied every duration tick.
    }
}
