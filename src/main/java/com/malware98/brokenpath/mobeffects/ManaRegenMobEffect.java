package com.malware98.brokenpath.mobeffects;

import com.malware98.brokenpath.capabilities.IPlayerStats;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.config.RegenDataConfig;
import net.minecraft.world.effect.MobEffect;
import net.minecraft.world.effect.MobEffectCategory;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.player.Player;
import net.minecraftforge.common.util.LazyOptional;

import javax.annotation.Nonnull;

/**
 * Mob effect that provides Mana regeneration to a player.
 */
public class ManaRegenMobEffect extends MobEffect {

    // --- Constructor ---
    public ManaRegenMobEffect(MobEffectCategory pCategory, int pColor) {
        super(pCategory, pColor);
    }

    // --- Effect Application ---
    /**
     * Applies the effect logic per tick to the living entity.
     */
    @Override
    public void applyEffectTick(@Nonnull LivingEntity pLivingEntity, int pAmplifier) {
        if (pLivingEntity instanceof Player player) {
            if (!player.level().isClientSide()) {
                LazyOptional<IPlayerStats> playerStatsOptional = player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY);

                playerStatsOptional.ifPresent(playerStats -> {
                    RegenDataConfig regenConfigs = RegenDataConfig.getInstance();
                    int regenCooldown = regenConfigs.getBaseRegenPulseCooldownTicks();

                    if (player.tickCount % regenCooldown == 0) {
                        float baseAmount = regenConfigs.getManaAmountPerEffectPulse();
                        float amountToHeal = baseAmount * (pAmplifier + 1);

                        playerStats.setCurrentMana(playerStats.getCurrentMana() + amountToHeal);
                    }
                });
            }
        }
    }

    // --- Tick Duration Check ---
    /**
     * Indicates whether the effect should apply its logic on a given tick.
     */
    @Override
    public boolean isDurationEffectTick(int pDuration, int pAmplifier) {
        return true;
    }
}