package com.malware98.brokenpath.mobeffects;

import com.malware98.brokenpath.capabilities.IPlayerStats;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import net.minecraft.world.effect.MobEffect;
import net.minecraft.world.effect.MobEffectCategory;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.player.Player;
import net.minecraftforge.common.util.LazyOptional;

import javax.annotation.Nonnull;

/*
 * Efecto de mob que proporciona regeneración de Vigor a un jugador.
 * La cantidad de regeneración es configurable y escalable con el amplificador del efecto.
 */
public class VigorRegenMobEffect extends MobEffect {

    // Constructor del efecto de mob.
    public VigorRegenMobEffect(MobEffectCategory pCategory, int pColor) {
        super(pCategory, pColor);
    }

    // Aplica el efecto por tick a la entidad viva.
    @Override
    public void applyEffectTick(@Nonnull LivingEntity pLivingEntity, int pAmplifier) {
        // Verifica si la entidad es un jugador y si está en el lado del servidor.
        if (pLivingEntity instanceof Player player) {
            if (!player.level().isClientSide()) {
                // Intenta obtener la capacidad de estadísticas del jugador.
                LazyOptional<IPlayerStats> playerStatsOptional = player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY);

                // Si la capacidad está presente, aplica la regeneración.
                playerStatsOptional.ifPresent(playerStats -> {
                    ModConfigs configs = ModConfigs.getInstance();
                    // Obtiene el cooldown de regeneración de Vigor por efecto desde las configuraciones.
                    int regenCooldown = configs.getVigorRegenCooldownTicksEffect();

                    // Regenera Vigor solo si el tick actual es un múltiplo del cooldown.
                    if (player.tickCount % regenCooldown == 0) {
                        float baseAmount = configs.getVigorAmountPerEffectPulse();
                        float amountToHeal = baseAmount * (pAmplifier + 1);

                        // Aumenta el Vigor actual del jugador.
                        playerStats.setCurrentVigor(playerStats.getCurrentVigor() + amountToHeal);
                    }
                });
            }
        }
    }

    // Indica si el efecto debe aplicarse en un tick determinado.
    @Override
    public boolean isDurationEffectTick(int pDuration, int pAmplifier) {
        return true; // Se aplica cada tick de duración.
    }
}