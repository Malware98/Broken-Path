package com.malware98.brokenpath.network;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.network.messages.SyncPlayerXPPacket;
import com.malware98.brokenpath.network.messages.SyncPlayerStatsPacket;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerPlayer;
import net.minecraftforge.network.NetworkDirection;
import net.minecraftforge.network.NetworkRegistry;
import net.minecraftforge.network.PacketDistributor;
import net.minecraftforge.network.simple.SimpleChannel;

/**
 * Handles the registration and sending of custom network packets.
 * Centralizes network communication setup and distribution for the mod.
 */
public class PacketHandler {

    // --- Channel Constants ---
    // Network protocol version to ensure client-server compatibility.
    private static final String PROTOCOL_VERSION = "1.0";

    // The mod's communication channel.
    // Provides a unique identifier for packets within this mod.
    public static final SimpleChannel INSTANCE = NetworkRegistry.newSimpleChannel(
            new ResourceLocation(BrokenPath.MOD_ID, "main_channel"), // Unique channel identifier
            () -> PROTOCOL_VERSION, // Local protocol version supplier
            PROTOCOL_VERSION::equals, // Client version validator
            PROTOCOL_VERSION::equals // Server version validator
    );

    // --- Packet ID Control ---
    // Counter to assign unique IDs to each registered packet type.
    private static int packetId = 0;

    // Helper to get the next available packet ID.
    private static int id() {
        return packetId++;
    }

    // --- Message Registration ---
    /**
     * Registers all custom network packets used by the mod.
     * Defines how each packet is encoded, decoded, and handled.
     */
    public static void registerMessages() {
        // Register SyncPlayerXPPacket: Server to Client.
        // Used to synchronize player experience data.
        INSTANCE.messageBuilder(SyncPlayerXPPacket.class, id(), NetworkDirection.PLAY_TO_CLIENT)
                .encoder(SyncPlayerXPPacket::toBytes) // Defines how to encode packet into bytes.
                .decoder(SyncPlayerXPPacket::new)    // Defines how to decode bytes into a packet.
                .consumerMainThread(SyncPlayerXPPacket::handle) // Defines how to process packet on the main thread.
                .add();

        // Register SyncPlayerStatsPacket: Server to Client.
        // Used to synchronize all player stats data.
        INSTANCE.messageBuilder(SyncPlayerStatsPacket.class, id(), NetworkDirection.PLAY_TO_CLIENT)
                .encoder(SyncPlayerStatsPacket::toBytes)
                .decoder(SyncPlayerStatsPacket::new)
                .consumerMainThread(SyncPlayerStatsPacket::handle)
                .add();
    }

    // --- Packet Sending Routines ---
    /**
     * Sends a packet to a specific player.
     * @param packet The packet to send.
     * @param player The target player.
     * @param <MSG> The message type.
     */
    public static <MSG> void sendToPlayer(MSG packet, ServerPlayer player) {
        INSTANCE.send(PacketDistributor.PLAYER.with(() -> player), packet);
    }

    /**
     * Sends a packet to all connected clients on the server.
     * @param packet The packet to send.
     * @param <MSG> The message type.
     */
    public static <MSG> void sendToAllClients(MSG packet) {
        INSTANCE.send(PacketDistributor.ALL.noArg(), packet);
    }

    /**
     * Sends a packet from the client to the server.
     * @param packet The packet to send.
     * @param <MSG> The message type.
     */
    public static <MSG> void sendToServer(MSG packet) {
        INSTANCE.sendToServer(packet);
    }
}