package com.malware98.brokenpath.network;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.network.messages.SyncPlayerXPPacket;
import com.malware98.brokenpath.network.messages.SyncPlayerStatsPacket;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerPlayer;
import net.minecraftforge.network.NetworkDirection;
import net.minecraftforge.network.NetworkRegistry;
import net.minecraftforge.network.PacketDistributor;
import net.minecraftforge.network.simple.SimpleChannel;

/*
 * Clase para manejar el registro y envío de paquetes de red personalizados.
 * Centraliza la configuración y distribución de la comunicación de red del mod.
 */
public class PacketHandler {

    // --- Constantes del canal ---
    // Versión del protocolo de red. Asegura la compatibilidad entre cliente y servidor.
    private static final String PROTOCOL_VERSION = "1.0";

    // El canal de comunicación para los paquetes del mod.
    public static final SimpleChannel INSTANCE = NetworkRegistry.newSimpleChannel(
            new ResourceLocation(BrokenPath.MOD_ID, "main_channel"), // Identificador único del canal
            () -> PROTOCOL_VERSION, // Proveedor de la versión local del protocolo
            PROTOCOL_VERSION::equals, // Validador de la versión del cliente
            PROTOCOL_VERSION::equals // Validador de la versión del servidor
    );

    // --- Control de IDs de paquetes ---
    // Contador para asignar IDs únicos a cada tipo de paquete registrado.
    private static int packetId = 0;

    // Rutina auxiliar para obtener el siguiente ID de paquete disponible.
    private static int id() {
        return packetId++;
    }

    // --- Registro de mensajes ---
    // Registra todos los paquetes personalizados del mod.
    public static void registerMessages() {
        // Registro del paquete de sincronización de experiencia del jugador.
        // Envía datos del servidor al cliente.
        INSTANCE.messageBuilder(SyncPlayerXPPacket.class, id(), NetworkDirection.PLAY_TO_CLIENT)
                .encoder(SyncPlayerXPPacket::toBytes) // Define cómo codificar el paquete en bytes.
                .decoder(SyncPlayerXPPacket::new)    // Define cómo decodificar bytes en un paquete.
                .consumerMainThread(SyncPlayerXPPacket::handle) // Define cómo manejar el paquete en el hilo principal.
                .add();

        // Registro del paquete de sincronización de estadísticas del jugador.
        // Envía datos del servidor al cliente.
        INSTANCE.messageBuilder(SyncPlayerStatsPacket.class, id(), NetworkDirection.PLAY_TO_CLIENT)
                .encoder(SyncPlayerStatsPacket::toBytes)
                .decoder(SyncPlayerStatsPacket::new)
                .consumerMainThread(SyncPlayerStatsPacket::handle)
                .add();
    }

    // --- Rutinas de envío de paquetes ---
    // Envía un paquete a un jugador específico.
    public static <MSG> void sendToPlayer(MSG packet, ServerPlayer player) {
        INSTANCE.send(PacketDistributor.PLAYER.with(() -> player), packet);
    }

    // Envía un paquete a todos los jugadores en el servidor.
    public static <MSG> void sendToAllClients(MSG packet) {
        INSTANCE.send(PacketDistributor.ALL.noArg(), packet);
    }

    // Envía un paquete al servidor desde el cliente.
    public static <MSG> void sendToServer(MSG packet) {
        INSTANCE.sendToServer(packet);
    }
}