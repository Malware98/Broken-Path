package com.malware98.brokenpath.network;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.network.messages.SyncPlayerXPPacket;
import com.malware98.brokenpath.network.messages.SyncPlayerStatsPacket; // <-- ¡NUEVA IMPORTACIÓN!
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerPlayer;
import net.minecraftforge.network.NetworkDirection;
import net.minecraftforge.network.NetworkRegistry;
import net.minecraftforge.network.PacketDistributor;
import net.minecraftforge.network.simple.SimpleChannel;

//Clase para manejar el registro y envío de paquetes de red personalizados.
public class PacketHandler {
    private static final String PROTOCOL_VERSION = "1.0";

    // El canal de comunicación para nuestros paquetes.
    public static final SimpleChannel INSTANCE = NetworkRegistry.newSimpleChannel(
            new ResourceLocation(BrokenPath.MOD_ID, "main_channel"),
            () -> PROTOCOL_VERSION,
            PROTOCOL_VERSION::equals,
            PROTOCOL_VERSION::equals
    );

    private static int packetId = 0;

    // Procedimiento auxiliar para obtener el siguiente ID de paquete.
    private static int id() {
        return packetId++;
    }


     //Registra todos los paquetes personalizados de nuestro mod.
    public static void registerMessages() {
        INSTANCE.messageBuilder(SyncPlayerXPPacket.class, id(), NetworkDirection.PLAY_TO_CLIENT)
                .encoder(SyncPlayerXPPacket::toBytes)
                .decoder(SyncPlayerXPPacket::new)
                .consumerMainThread(SyncPlayerXPPacket::handle)
                .add();

        INSTANCE.messageBuilder(SyncPlayerStatsPacket.class, id(), NetworkDirection.PLAY_TO_CLIENT)
                .encoder(SyncPlayerStatsPacket::toBytes)
                .decoder(SyncPlayerStatsPacket::new)
                .consumerMainThread(SyncPlayerStatsPacket::handle)
                .add();
    }

    //Envía un paquete a un jugador específico.
    public static <MSG> void sendToPlayer(MSG packet, ServerPlayer player) {
        INSTANCE.send(PacketDistributor.PLAYER.with(() -> player), packet);
    }

     //Envía un paquete a todos los jugadores en el servidor.
    public static <MSG> void sendToAllClients(MSG packet) {
        INSTANCE.send(PacketDistributor.ALL.noArg(), packet);
    }

    //Envía un paquete al servidor desde el cliente.
    public static <MSG> void sendToServer(MSG packet) {
        INSTANCE.sendToServer(packet);
    }
}