package com.malware98.brokenpath.network.messages;

import com.malware98.brokenpath.client.PlayerXPClient;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraftforge.network.NetworkEvent;

import java.util.function.Supplier;

/**
 * Packet sent from the server to the client to synchronize player experience (XP),
 * level, and XP debt.
 */
public class SyncPlayerXPPacket {

    // --- Packet Fields ---
    private final int experience;
    private final int level;
    private final int xpDebt;

    // --- Constructor ---
    /**
     * Constructor to create the packet with current player XP data from the server.
     * @param experience The player's current experience.
     * @param level The player's current level.
     * @param xpDebt The player's current XP debt.
     */
    public SyncPlayerXPPacket(int experience, int level, int xpDebt) {
        this.experience = experience;
        this.level = level;
        this.xpDebt = xpDebt;
    }

    // --- Encoders and Decoders ---
    /**
     * Decoder to read packet data from the network on the client side.
     * @param buf The buffer containing the packet data.
     */
    public SyncPlayerXPPacket(FriendlyByteBuf buf) {
        this.experience = buf.readInt();
        this.level = buf.readInt();
        this.xpDebt = buf.readInt();
    }

    /**
     * Encoder to write packet data for network transmission from the server side.
     * @param buf The buffer to write the packet data into.
     */
    public void toBytes(FriendlyByteBuf buf) {
        buf.writeInt(this.experience);
        buf.writeInt(this.level);
        buf.writeInt(this.xpDebt);
    }

    // --- Packet Handler ---
    /**
     * Handles the packet once received and decoded on the client.
     * Enqueues work to update client-side player XP data.
     * @param ctx Supplier for the network event context.
     */
    public void handle(Supplier<NetworkEvent.Context> ctx) {
        ctx.get().enqueueWork(() -> {
            // Update the client's local XP data.
            PlayerXPClient.setPlayerXP(this.experience, this.level, this.xpDebt);
        });
        // Mark the packet as handled to prevent further processing.
        ctx.get().setPacketHandled(true);
    }

    // --- Getters ---
    /**
     * Gets the player's experience.
     * @return The experience value.
     */
    public int getExperience() {
        return experience;
    }

    /**
     * Gets the player's level.
     * @return The level value.
     */
    public int getLevel() {
        return level;
    }

    /**
     * Gets the player's XP debt.
     * @return The XP debt value.
     */
    public int getXpDebt() {
        return xpDebt;
    }
}