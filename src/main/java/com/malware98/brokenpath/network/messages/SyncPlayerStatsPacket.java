package com.malware98.brokenpath.network.messages;

import com.malware98.brokenpath.BrokenPath; // Added import for logger
import com.malware98.brokenpath.capabilities.IPlayerStats; // Added import
import com.malware98.brokenpath.capabilities.registries.ModCapabilities; // Added import
import net.minecraft.client.Minecraft; // Added import
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.biome.Biome;
import net.minecraftforge.network.NetworkEvent;
import net.minecraft.core.registries.Registries; // Added import

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Supplier;
import java.util.stream.Collectors;

/**
 * Packet sent from the server to the client to synchronize all
 * PlayerStats data for a player.
 */
public class SyncPlayerStatsPacket {

    // --- Packet Fields: Core Attributes and Main Stats ---
    private final int attributePoints;
    private final int constitution;
    private final int strength;
    private final int dexterity;
    private final int intelligence;
    private final float currentHealth;
    private final float maxHealth;
    private final float currentProtection;
    private final float maxProtection;
    private final float currentInnateProtection;
    private final float maxInnateProtection;
    private final float currentMana;
    private final float maxMana;
    private final float currentVigor;
    private final float maxVigor;
    private final float favor;
    private final String race;
    private final String playerClass;
    private final String specialization;
    private final int skillPoints;
    private final Map<String, Integer> professions;
    private final int hungerStage;
    private final float favorBonusMultiplier;
    private final Map<String, Integer> achievementProgress;
    private final Map<String, Boolean> completedAchievements;
    private final List<String> discoveredBiomesLocations;
    private final List<String> visitedDimensionsLocations;
    private final List<String> craftedUniqueItemsLocations;
    private final List<String> tamedAnimalsLocations; // Added field for tamed animals

    // --- Constructor ---
    /**
     * Constructor to create the packet with current player stats from the server.
     * Maps ResourceKeys and ResourceLocations to string representations for network transfer.
     */
    public SyncPlayerStatsPacket(int attributePoints,
                                 int constitution, int strength, int dexterity, int intelligence,
                                 float currentHealth, float maxHealth,
                                 float currentProtection, float maxProtection,
                                 float currentInnateProtection, float maxInnateProtection,
                                 float currentMana, float maxMana,
                                 float currentVigor, float maxVigor,
                                 float favor,
                                 String race, String playerClass, String specialization, int skillPoints,
                                 Map<String, Integer> professions,
                                 int hungerStage,
                                 float favorBonusMultiplier,
                                 Map<String, Integer> achievementProgress,
                                 Map<String, Boolean> completedAchievements,
                                 Set<ResourceKey<Biome>> discoveredBiomes,
                                 Set<ResourceKey<Level>> visitedDimensions,
                                 Set<ResourceLocation> craftedUniqueItems,
                                 Set<ResourceLocation> tamedAnimals){ // Added tamedAnimals parameter
        this.attributePoints = attributePoints;
        this.constitution = constitution;
        this.strength = strength;
        this.dexterity = dexterity;
        this.intelligence = intelligence;
        this.currentHealth = currentHealth;
        this.maxHealth = maxHealth;
        this.currentProtection = currentProtection;
        this.maxProtection = maxProtection;
        this.currentInnateProtection = currentInnateProtection;
        this.maxInnateProtection = maxInnateProtection;
        this.currentMana = currentMana;
        this.maxMana = maxMana;
        this.currentVigor = currentVigor;
        this.maxVigor = maxVigor;
        this.favor = favor;
        this.race = race;
        this.playerClass = playerClass;
        this.specialization = specialization;
        this.skillPoints = skillPoints;
        // Use a new HashMap to ensure immutability and prevent external modification.
        this.professions = new HashMap<>(professions);
        this.hungerStage = hungerStage;
        this.favorBonusMultiplier = favorBonusMultiplier;
        // Use new HashMaps for achievement data for safe transfer.
        this.achievementProgress = new HashMap<>(achievementProgress);
        this.completedAchievements = new HashMap<>(completedAchievements);
        // Convert ResourceKeys/Locations to String for serialization.
        this.discoveredBiomesLocations = discoveredBiomes.stream().map(biome -> biome.location().toString()).collect(Collectors.toList());
        this.visitedDimensionsLocations = visitedDimensions.stream().map(dim -> dim.location().toString()).collect(Collectors.toList());
        this.craftedUniqueItemsLocations = craftedUniqueItems.stream().map(ResourceLocation::toString).collect(Collectors.toList());
        this.tamedAnimalsLocations = tamedAnimals.stream().map(ResourceLocation::toString).collect(Collectors.toList()); // Added tamedAnimalsLocations
    }

    // --- Encoders and Decoders ---
    /**
     * Decoder to read packet data from the network on the client side.
     * Reconstructs complex data structures like Maps and Lists from the buffer.
     * @param buf The buffer containing the packet data.
     */
    public SyncPlayerStatsPacket(FriendlyByteBuf buf) {
        this.attributePoints = buf.readInt();
        this.constitution = buf.readInt();
        this.strength = buf.readInt();
        this.dexterity = buf.readInt();
        this.intelligence = buf.readInt();
        this.currentHealth = buf.readFloat();
        this.maxHealth = buf.readFloat();
        this.currentProtection = buf.readFloat();
        this.maxProtection = buf.readFloat();
        this.currentInnateProtection = buf.readFloat();
        this.maxInnateProtection = buf.readFloat();
        this.currentMana = buf.readFloat();
        this.maxMana = buf.readFloat();
        this.currentVigor = buf.readFloat();
        this.maxVigor = buf.readFloat();
        this.favor = buf.readFloat();
        this.race = buf.readUtf();
        this.playerClass = buf.readUtf();
        this.specialization = buf.readUtf();
        this.skillPoints = buf.readInt();
        this.hungerStage = buf.readInt();

        // Read professions map: first size, then each name-level pair.
        this.professions = new HashMap<>();
        int professionCount = buf.readInt();
        for (int i = 0; i < professionCount; i++) {
            String name = buf.readUtf();
            int level = buf.readInt();
            this.professions.put(name, level);
        }
        this.favorBonusMultiplier = buf.readFloat();

        // Read achievement progress (Map<String, Integer>).
        this.achievementProgress = new HashMap<>();
        int achievementProgressCount = buf.readInt();
        for (int i = 0; i < achievementProgressCount; i++) {
            String key = buf.readUtf();
            int value = buf.readInt();
            this.achievementProgress.put(key, value);
        }

        // Read completed achievements (Map<String, Boolean>).
        this.completedAchievements = new HashMap<>();
        int completedAchievementsCount = buf.readInt();
        for (int i = 0; i < completedAchievementsCount; i++) {
            String key = buf.readUtf();
            boolean value = buf.readBoolean();
            this.completedAchievements.put(key, value);
        }

        // Read discovered biomes list.
        this.discoveredBiomesLocations = buf.readList(FriendlyByteBuf::readUtf);

        // Read visited dimensions list.
        this.visitedDimensionsLocations = buf.readList(FriendlyByteBuf::readUtf);

        // Read crafted unique items list.
        this.craftedUniqueItemsLocations = buf.readList(FriendlyByteBuf::readUtf);

        this.tamedAnimalsLocations = buf.readList(FriendlyByteBuf::readUtf); // Added tamedAnimalsLocations
    }

    /**
     * Encoder to write packet data for network transmission from the server side.
     * Serializes complex data structures into the buffer.
     * @param buf The buffer to write the packet data into.
     */
    public void toBytes(FriendlyByteBuf buf) {
        buf.writeInt(this.attributePoints);
        buf.writeInt(this.constitution);
        buf.writeInt(this.strength);
        buf.writeInt(this.dexterity);
        buf.writeInt(this.intelligence);
        buf.writeFloat(this.currentHealth);
        buf.writeFloat(this.maxHealth);
        buf.writeFloat(this.currentProtection);
        buf.writeFloat(this.maxProtection);
        buf.writeFloat(this.currentInnateProtection);
        buf.writeFloat(this.maxInnateProtection);
        buf.writeFloat(this.currentMana);
        buf.writeFloat(this.maxMana);
        buf.writeFloat(this.currentVigor);
        buf.writeFloat(this.maxVigor);
        buf.writeFloat(this.favor);
        buf.writeUtf(this.race);
        buf.writeUtf(this.playerClass);
        buf.writeUtf(this.specialization);
        buf.writeInt(this.skillPoints);
        buf.writeInt(this.hungerStage);

        // Write professions map: first size, then each name-level pair.
        buf.writeInt(this.professions.size());
        for (Map.Entry<String, Integer> entry : this.professions.entrySet()) {
            buf.writeUtf(entry.getKey());
            buf.writeInt(entry.getValue());
        }
        buf.writeFloat(this.favorBonusMultiplier);

        // Write achievement progress.
        buf.writeInt(this.achievementProgress.size());
        for (Map.Entry<String, Integer> entry : this.achievementProgress.entrySet()) {
            buf.writeUtf(entry.getKey());
            buf.writeInt(entry.getValue());
        }

        // Write completed achievements.
        buf.writeInt(this.completedAchievements.size());
        for (Map.Entry<String, Boolean> entry : this.completedAchievements.entrySet()) {
            buf.writeUtf(entry.getKey());
            buf.writeBoolean(entry.getValue());
        }

        // Write discovered biomes list.
        buf.writeCollection(this.discoveredBiomesLocations, FriendlyByteBuf::writeUtf);

        // Write visited dimensions list.
        buf.writeCollection(this.visitedDimensionsLocations, FriendlyByteBuf::writeUtf);

        // Write crafted unique items list.
        buf.writeCollection(this.craftedUniqueItemsLocations, FriendlyByteBuf::writeUtf);

        buf.writeCollection(this.tamedAnimalsLocations, FriendlyByteBuf::writeUtf); // Added tamedAnimalsLocations
    }

    // --- Packet Handler ---
    /**
     * Handles the packet once received and decoded on the client.
     * Enqueues work to update client-side player statistics.
     * @param ctx Supplier for the network event context.
     */
    public void handle(Supplier<NetworkEvent.Context> ctx) {
        ctx.get().enqueueWork(() -> {
            // Get the client player
            net.minecraft.world.entity.player.Player player = Minecraft.getInstance().player;
            if (player == null) {
                BrokenPath.LOGGER.warn("SyncPlayerStatsPacket received, but client player is null.");
                return;
            }

            // Get the IPlayerStats capability from the client player
            player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(playerStats -> {
                // Update playerStats directly with the packet data
                playerStats.updateClientData(
                        this.attributePoints,
                        this.constitution, this.strength, this.dexterity, this.intelligence,
                        this.currentHealth, this.maxHealth,
                        this.currentProtection, this.maxProtection,
                        this.currentInnateProtection, this.maxInnateProtection,
                        this.currentMana, this.maxMana,
                        this.currentVigor, this.maxVigor,
                        this.favor,
                        this.race,
                        this.playerClass,
                        this.specialization,
                        this.skillPoints,
                        this.professions,
                        this.hungerStage,
                        this.favorBonusMultiplier,
                        this.achievementProgress,
                        this.completedAchievements,
                        this.discoveredBiomesLocations,
                        this.visitedDimensionsLocations,
                        this.craftedUniqueItemsLocations,
                        this.tamedAnimalsLocations // Pass tamedAnimalsLocations
                );
            });
        });
        // Mark the packet as handled to prevent further processing.
        ctx.get().setPacketHandled(true);
    }
}