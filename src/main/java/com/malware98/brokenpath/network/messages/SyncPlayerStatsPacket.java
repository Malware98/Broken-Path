package com.malware98.brokenpath.network.messages;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.client.PlayerStatsClient;
import net.minecraft.client.Minecraft;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.biome.Biome;
import net.minecraftforge.network.NetworkEvent;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Supplier;
import java.util.stream.Collectors;

/**
 * Packet sent from the server to the client to synchronize all
 * PlayerStats data for a player.
 */
public class SyncPlayerStatsPacket {

    // --- Packet Fields: Core Attributes and Main Stats ---
    private final int attributePoints;
    private final int constitution;
    private final int strength;
    private final int dexterity;
    private final int intelligence;
    private final float currentHealth;
    private final float maxHealth;
    private final float currentProtection;
    private final float maxProtection;
    private final float currentInnateProtection;
    private final float maxInnateProtection;
    private final float currentMana;
    private final float maxMana;
    private final float currentVigor;
    private final float maxVigor;
    private final float favor;
    private final String race;
    private final String playerClass;
    private final String specialization;
    private final int skillPoints;
    private final Map<String, Integer> professions;
    private final int hungerStage;
    private final float favorBonusMultiplier;
    private final Map<String, Integer> achievementProgress;
    private final Map<String, Boolean> completedAchievements;
    private final List<String> discoveredBiomesLocations;
    private final List<String> visitedDimensionsLocations;
    private final List<String> craftedUniqueItemsLocations;
    private final List<String> tamedAnimalsLocations;

    // --- Constructors ---
    /**
     * Creates the packet with current player stats from the server.
     */
    public SyncPlayerStatsPacket(int attributePoints,
                                 int constitution, int strength, int dexterity, int intelligence,
                                 float currentHealth, float maxHealth,
                                 float currentProtection, float maxProtection,
                                 float currentInnateProtection, float maxInnateProtection,
                                 float currentMana, float maxMana,
                                 float currentVigor, float maxVigor,
                                 float favor,
                                 String race, String playerClass, String specialization, int skillPoints,
                                 Map<String, Integer> professions,
                                 int hungerStage,
                                 float favorBonusMultiplier,
                                 Map<String, Integer> achievementProgress,
                                 Map<String, Boolean> completedAchievements,
                                 Set<ResourceKey<Biome>> discoveredBiomes,
                                 Set<ResourceKey<Level>> visitedDimensions,
                                 Set<ResourceLocation> craftedUniqueItems,
                                 Set<ResourceLocation> tamedAnimals){
        this.attributePoints = attributePoints;
        this.constitution = constitution;
        this.strength = strength;
        this.dexterity = dexterity;
        this.intelligence = intelligence;
        this.currentHealth = currentHealth;
        this.maxHealth = maxHealth;
        this.currentProtection = currentProtection;
        this.maxProtection = maxProtection;
        this.currentInnateProtection = currentInnateProtection;
        this.maxInnateProtection = maxInnateProtection;
        this.currentMana = currentMana;
        this.maxMana = maxMana;
        this.currentVigor = currentVigor;
        this.maxVigor = maxVigor;
        this.favor = favor;
        this.race = race;
        this.playerClass = playerClass;
        this.specialization = specialization;
        this.skillPoints = skillPoints;
        this.professions = new HashMap<>(professions);
        this.hungerStage = hungerStage;
        this.favorBonusMultiplier = favorBonusMultiplier;
        this.achievementProgress = new HashMap<>(achievementProgress);
        this.completedAchievements = new HashMap<>(completedAchievements);
        this.discoveredBiomesLocations = discoveredBiomes.stream().map(biome -> biome.location().toString()).collect(Collectors.toList());
        this.visitedDimensionsLocations = visitedDimensions.stream().map(dim -> dim.location().toString()).collect(Collectors.toList());
        this.craftedUniqueItemsLocations = craftedUniqueItems.stream().map(ResourceLocation::toString).collect(Collectors.toList());
        this.tamedAnimalsLocations = tamedAnimals.stream().map(ResourceLocation::toString).collect(Collectors.toList());
    }

    /**
     * Decodes packet data from the network on the client side.
     */
    public SyncPlayerStatsPacket(FriendlyByteBuf buf) {
        this.attributePoints = buf.readInt();
        this.constitution = buf.readInt();
        this.strength = buf.readInt();
        this.dexterity = buf.readInt();
        this.intelligence = buf.readInt();
        this.currentHealth = buf.readFloat();
        this.maxHealth = buf.readFloat();
        this.currentProtection = buf.readFloat();
        this.maxProtection = buf.readFloat();
        this.currentInnateProtection = buf.readFloat();
        this.maxInnateProtection = buf.readFloat();
        this.currentMana = buf.readFloat();
        this.maxMana = buf.readFloat();
        this.currentVigor = buf.readFloat();
        this.maxVigor = buf.readFloat();
        this.favor = buf.readFloat();
        this.race = buf.readUtf();
        this.playerClass = buf.readUtf();
        this.specialization = buf.readUtf();
        this.skillPoints = buf.readInt();
        this.hungerStage = buf.readInt();

        this.professions = new HashMap<>();
        int professionCount = buf.readInt();
        for (int i = 0; i < professionCount; i++) {
            String name = buf.readUtf();
            int level = buf.readInt();
            this.professions.put(name, level);
        }
        this.favorBonusMultiplier = buf.readFloat();

        this.achievementProgress = new HashMap<>();
        int achievementProgressCount = buf.readInt();
        for (int i = 0; i < achievementProgressCount; i++) {
            String key = buf.readUtf();
            int value = buf.readInt();
            this.achievementProgress.put(key, value);
        }

        this.completedAchievements = new HashMap<>();
        int completedAchievementsCount = buf.readInt();
        for (int i = 0; i < completedAchievementsCount; i++) {
            String key = buf.readUtf();
            boolean value = buf.readBoolean();
            this.completedAchievements.put(key, value);
        }

        this.discoveredBiomesLocations = buf.readList(FriendlyByteBuf::readUtf);
        this.visitedDimensionsLocations = buf.readList(FriendlyByteBuf::readUtf);
        this.craftedUniqueItemsLocations = buf.readList(FriendlyByteBuf::readUtf);
        this.tamedAnimalsLocations = buf.readList(FriendlyByteBuf::readUtf);
    }

    // --- Encoding ---
    /**
     * Encodes packet data for network transmission from the server side.
     */
    public void toBytes(FriendlyByteBuf buf) {
        buf.writeInt(this.attributePoints);
        buf.writeInt(this.constitution);
        buf.writeInt(this.strength);
        buf.writeInt(this.dexterity);
        buf.writeInt(this.intelligence);
        buf.writeFloat(this.currentHealth);
        buf.writeFloat(this.maxHealth);
        buf.writeFloat(this.currentProtection);
        buf.writeFloat(this.maxProtection);
        buf.writeFloat(this.currentInnateProtection);
        buf.writeFloat(this.maxInnateProtection);
        buf.writeFloat(this.currentMana);
        buf.writeFloat(this.maxMana);
        buf.writeFloat(this.currentVigor);
        buf.writeFloat(this.maxVigor);
        buf.writeFloat(this.favor);
        buf.writeUtf(this.race);
        buf.writeUtf(this.playerClass);
        buf.writeUtf(this.specialization);
        buf.writeInt(this.skillPoints);
        buf.writeInt(this.hungerStage);

        buf.writeInt(this.professions.size());
        for (Map.Entry<String, Integer> entry : this.professions.entrySet()) {
            buf.writeUtf(entry.getKey());
            buf.writeInt(entry.getValue());
        }
        buf.writeFloat(this.favorBonusMultiplier);

        buf.writeInt(this.achievementProgress.size());
        for (Map.Entry<String, Integer> entry : this.achievementProgress.entrySet()) {
            buf.writeUtf(entry.getKey());
            buf.writeInt(entry.getValue());
        }

        buf.writeInt(this.completedAchievements.size());
        for (Map.Entry<String, Boolean> entry : this.completedAchievements.entrySet()) {
            buf.writeUtf(entry.getKey());
            buf.writeBoolean(entry.getValue());
        }

        buf.writeCollection(this.discoveredBiomesLocations, FriendlyByteBuf::writeUtf);
        buf.writeCollection(this.visitedDimensionsLocations, FriendlyByteBuf::writeUtf);
        buf.writeCollection(this.craftedUniqueItemsLocations, FriendlyByteBuf::writeUtf);
        buf.writeCollection(this.tamedAnimalsLocations, FriendlyByteBuf::writeUtf);
    }

    // --- Packet Handling ---
    /**
     * Handles the packet once received and decoded on the client.
     */
    public void handle(Supplier<NetworkEvent.Context> ctx) {
        ctx.get().enqueueWork(() -> {
            net.minecraft.world.entity.player.Player player = Minecraft.getInstance().player;
            if (player == null) {
                BrokenPath.LOGGER.warn("SyncPlayerStatsPacket received, but client player is null.");
                return;
            }

            PlayerStatsClient.setAllStats(
                    this.attributePoints,
                    this.constitution, this.strength, this.dexterity, this.intelligence,
                    this.currentHealth, this.maxHealth,
                    this.currentProtection, this.maxProtection,
                    this.currentInnateProtection, this.maxInnateProtection,
                    this.currentMana, this.maxMana,
                    this.currentVigor, this.maxVigor,
                    this.favor,
                    this.race,
                    this.playerClass,
                    this.specialization,
                    this.skillPoints,
                    this.professions,
                    this.hungerStage,
                    this.favorBonusMultiplier,
                    this.achievementProgress,
                    this.completedAchievements,
                    this.discoveredBiomesLocations,
                    this.visitedDimensionsLocations,
                    this.craftedUniqueItemsLocations,
                    this.tamedAnimalsLocations
            );
        });
        ctx.get().setPacketHandled(true);
    }
}