package com.malware98.brokenpath;

import com.malware98.brokenpath.capabilities.PlayerCapabilityProvider;
import com.malware98.brokenpath.capabilities.PlayerXPCapabilityProvider;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.network.PacketHandler;
import com.malware98.brokenpath.registries.ModMobEffects;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.Entity;
import com.malware98.brokenpath.data.ModDamageTypes;
import net.minecraft.world.entity.player.Player;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.AttachCapabilitiesEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;

@Mod(BrokenPath.MOD_ID)
public class BrokenPath {
    public static final String MOD_ID = "brokenpath";

    public BrokenPath() {
        IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();

        modEventBus.addListener(this::commonSetup);
        modEventBus.addListener(this::clientSetup);
        modEventBus.addListener(ModCapabilities::register);
        ModMobEffects.MOB_EFFECTS.register(FMLJavaModLoadingContext.get().getModEventBus());

        ModDamageTypes.DAMAGE_TYPES.register(modEventBus);
        MinecraftForge.EVENT_BUS.register(this);
    }

    private void commonSetup(final FMLCommonSetupEvent event) {
        event.enqueueWork(() -> {
            ModConfigs.loadConfig();
            PacketHandler.registerMessages();
        });
    }

    private void clientSetup(final FMLClientSetupEvent event) {
    }


    @SubscribeEvent
    public void onAttachCapabilitiesEntity(AttachCapabilitiesEvent<Entity> event) {
        if (event.getObject() instanceof Player player) {
            // Attach PlayerStats capability
            if (!player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).isPresent()) {
                event.addCapability(new ResourceLocation(MOD_ID, "player_stats"), new PlayerCapabilityProvider(player));
            }

            // Attach IPlayerXP capability
            if (!player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).isPresent()) {
                event.addCapability(new ResourceLocation(MOD_ID, "player_xp"), new PlayerXPCapabilityProvider(player));
            }
        }
    }

    @SubscribeEvent
    public void onPlayerClone(PlayerEvent.Clone event) {
        if (!event.isWasDeath()) {
            event.getOriginal().getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(oldStats -> {
                event.getEntity().getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(newStats -> {
                    newStats.copyFrom(oldStats);
                });
            });
        } else {
            // If it was a death, PlayerStats are likely reset to defaults by the new capability provider
            // when the new player entity is created and capabilities are re-attached.
        }

        event.getOriginal().getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(oldXP -> {
            event.getEntity().getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(newXP -> {
                newXP.copyFrom(oldXP);
            });
        });
    }
}