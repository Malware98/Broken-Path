package com.malware98.brokenpath;

import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.config.MainModConfigManager;
import com.malware98.brokenpath.data.ModDamageTypes;
import com.malware98.brokenpath.network.PacketHandler;
import com.malware98.brokenpath.registries.ModMobEffects;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.malware98.brokenpath.events.AchievementEventHandler;

/**
 * Main class for the "BrokenPath" mod.
 * Initializes core mod components: event listeners, capabilities,
 * damage types, mob effects, and configurations.
 */
@Mod(BrokenPath.MOD_ID)
public class BrokenPath {

    // --- Constants ---
    // Unique identifier for the mod, must be lowercase.
    public static final String MOD_ID = "brokenpath";
    // Logger instance for mod-specific logging.
    public static final Logger LOGGER = LogManager.getLogger(MOD_ID);

    // --- Constructor ---
    public BrokenPath() {
        IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();

        // Register lifecycle event listeners.
        modEventBus.addListener(this::commonSetup);
        modEventBus.addListener(this::clientSetup);

        // Register deferred registries and capabilities.
        modEventBus.addListener(ModCapabilities::register);
        ModMobEffects.MOB_EFFECTS.register(modEventBus);
        ModDamageTypes.DAMAGE_TYPES.register(modEventBus);

        // Register event handlers.
        MinecraftForge.EVENT_BUS.register(this);
        MinecraftForge.EVENT_BUS.register(new AchievementEventHandler());
    }

    // --- Setup Methods ---
    /**
     * Common setup handler (runs on both client and server).
     * @param event The common setup event.
     */
    private void commonSetup(final FMLCommonSetupEvent event) {
        event.enqueueWork(() -> {
            MainModConfigManager.loadAllConfigs();
            PacketHandler.registerMessages();
        });
    }

    /**
     * Client-specific setup handler (runs only on the client).
     * @param event The client setup event.
     */
    private void clientSetup(final FMLClientSetupEvent event) {
        // Client-only initialization code goes here.
    }
}