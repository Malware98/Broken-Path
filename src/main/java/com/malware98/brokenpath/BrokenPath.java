package com.malware98.brokenpath;

import com.malware98.brokenpath.capabilities.PlayerCapabilityProvider;
import com.malware98.brokenpath.capabilities.PlayerXPCapabilityProvider;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.network.PacketHandler;
import com.malware98.brokenpath.registries.ModMobEffects;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.entity.Entity;
import com.malware98.brokenpath.data.ModDamageTypes;
import com.malware98.brokenpath.capabilities.IPlayerXP;
import net.minecraft.world.entity.player.Player;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.util.LazyOptional;
import net.minecraftforge.event.AttachCapabilitiesEvent;
import net.minecraftforge.event.entity.living.LivingDeathEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@Mod(BrokenPath.MOD_ID)
public class BrokenPath {
    public static final String MOD_ID = "brokenpath";
    public static final Logger LOGGER = LogManager.getLogger(MOD_ID);

    public static final Map<UUID, CompoundTag> PLAYER_XP_NBT_CACHE = new HashMap<>();
    public static final Map<UUID, CompoundTag> PLAYER_STATS_NBT_CACHE = new HashMap<>();


    public BrokenPath() {
        IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();

        modEventBus.addListener(this::commonSetup);
        modEventBus.addListener(this::clientSetup);
        modEventBus.addListener(ModCapabilities::register);
        ModMobEffects.MOB_EFFECTS.register(FMLJavaModLoadingContext.get().getModEventBus());

        ModDamageTypes.DAMAGE_TYPES.register(modEventBus);
        MinecraftForge.EVENT_BUS.register(this);
    }

    private void commonSetup(final FMLCommonSetupEvent event) {
        event.enqueueWork(() -> {
            ModConfigs.loadConfig();
            PacketHandler.registerMessages();
        });
    }

    private void clientSetup(final FMLClientSetupEvent event) {
    }


    @SubscribeEvent
    public void onAttachCapabilitiesEntity(AttachCapabilitiesEvent<Entity> event) {
        if (event.getObject() instanceof Player player) {
            // Attach PlayerStats capability
            if (!player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).isPresent()) {
                event.addCapability(new ResourceLocation(MOD_ID, "player_stats"), new PlayerCapabilityProvider(player));
            }

            // Attach IPlayerXP capability
            if (!player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).isPresent()) {
                event.addCapability(new ResourceLocation(MOD_ID, "player_xp"), new PlayerXPCapabilityProvider(player));
            }
        }
    }

    @SubscribeEvent
    public void onLivingDeath(LivingDeathEvent event) {
        if (event.getEntity() instanceof ServerPlayer originalPlayer && !originalPlayer.level().isClientSide()) {
            // El jugador está muriendo, guardar sus datos de capacidad
            UUID playerUUID = originalPlayer.getUUID();
            BrokenPath.LOGGER.info("[BrokenPath DEBUG] LivingDeathEvent for player {}. Caching NBT.", originalPlayer.getName().getString());

            originalPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(oldXP -> {
                PLAYER_XP_NBT_CACHE.put(playerUUID, oldXP.serializeNBT());
                BrokenPath.LOGGER.info("[BrokenPath DEBUG] Cached IPlayerXP NBT for UUID: {}", playerUUID);
            });

            originalPlayer.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(oldStats -> {
                PLAYER_STATS_NBT_CACHE.put(playerUUID, oldStats.serializeNBT());
                BrokenPath.LOGGER.info("[BrokenPath DEBUG] Cached IPlayerStats NBT for UUID: {}", playerUUID);
            });
        }
    }

    @SubscribeEvent
    public void onPlayerClone(PlayerEvent.Clone event) {
        Player newPlayer = event.getEntity();
        Player originalPlayer = event.getOriginal();
        UUID playerUUID = originalPlayer.getUUID();
        String playerName = newPlayer.getName().getString();

        if (event.isWasDeath()) {
            BrokenPath.LOGGER.info("[BrokenPath DEBUG] Player {} died. Attempting NBT data transfer FROM CACHE.", playerName);

            // --- Transferir IPlayerXP desde el caché y aplicar penalización ---
            CompoundTag xpNBT = PLAYER_XP_NBT_CACHE.remove(playerUUID);
            if (xpNBT != null) {
                newPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(newXP -> {
                    newXP.deserializeNBT(xpNBT); // Restaura estado de XP (nivel, exp actual, deuda actual)
                    BrokenPath.LOGGER.info("[BrokenPath DEBUG] DEATH - IPlayerXP restored from CACHE. State for {}: Level={}, Exp={}, Debt={}",
                            playerName, newXP.getLevel(), newXP.getExperience(), newXP.getXPDebt());

                    // Lógica de Penalización por Muerte (según tu nueva definición)
                    if (newXP.getLevel() >= ModConfigs.MAX_LEVEL) {
                        BrokenPath.LOGGER.info("[BrokenPath DEBUG] XP Penalty skipped for {}: At Max Level.", playerName);
                    } else {
                        ModConfigs configs = ModConfigs.getInstance();
                        float penaltyPercentage = configs.xpLossPercentageOnDeath;
                        float maxDebtPercentage = configs.xpMaxDebtPercentage;

                        // XP Potencial: XP necesaria para completar el nivel actual (pasar de Nivel L a L+1)
                        int xpPotencial = configs.getXPForNextLevel(newXP.getLevel());
                        if (newXP.getLevel() == 0 && xpPotencial == 0) { // Caso especial para nivel 1, getXPForNextLevel(0) podría ser para nivel 1->2.
                            // Si getXPForNextLevel(1) es para 1->2, usa eso.
                            xpPotencial = configs.getXPForNextLevel(1); // Ajusta según cómo getXPForNextLevel maneje el nivel 1
                        }


                        int penalizacionBase = (int) (xpPotencial * penaltyPercentage);
                        int deudaMaximaPermitida = (int) (xpPotencial * maxDebtPercentage);
                        int deudaActual = newXP.getXPDebt();
                        int xpActivaActual = newXP.getExperience();

                        BrokenPath.LOGGER.info("[BrokenPath DEBUG] XP Penalty Calc for {}: XP_Potencial={}, PenalizacionBase={}, DeudaMaxima={}, DeudaActual={}, XPActivaActual={}",
                                playerName, xpPotencial, penalizacionBase, deudaMaximaPermitida, deudaActual, xpActivaActual);

                        if (deudaActual >= deudaMaximaPermitida) {
                            BrokenPath.LOGGER.info("[BrokenPath DEBUG] XP Penalty skipped for {}: Current Debt ({}) >= Max Allowed Debt ({}).",
                                    playerName, deudaActual, deudaMaximaPermitida);
                        } else {
                            // Aplicar la penalización. addExperience se encarga de la deuda si la XP activa baja de 0.
                            newXP.addExperience(-penalizacionBase);
                            BrokenPath.LOGGER.info("[BrokenPath DEBUG] Applied -{} base penalty. State for {}: Level={}, Exp={}, Debt={}",
                                    penalizacionBase, playerName, newXP.getLevel(), newXP.getExperience(), newXP.getXPDebt());

                            // Ajustar la deuda si excede el máximo permitido después de la penalización.
                            if (newXP.getXPDebt() > deudaMaximaPermitida) {
                                BrokenPath.LOGGER.info("[BrokenPath DEBUG] Current debt ({}) exceeded max allowed ({}). Clamping debt for {}.",
                                        newXP.getXPDebt(), deudaMaximaPermitida, playerName);
                                newXP.setXPDebt(deudaMaximaPermitida); // Ajusta la deuda al máximo
                                BrokenPath.LOGGER.info("[BrokenPath DEBUG] Debt clamped for {}. New State: Level={}, Exp={}, Debt={}",
                                        playerName, newXP.getLevel(), newXP.getExperience(), newXP.getXPDebt());
                            }
                        }
                    }
                });
            } else {
                BrokenPath.LOGGER.warn("[BrokenPath DEBUG] DEATH - Could not find cached IPlayerXP NBT for UUID: {}. XP will be default.", playerUUID);
            }

            // --- Transferir IPlayerStats desde el caché ---
            CompoundTag statsNBT = PLAYER_STATS_NBT_CACHE.remove(playerUUID);
            if (statsNBT != null) {
                newPlayer.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(newStats -> {
                    newStats.deserializeNBT(statsNBT);
                    BrokenPath.LOGGER.info("[BrokenPath DEBUG] DEATH - IPlayerStats restored from CACHE for {}. newStats race: {}, AttrPoints: {}",
                            playerName, newStats.getRace(), newStats.getAttributePoints());
                    // Considerar si necesitas resetear algunos valores específicos de PlayerStats aquí
                    // después de cargar desde NBT (ej. salud actual al máximo).
                    // PlayerStatEventHandler.onPlayerRespawn ya se encarga de rellenar salud, maná, etc.
                });
            } else {
                BrokenPath.LOGGER.warn("[BrokenPath DEBUG] DEATH - Could not find cached IPlayerStats NBT for UUID: {}. Stats will be default.", playerUUID);
            }

        } else { // No fue por muerte (ej. cambio de dimensión)
            BrokenPath.LOGGER.info("[BrokenPath DEBUG] Player {} cloned (NON-DEATH). Performing direct capability copy.", playerName);
            // Copia directa para IPlayerXP
            originalPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(oldXP -> {
                newPlayer.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(newXP -> {
                    BrokenPath.LOGGER.info("[BrokenPath DEBUG] NON-DEATH - oldXP for {}: Level={}, Exp={}, Debt={}",
                            playerName, oldXP.getLevel(), oldXP.getExperience(), oldXP.getXPDebt());
                    BrokenPath.LOGGER.info("[BrokenPath DEBUG] NON-DEATH - newXP (before copy) for {}: Level={}, Exp={}, Debt={}",
                            playerName, newXP.getLevel(), newXP.getExperience(), newXP.getXPDebt());
                    newXP.copyFrom(oldXP);
                    BrokenPath.LOGGER.info("[BrokenPath DEBUG] NON-DEATH - newXP (after copy) for {}: Level={}, Exp={}, Debt={}",
                            playerName, newXP.getLevel(), newXP.getExperience(), newXP.getXPDebt());
                });
            });
            // Copia directa para IPlayerStats
            originalPlayer.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(oldStats -> {
                newPlayer.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).ifPresent(newStats -> {
                    BrokenPath.LOGGER.info("[BrokenPath DEBUG] NON-DEATH - oldStats for {}: Race={}, AttrPoints={}",
                            playerName, oldStats.getRace(), oldStats.getAttributePoints());
                    BrokenPath.LOGGER.info("[BrokenPath DEBUG] NON-DEATH - newStats (before copy) for {}: Race={}, AttrPoints={}",
                            playerName, newStats.getRace(), newStats.getAttributePoints());
                    newStats.copyFrom(oldStats);
                    BrokenPath.LOGGER.info("[BrokenPath DEBUG] NON-DEATH - newStats (after copy) for {}: Race={}, AttrPoints={}",
                            playerName, newStats.getRace(), newStats.getAttributePoints());
                });
            });
        }
    }
}