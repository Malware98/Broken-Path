package com.malware98.brokenpath;

import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.data.ModDamageTypes;
import com.malware98.brokenpath.network.PacketHandler;
import com.malware98.brokenpath.registries.ModMobEffects;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.malware98.brokenpath.events.AchievementEventHandler;

/**
 * Main class for the "BrokenPath" mod.
 * Initializes core mod components: event listeners, capabilities,
 * damage types, mob effects, and configurations.
 */
@Mod(BrokenPath.MOD_ID)
public class BrokenPath {

    // Unique identifier for the mod, must be lowercase.
    // This ID is used throughout the mod for registration and referencing.
    public static final String MOD_ID = "brokenpath";

    // Logger instance for mod-specific logging.
    public static final Logger LOGGER = LogManager.getLogger(MOD_ID);

    /**
     * Mod constructor. Called by Forge during mod initialization.
     * Registers all necessary components and event handlers.
     */
    public BrokenPath() {
        IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();

        // Register lifecycle event listeners for common and client-side setup.
        modEventBus.addListener(this::commonSetup);
        modEventBus.addListener(this::clientSetup);

        // Register deferred registries and capabilities.
        // Capabilities allow custom data to be attached to game elements.
        modEventBus.addListener(ModCapabilities::register);
        // Mob effects and damage types are registered to Forge's registries.
        ModMobEffects.MOB_EFFECTS.register(modEventBus);
        ModDamageTypes.DAMAGE_TYPES.register(modEventBus);

        // Register this mod instance to the main MinecraftForge event bus
        // to listen for general game events.
        MinecraftForge.EVENT_BUS.register(this);
        // Register the achievement event handler to track player progress.
        MinecraftForge.EVENT_BUS.register(new AchievementEventHandler());
    }

    /**
     * Common setup handler (runs on both client and server).
     * Enqueues work for configuration loading and network message registration.
     * @param event The common setup event.
     */
    private void commonSetup(final FMLCommonSetupEvent event) {
        // Enqueue work to run on the main game thread.
        event.enqueueWork(() -> {
            ModConfigs.loadConfig(); // Load mod configurations.
            PacketHandler.registerMessages(); // Register network packets for client-server communication.
        });
    }

    /**
     * Client-specific setup handler (runs only on the client).
     * @param event The client setup event.
     */
    private void clientSetup(final FMLClientSetupEvent event) {
        // Client-only initialization code goes here.
    }
}