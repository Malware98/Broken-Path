package com.malware98.brokenpath;

import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.data.ModDamageTypes;
import com.malware98.brokenpath.network.PacketHandler;
import com.malware98.brokenpath.registries.ModMobEffects;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.malware98.brokenpath.events.AchievementEventHandler;

/*
 * Clase principal del mod "BrokenPath".
 * Encargada de la inicialización principal: registro de eventos,
 * capacidades, tipos de daño, efectos de mob y configuraciones.
 */
@Mod(BrokenPath.MOD_ID)
public class BrokenPath {

    // --- Constantes ---
    // ID del mod. Debe ser único y coincidir con el valor en `mods.toml`.
    public static final String MOD_ID = "brokenpath";

    // Instancia del logger de Log4j para el mod.
    // Utilizada para imprimir mensajes de depuración, información, advertencias y errores.
    public static final Logger LOGGER = LogManager.getLogger(MOD_ID);

    // --- Constructor ---
    // Constructor principal de la clase del mod. Se llama durante la inicialización por Forge.
    public BrokenPath() {
        // Obtiene el bus de eventos del mod.
        IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();

        // Registra los oyentes de eventos de ciclo de vida.
        modEventBus.addListener(this::commonSetup); // Evento común (cliente y servidor).
        modEventBus.addListener(this::clientSetup); // Evento solo para el cliente.

        // Registra los Deferred Registers y otras inicializaciones.
        modEventBus.addListener(ModCapabilities::register); // Registra las capacidades.
        ModMobEffects.MOB_EFFECTS.register(FMLJavaModLoadingContext.get().getModEventBus()); // Registra los efectos de mob.
        ModDamageTypes.DAMAGE_TYPES.register(modEventBus); // Registra los tipos de daño.

        // Registra esta instancia en el bus de eventos principal de MinecraftForge.
        MinecraftForge.EVENT_BUS.register(this);

        // Registra el manejador de eventos para los logros
        MinecraftForge.EVENT_BUS.register(new AchievementEventHandler());
    }

    // --- Rutinas de ciclo de vida (FML) ---
    // Configuración común para el mod. Se ejecuta en ambos lados (cliente/servidor).
    private void commonSetup(final FMLCommonSetupEvent event) {
        // Asegura que las tareas se ejecuten en el hilo principal.
        event.enqueueWork(() -> {
            ModConfigs.loadConfig(); // Carga las configuraciones.
            PacketHandler.registerMessages(); // Registra los mensajes de red.
        });
    }

    // Configuración del cliente para el mod. Se ejecuta solo en el lado del cliente.
    private void clientSetup(final FMLClientSetupEvent event) {
        // Aquí iría el código de inicialización específico del cliente.
    }
}