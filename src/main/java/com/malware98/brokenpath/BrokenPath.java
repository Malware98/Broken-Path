package com.malware98.brokenpath;

import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.data.ModDamageTypes;
import com.malware98.brokenpath.network.PacketHandler;
import com.malware98.brokenpath.registries.ModMobEffects;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.malware98.brokenpath.events.AchievementEventHandler;

/**
 * Main class for the "BrokenPath" mod.
 * Responsible for core initialization: registering events,
 * capabilities, damage types, mob effects, and configurations.
 */
@Mod(BrokenPath.MOD_ID)
public class BrokenPath {

    // --- Constants ---
    // The unique mod ID. Must be lowercase and match the value in `mods.toml`.
    public static final String MOD_ID = "brokenpath";

    // Log4j logger instance for the mod.
    // Used to print debug, info, warning, and error messages.
    public static final Logger LOGGER = LogManager.getLogger(MOD_ID);

    // --- Constructor ---
    // Main constructor for the mod class. Called by Forge during initialization.
    public BrokenPath() {
        // Gets the mod event bus.
        IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();

        // Registers lifecycle event listeners.
        modEventBus.addListener(this::commonSetup); // Common event (client and server).
        modEventBus.addListener(this::clientSetup); // Client-only event.

        // Registers Deferred Registers and other initializations.
        modEventBus.addListener(ModCapabilities::register); // Registers capabilities.
        ModMobEffects.MOB_EFFECTS.register(FMLJavaModLoadingContext.get().getModEventBus()); // Registers mob effects.
        ModDamageTypes.DAMAGE_TYPES.register(modEventBus); // Registers damage types.

        // Registers this instance to the main MinecraftForge event bus.
        MinecraftForge.EVENT_BUS.register(this);

        // Registers the event handler for achievements.
        MinecraftForge.EVENT_BUS.register(new AchievementEventHandler());
    }

    // --- Lifecycle Routines (FML) ---
    // Common setup for the mod. Runs on both sides (client/server).
    private void commonSetup(final FMLCommonSetupEvent event) {
        // Ensures tasks run on the main thread.
        event.enqueueWork(() -> {
            ModConfigs.loadConfig(); // Loads configurations.
            PacketHandler.registerMessages(); // Registers network messages.
        });
    }

    // Client setup for the mod. Runs only on the client side.
    private void clientSetup(final FMLClientSetupEvent event) {
        // Client-specific initialization code would go here.
    }
}