package com.malware98.brokenpath.client;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class PlayerStatsClient {

    // Atributos y estadísticas del jugador, sincronizados desde el servidor
    private static int clientAttributePoints = 0;
    private static int clientConstitution = 0;
    private static int clientStrength = 0;
    private static int clientDexterity = 0;
    private static int clientIntelligence = 0;

    private static float clientCurrentHealth = 20.0f;
    private static float clientMaxHealth = 20.0f;
    private static float clientCurrentProtection = 0.0f;
    private static float clientMaxProtection = 0.0f;
    private static float clientCurrentInnateProtection = 0.0f;
    private static float clientMaxInnateProtection = 0.0f;
    private static float clientCurrentMana = 0.0f;
    private static float clientMaxMana = 0.0f;
    private static float clientCurrentVigor = 0.0f;
    private static float clientMaxVigor = 0.0f;
    private static float clientFavor = 0.0f;
    private static float clientLuckBonusMultiplier = 1.0f;

    private static String clientRace = "HUMAN";
    private static String clientPlayerClass = "NO_CLASS";
    private static String clientSpecialization = "";
    private static int clientSkillPoints = 0;
    private static Map<String, Integer> clientProfessions = new HashMap<>();

    public static int hungerStage;


    // Constructor privado para evitar instantiation
    private PlayerStatsClient() {}

    // Actualiza todos los valores de PlayerStats en el lado del cliente.
    public static void setAllStats(int attributePoints,
                                   int constitution, int strength, int dexterity, int intelligence,
                                   float currentHealth, float maxHealth,
                                   float currentProtection, float maxProtection,
                                   float currentInnateProtection, float maxInnateProtection,
                                   float currentMana, float maxMana,
                                   float currentVigor, float maxVigor,
                                   float favor,
                                   String race,
                                   String playerClass,
                                   String specialization,
                                   int skillPoints,
                                   Map<String, Integer> professions,
                                   int hungerStage,
                                   float favorBonusMultiplier) {

        clientAttributePoints = attributePoints;
        clientConstitution = constitution;
        clientStrength = strength;
        clientDexterity = dexterity;
        clientIntelligence = intelligence;

        clientMaxHealth = maxHealth;
        clientCurrentHealth = currentHealth;
        if (clientCurrentHealth > clientMaxHealth) clientCurrentHealth = clientMaxHealth;

        clientMaxProtection = maxProtection;
        clientCurrentProtection = currentProtection;
        if (clientCurrentProtection > clientMaxProtection) clientCurrentProtection = clientMaxProtection;

        clientMaxInnateProtection = maxInnateProtection;
        clientCurrentInnateProtection = currentInnateProtection;
        if (clientCurrentInnateProtection > clientMaxInnateProtection) clientCurrentInnateProtection = clientMaxInnateProtection;

        clientMaxMana = maxMana;
        clientCurrentMana = currentMana;
        if (clientCurrentMana > clientMaxMana) clientCurrentMana = clientMaxMana; // ¡CORRECCIÓN APLICADA AQUÍ!

        clientMaxVigor = maxVigor;
        clientCurrentVigor = currentVigor;
        if (clientCurrentVigor > clientMaxVigor) clientCurrentVigor = clientMaxVigor;

        clientFavor = favor;
        clientLuckBonusMultiplier = favorBonusMultiplier;

        clientRace = race;
        clientPlayerClass = playerClass;
        clientSpecialization = specialization;
        clientSkillPoints = skillPoints;
        clientProfessions = new HashMap<>(professions);

        PlayerStatsClient.hungerStage = hungerStage;

    }

    // Getters para acceder a los datos desde la UI del cliente
    public static int getClientAttributePoints() { return clientAttributePoints; }
    public static int getClientConstitution() { return clientConstitution; }
    public static int getClientStrength() { return clientStrength; }
    public static int getClientDexterity() { return clientDexterity; }
    public static int getClientIntelligence() { return clientIntelligence; }

    public static float getClientCurrentHealth() { return clientCurrentHealth; }
    public static float getClientMaxHealth() { return clientMaxHealth; }
    public static float getClientCurrentProtection() { return clientCurrentProtection; }
    public static float getClientMaxProtection() { return clientMaxProtection; }
    public static float getClientCurrentInnateProtection() { return clientCurrentInnateProtection; }
    public static float getClientMaxInnateProtection() { return clientMaxInnateProtection; }
    public static float getClientCurrentMana() { return clientCurrentMana; }
    public static float getClientMaxMana() { return clientMaxMana; }
    public static float getClientCurrentVigor() { return clientCurrentVigor; }
    public static float getClientMaxVigor() { return clientMaxVigor; }
    public static float getClientLuck() { return clientFavor; }
    public static float getClientLuckBonusMultiplier() { return clientLuckBonusMultiplier; }

    public static String getClientRace() { return clientRace; }
    public static String getClientPlayerClass() { return clientPlayerClass; }
    public static String getClientSpecialization() { return clientSpecialization; }
    public static int getClientSkillPoints() { return clientSkillPoints; }
    public static Map<String, Integer> getClientProfessions() {
        return Collections.unmodifiableMap(clientProfessions);
    }

}
