package com.malware98.brokenpath.client;

import com.malware98.brokenpath.BrokenPath;
import net.minecraft.client.Minecraft;

import java.util.*;

/**
 * Manages and stores the player's detailed statistics on the client side.
 * These values are synchronized from the server and are primarily used
 * to populate and update the client-side user interface (UI).
 */
public class PlayerStatsClient {

    // --- Core Player Attributes and Primary Stats (Synchronized from Server) ---

    // Attribute points available for manual allocation.
    private static int clientAttributePoints = 0;
    // Core attribute: Constitution.
    private static int clientConstitution = 0;
    // Core attribute: Strength.
    private static int clientStrength = 0;
    // Core attribute: Dexterity.
    private static int clientDexterity = 0;
    // Core attribute: Intelligence.
    private static int clientIntelligence = 0;

    // Current health of the player.
    private static float clientCurrentHealth = 20.0f;
    // Maximum health of the player.
    private static float clientMaxHealth = 20.0f;
    // Current protection (STR-based) that absorbs incoming damage.
    private static float clientCurrentProtection = 0.0f;
    // Maximum protection (STR-based).
    private static float clientMaxProtection = 0.0f;
    // Current innate protection, a passive damage reduction.
    private static float clientCurrentInnateProtection = 0.0f;
    // Maximum innate protection.
    private static float clientMaxInnateProtection = 0.0f;
    // Current mana, used for casting spells or abilities.
    private static float clientCurrentMana = 0.0f;
    // Maximum mana.
    private static float clientMaxMana = 0.0f;
    // Current vigor, used for physical abilities or movement.
    private static float clientCurrentVigor = 0.0f;
    // Maximum vigor.
    private static float clientMaxVigor = 0.0f;
    // Player's Favor (luck) value, influencing various in-game events.
    private static float clientFavor = 0.0f;
    // Multiplier applied to Favor gains/losses.
    private static float clientFavorBonusMultiplier = 1.0f;

    // --- Player Identity and Progression Data ---
    // Player's selected race.
    private static String clientRace = "SPIRIT"; // MODIFIED: Default to "SPIRIT"
    // Player's selected class.
    private static String clientPlayerClass = "NO_CLASS";
    // Player's chosen specialization within their class.
    private static String clientSpecialization = "";
    // Skill points available for abilities or talent trees.
    private static int clientSkillPoints = 0;
    // Map storing player's professions and their respective levels.
    private static Map<String, Integer> clientProfessions = new HashMap<>();

    // Current hunger stage of the player (0 = Normal, 3 = Starving).
    public static int hungerStage;

    // --- Achievement and Exploration Data (Synchronized from Server) ---
    // Map tracking the numerical progress of each achievement.
    private static Map<String, Integer> clientAchievementProgress = new HashMap<>();
    // Map tracking whether an achievement has been completed.
    private static Map<String, Boolean> clientCompletedAchievements = new HashMap<>();
    // List of resource locations for biomes the player has discovered.
    private static List<String> clientDiscoveredBiomesLocations = new ArrayList<>();
    // List of resource locations for dimensions the player has visited.
    private static List<String> clientVisitedDimensionsLocations = new ArrayList<>();
    // List of resource locations for unique items the player has crafted.
    private static List<String> clientCraftedUniqueItemsLocations = new ArrayList<>();
    // List of resource locations for tamed animals the player has tamed.
    private static List<String> clientTamedAnimalsLocations = new ArrayList<>();

    // --- Constructor ---

    // Private constructor to prevent instantiation of this utility class.
    private PlayerStatsClient() {}

    // --- Update Methods ---

    /**
     * Updates all player statistic values on the client side.
     * This method is called upon receiving a {@link com.malware98.brokenpath.network.messages.SyncPlayerStatsPacket}
     * from the server, ensuring all client-side UI and calculations are up-to-date.
     * It also clamps current values to their maximums to prevent display errors.
     */
    public static void setAllStats(int attributePoints,
                                   int constitution, int strength, int dexterity, int intelligence,
                                   float currentHealth, float maxHealth,
                                   float currentProtection, float maxProtection,
                                   float currentInnateProtection, float maxInnateProtection,
                                   float currentMana, float maxMana,
                                   float currentVigor, float maxVigor,
                                   float favor,
                                   String race,
                                   String playerClass,
                                   String specialization,
                                   int skillPoints,
                                   Map<String, Integer> professions,
                                   int hungerStage,
                                   float favorBonusMultiplier,
                                   Map<String, Integer> achievementProgress,
                                   Map<String, Boolean> completedAchievements,
                                   List<String> discoveredBiomesLocations,
                                   List<String> visitedDimensionsLocations,
                                   List<String> craftedUniqueItemsLocations,
                                   List<String> tamedAnimalsLocations) {

        clientAttributePoints = attributePoints;
        clientConstitution = constitution;
        clientStrength = strength;
        clientDexterity = dexterity;
        clientIntelligence = intelligence;

        clientMaxHealth = maxHealth;
        clientCurrentHealth = currentHealth;
        // Ensure current health does not exceed maximum health.
        if (clientCurrentHealth > clientMaxHealth) clientCurrentHealth = clientMaxHealth;

        clientMaxProtection = maxProtection;
        clientCurrentProtection = currentProtection;
        // Ensure current protection does not exceed maximum protection.
        if (clientCurrentProtection > clientMaxProtection) clientCurrentProtection = clientMaxProtection;

        clientMaxInnateProtection = maxInnateProtection;
        clientCurrentInnateProtection = currentInnateProtection;
        // Ensure current innate protection does not exceed maximum innate protection.
        if (clientCurrentInnateProtection > clientMaxInnateProtection) clientCurrentInnateProtection = clientMaxInnateProtection;

        clientMaxMana = maxMana;
        clientCurrentMana = currentMana;
        // Ensure current mana does not exceed maximum mana.
        if (clientCurrentMana > clientMaxMana) clientCurrentMana = clientMaxMana;

        clientMaxVigor = maxVigor;
        clientCurrentVigor = currentVigor;
        // Ensure current vigor does not exceed maximum vigor.
        if (clientCurrentVigor > clientMaxVigor) clientCurrentVigor = clientMaxVigor;

        clientFavor = favor;
        clientFavorBonusMultiplier = favorBonusMultiplier;

        clientRace = race;
        clientPlayerClass = playerClass;
        clientSpecialization = specialization;
        clientSkillPoints = skillPoints;
        // Create a new instance of the map to prevent external modifications.
        clientProfessions = new HashMap<>(professions);

        PlayerStatsClient.hungerStage = hungerStage;

        // Create new map instances to protect against external modifications.
        clientAchievementProgress = new HashMap<>(achievementProgress);
        clientCompletedAchievements = new HashMap<>(completedAchievements);
        // Create new list instances to protect against external modifications.
        clientDiscoveredBiomesLocations = new ArrayList<>(discoveredBiomesLocations);
        clientVisitedDimensionsLocations = new ArrayList<>(visitedDimensionsLocations);
        clientCraftedUniqueItemsLocations = new ArrayList<>(craftedUniqueItemsLocations);
        // Create new list instances to protect against external modifications.
        clientTamedAnimalsLocations = new ArrayList<>(tamedAnimalsLocations);
    }

    // --- Getters for Client-side UI Access ---

    public static int getClientAttributePoints() { return clientAttributePoints; }
    public static int getClientConstitution() { return clientConstitution; }
    public static int getClientStrength() { return clientStrength; }
    public static int getClientDexterity() { return clientDexterity; }
    public static int getClientIntelligence() { return clientIntelligence; }

    public static float getClientCurrentHealth() { return clientCurrentHealth; }
    public static float getClientMaxHealth() { return clientMaxHealth; }
    public static float getClientCurrentProtection() { return clientCurrentProtection; }
    public static float getClientMaxProtection() { return clientMaxProtection; }
    public static float getClientCurrentInnateProtection() { return clientCurrentInnateProtection; }
    public static float getClientMaxInnateProtection() { return clientMaxInnateProtection; }
    public static float getClientCurrentMana() { return clientCurrentMana; }
    public static float getClientMaxMana() { return clientMaxMana; }
    public static float getClientCurrentVigor() { return clientCurrentVigor; }
    public static float getClientMaxVigor() { return clientMaxVigor; }
    public static float getClientFavor() { return clientFavor; }
    public static float getClientFavorBonusMultiplier() { return clientFavorBonusMultiplier; }

    public static String getClientRace() { return clientRace; }
    public static String getClientPlayerClass() { return clientPlayerClass; }
    public static String getClientSpecialization() { return clientSpecialization; }
    public static int getClientSkillPoints() { return clientSkillPoints; }
    /**
     * Returns an unmodifiable view of the client's professions map.
     * This prevents external code from altering the client-side data directly.
     * @return An unmodifiable map of professions and their levels.
     */
    public static Map<String, Integer> getClientProfessions() {
        return Collections.unmodifiableMap(clientProfessions);
    }

    // --- Getters for Achievements and Exploration Data ---

    /**
     * Returns an unmodifiable view of the client's achievement progress map.
     * @return A map where keys are achievement IDs and values are current progress.
     */
    public static Map<String, Integer> getClientAchievementProgress() {
        return Collections.unmodifiableMap(clientAchievementProgress);
    }
    /**
     * Returns an unmodifiable view of the client's completed achievements map.
     * @return An unmodifiable map where keys are achievement IDs and values are boolean completion status.
     */
    public static Map<String, Boolean> getClientCompletedAchievements() {
        return Collections.unmodifiableMap(clientCompletedAchievements);
    }
    /**
     * Checks if a specific achievement is completed on the client side.
     * @param achievementKey The ID of the achievement.
     * @return True if the achievement is completed, false otherwise or if it doesn't exist.
     */
    public static boolean isClientAchievementCompleted(String achievementKey) {
        return clientCompletedAchievements.getOrDefault(achievementKey, false);
    }

    /**
     * Returns an unmodifiable list of resource locations for biomes discovered by the client.
     * @return An unmodifiable list of discovered biome locations.
     */
    public static List<String> getClientDiscoveredBiomesLocations() {
        return Collections.unmodifiableList(clientDiscoveredBiomesLocations);
    }
    /**
     * Returns an unmodifiable list of resource locations for dimensions visited by the client.
     * @return An unmodifiable list of visited dimension locations.
     */
    public static List<String> getClientVisitedDimensionsLocations() {
        return Collections.unmodifiableList(clientVisitedDimensionsLocations);
    }
    /**
     * Returns an unmodifiable list of resource locations for unique items crafted by the client.
     * @return An unmodifiable list of crafted unique item locations.
     */
    public static List<String> getClientCraftedUniqueItemsLocations() {
        return Collections.unmodifiableList(clientCraftedUniqueItemsLocations);
    }

    /**
     * Returns an unmodifiable list of resource locations for tamed animals by the client.
     * @return An unmodifiable list of tamed animal locations.
     */
    public static List<String> getClientTamedAnimalsLocations() {
        return Collections.unmodifiableList(clientTamedAnimalsLocations);
    }
}