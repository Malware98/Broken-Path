package com.malware98.brokenpath.client;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/*
 * Gestiona y almacena los datos de estadísticas del jugador en el lado del cliente.
 * Estos valores se sincronizan desde el servidor y son utilizados para la interfaz de usuario (UI).
 */
public class PlayerStatsClient {

    // --- Atributos y estadísticas principales del jugador (sincronizados desde el servidor) ---

    // Puntos de atributo disponibles para gastar
    private static int clientAttributePoints = 0;
    // Atributos base: Constitución
    private static int clientConstitution = 0;
    // Atributos base: Fuerza
    private static int clientStrength = 0;
    // Atributos base: Destreza
    private static int clientDexterity = 0;
    // Atributos base: Inteligencia
    private static int clientIntelligence = 0;

    // Estadísticas de combate y supervivencia: Salud actual
    private static float clientCurrentHealth = 20.0f;
    // Estadísticas de combate y supervivencia: Salud máxima
    private static float clientMaxHealth = 20.0f;
    // Estadísticas de combate y supervivencia: Protección actual (basada en Fuerza)
    private static float clientCurrentProtection = 0.0f;
    // Estadísticas de combate y supervivencia: Protección máxima (basada en Fuerza)
    private static float clientMaxProtection = 0.0f;
    // Estadísticas de combate y supervivencia: Protección Innata actual
    private static float clientCurrentInnateProtection = 0.0f;
    // Estadísticas de combate y supervivencia: Protección Innata máxima
    private static float clientMaxInnateProtection = 0.0f;
    // Estadísticas de combate y supervivencia: Maná actual
    private static float clientCurrentMana = 0.0f;
    // Estadísticas de combate y supervivencia: Maná máximo
    private static float clientMaxMana = 0.0f;
    // Estadísticas de combate y supervivencia: Vigor actual
    private static float clientCurrentVigor = 0.0f;
    // Estadísticas de combate y supervivencia: Vigor máximo
    private static float clientMaxVigor = 0.0f;
    // Estadísticas de combate y supervivencia: Favor (suerte)
    private static float clientFavor = 0.0f;
    // Estadísticas de combate y supervivencia: Multiplicador de bonificación de Favor
    private static float clientLuckBonusMultiplier = 1.0f;

    // Datos de identidad y progresión del jugador: Raza
    private static String clientRace = "HUMAN";
    // Datos de identidad y progresión del jugador: Clase
    private static String clientPlayerClass = "NO_CLASS";
    // Datos de identidad y progresión del jugador: Especialización
    private static String clientSpecialization = "";
    // Datos de identidad y progresión del jugador: Puntos de habilidad
    private static int clientSkillPoints = 0;
    // Datos de identidad y progresión del jugador: Profesiones y sus niveles
    private static Map<String, Integer> clientProfessions = new HashMap<>();

    // Etapa actual de hambre del jugador
    public static int hungerStage;

    // --- Constructor ---

    // Constructor privado para evitar la instanciación de esta clase de utilidad
    private PlayerStatsClient() {}

    // --- Métodos de Actualización ---

    // Actualiza todos los valores de las estadísticas del jugador en el lado del cliente
    public static void setAllStats(int attributePoints,
                                   int constitution, int strength, int dexterity, int intelligence,
                                   float currentHealth, float maxHealth,
                                   float currentProtection, float maxProtection,
                                   float currentInnateProtection, float maxInnateProtection,
                                   float currentMana, float maxMana,
                                   float currentVigor, float maxVigor,
                                   float favor,
                                   String race,
                                   String playerClass,
                                   String specialization,
                                   int skillPoints,
                                   Map<String, Integer> professions,
                                   int hungerStage,
                                   float favorBonusMultiplier) {

        clientAttributePoints = attributePoints;
        clientConstitution = constitution;
        clientStrength = strength;
        clientDexterity = dexterity;
        clientIntelligence = intelligence;

        clientMaxHealth = maxHealth;
        clientCurrentHealth = currentHealth;
        // Asegura que la salud actual no exceda la salud máxima
        if (clientCurrentHealth > clientMaxHealth) clientCurrentHealth = clientMaxHealth;

        clientMaxProtection = maxProtection;
        clientCurrentProtection = currentProtection;
        // Asegura que la protección actual no exceda la protección máxima
        if (clientCurrentProtection > clientMaxProtection) clientCurrentProtection = clientMaxProtection;

        clientMaxInnateProtection = maxInnateProtection;
        clientCurrentInnateProtection = currentInnateProtection;
        // Asegura que la protección innata actual no exceda la protección innata máxima
        if (clientCurrentInnateProtection > clientMaxInnateProtection) clientCurrentInnateProtection = clientMaxInnateProtection;

        clientMaxMana = maxMana;
        clientCurrentMana = currentMana;
        // Asegura que el maná actual no exceda el maná máximo
        if (clientCurrentMana > clientMaxMana) clientCurrentMana = clientMaxMana;

        clientMaxVigor = maxVigor;
        clientCurrentVigor = currentVigor;
        // Asegura que el vigor actual no exceda el vigor máximo
        if (clientCurrentVigor > clientMaxVigor) clientCurrentVigor = clientMaxVigor;

        clientFavor = favor;
        clientLuckBonusMultiplier = favorBonusMultiplier;

        clientRace = race;
        clientPlayerClass = playerClass;
        clientSpecialization = specialization;
        clientSkillPoints = skillPoints;
        // Crea una nueva instancia del mapa para evitar modificaciones externas
        clientProfessions = new HashMap<>(professions);

        PlayerStatsClient.hungerStage = hungerStage;
    }

    // --- Métodos Getters (para acceso desde la UI) ---

    // Obtiene los puntos de atributo del cliente
    public static int getClientAttributePoints() { return clientAttributePoints; }
    // Obtiene la constitución del cliente
    public static int getClientConstitution() { return clientConstitution; }
    // Obtiene la fuerza del cliente
    public static int getClientStrength() { return clientStrength; }
    // Obtiene la destreza del cliente
    public static int getClientDexterity() { return clientDexterity; }
    // Obtiene la inteligencia del cliente
    public static int getClientIntelligence() { return clientIntelligence; }

    // Obtiene la salud actual del cliente
    public static float getClientCurrentHealth() { return clientCurrentHealth; }
    // Obtiene la salud máxima del cliente
    public static float getClientMaxHealth() { return clientMaxHealth; }
    // Obtiene la protección actual del cliente
    public static float getClientCurrentProtection() { return clientCurrentProtection; }
    // Obtiene la protección máxima del cliente
    public static float getClientMaxProtection() { return clientMaxProtection; }
    // Obtiene la protección innata actual del cliente
    public static float getClientCurrentInnateProtection() { return clientCurrentInnateProtection; }
    // Obtiene la protección innata máxima del cliente
    public static float getClientMaxInnateProtection() { return clientMaxInnateProtection; }
    // Obtiene el maná actual del cliente
    public static float getClientCurrentMana() { return clientCurrentMana; }
    // Obtiene el maná máximo del cliente
    public static float getClientMaxMana() { return clientMaxMana; }
    // Obtiene el vigor actual del cliente
    public static float getClientCurrentVigor() { return clientCurrentVigor; }
    // Obtiene el vigor máximo del cliente
    public static float getClientMaxVigor() { return clientMaxVigor; }
    // Obtiene el favor (suerte) del cliente
    public static float getClientLuck() { return clientFavor; }
    // Obtiene el multiplicador de bonificación de favor del cliente
    public static float getClientLuckBonusMultiplier() { return clientLuckBonusMultiplier; }

    // Obtiene la raza del cliente
    public static String getClientRace() { return clientRace; }
    // Obtiene la clase del jugador del cliente
    public static String getClientPlayerClass() { return clientPlayerClass; }
    // Obtiene la especialización del cliente
    public static String getClientSpecialization() { return clientSpecialization; }
    // Obtiene los puntos de habilidad del cliente
    public static int getClientSkillPoints() { return clientSkillPoints; }
    // Obtiene una vista no modificable de las profesiones del cliente
    public static Map<String, Integer> getClientProfessions() {
        return Collections.unmodifiableMap(clientProfessions);
    }
}