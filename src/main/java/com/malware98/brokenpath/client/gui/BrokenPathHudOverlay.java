package com.malware98.brokenpath.client.gui;

import com.malware98.brokenpath.BrokenPath;
import com.mojang.blaze3d.systems.RenderSystem;
import net.minecraft.client.renderer.GameRenderer;
import net.minecraft.resources.ResourceLocation;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.client.event.RegisterGuiOverlaysEvent;
import net.minecraftforge.client.gui.overlay.IGuiOverlay;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import com.malware98.brokenpath.capabilities.IPlayerStats;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import net.minecraftforge.fml.common.Mod;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiGraphics;

import java.util.Optional;

// --- Event Subscriber Registration ---
/**
 * Registers and renders the custom HUD overlay for player statistics.
 * This class is subscribed to the Mod event bus on the client side to handle GUI overlay registration.
 */
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID, bus = Mod.EventBusSubscriber.Bus.MOD, value = Dist.CLIENT)
public class BrokenPathHudOverlay {

    // --- Texture and Dimension Constants ---
    // Location of the HUD texture atlas, containing all custom HUD elements.
    private static final ResourceLocation HUD_TEXTURE = new ResourceLocation(BrokenPath.MOD_ID, "textures/gui/hud/player_stats_hud.png");

    // Standard dimensions for the main stat bars (Health, Protection, Mana, Vigor) on screen.
    private static final int MAIN_BAR_W = 104; // Width of main bars
    private static final int MAIN_BAR_H = 10;  // Height of main bars

    // Dimensions for the innate protection bar on screen.
    private static final int INNATE_BAR_W = 16;
    private static final int INNATE_BAR_H = 10;

    // General spacing between HUD elements.
    private static final int GAP = 4;
    // Horizontal margin specifically between main bars and the innate protection bar.
    private static final int MAIN_INNATE_H_MARGIN = 2;

    // --- UV Coordinates and Dimensions from the PNG Texture Atlas ---

    // UVs and dimensions for the "Character Icon and Luck Title" block.
    // This block displays the player's icon and the "Favor" (Luck) title.
    private static final int UV_PLAYER_BLOCK_X = 0;
    private static final int UV_PLAYER_BLOCK_Y = 0;
    private static final int PLAYER_BLOCK_W = 48;
    private static final int PLAYER_BLOCK_H = 64;
    private static final int PLAYER_ICON_SQ_H = 48;

    // UVs and dimensions for secondary elements below the character block.
    // Separator: A small graphical element to divide sections.
    private static final int UV_SEPARATOR_X = 0;
    private static final int UV_SEPARATOR_Y = 68;
    private static final int SEPARATOR_WIDTH = 8;
    private static final int SEPARATOR_HEIGHT = 10;

    // Limit Strip: A small vertical indicator drawn at the end of filled bars.
    private static final int UV_LIMIT_STRIP_X = SEPARATOR_WIDTH + GAP; // Positioned after separator with a gap.
    private static final int UV_LIMIT_STRIP_Y = 68;
    private static final int LIMIT_STRIP_WIDTH = 2;
    private static final int LIMIT_STRIP_HEIGHT = 10;

    // UVs and dimensions for the Innate Protection bar elements.
    // Background of the innate protection bar.
    private static final int UV_IN_PROTECTION_BG_X = 0;
    private static final int UV_IN_PROTECTION_BG_Y = 82;
    private static final int IN_PROTECTION_BAR_SHEET_W = 16;
    private static final int IN_PROTECTION_BAR_SHEET_H = 10;

    // Overlay layer for innate protection bar (decorative element).
    private static final int UV_IN_PROTECTION_OVERLAY_X = UV_IN_PROTECTION_BG_X + IN_PROTECTION_BAR_SHEET_W + GAP;
    private static final int UV_IN_PROTECTION_OVERLAY_Y = UV_IN_PROTECTION_BG_Y;

    // Fill layer for innate protection bar (represents current value).
    private static final int UV_IN_PROTECTION_FILL_X = UV_IN_PROTECTION_OVERLAY_X + IN_PROTECTION_BAR_SHEET_W + GAP;
    private static final int UV_IN_PROTECTION_FILL_Y = UV_IN_PROTECTION_BG_Y;

    // UVs and dimensions for the main stat bars (Health, Protection, Mana, Vigor).
    // Background of the main stat bars.
    private static final int UV_MAIN_BAR_BACKGROUND_X = PLAYER_BLOCK_W + GAP; // Positioned right of character block.
    private static final int UV_MAIN_BAR_BACKGROUND_Y = 0;
    private static final int MAIN_STAT_BAR_W = 104;
    private static final int MAIN_STAT_BAR_H = 10;

    // Overlay layer for main stat bars (decorative element).
    private static final int UV_MAIN_BAR_OVERLAY_X = UV_MAIN_BAR_BACKGROUND_X;
    private static final int UV_MAIN_BAR_OVERLAY_Y = MAIN_STAT_BAR_H + GAP;

    // Fill layers for individual main stat bars (stacked vertically in PNG).
    // These UVs determine which part of the texture is used for the filled portion of the bar.
    private static final int UV_HEALTH_FILL_X = UV_MAIN_BAR_BACKGROUND_X;
    private static final int UV_HEALTH_FILL_Y = UV_MAIN_BAR_OVERLAY_Y + MAIN_STAT_BAR_H + GAP;

    private static final int UV_PROTECTION_FILL_Y = UV_HEALTH_FILL_Y + MAIN_STAT_BAR_H;
    private static final int UV_MANA_FILL_Y = UV_PROTECTION_FILL_Y + MAIN_STAT_BAR_H;
    private static final int UV_VIGOR_FILL_Y = UV_MANA_FILL_Y + MAIN_STAT_BAR_H;

    // UV for the "no statistic" static bar fill. Used for placeholder bars.
    private static final int UV_STATIC_FILL_Y = UV_VIGOR_FILL_Y + MAIN_STAT_BAR_H;


    // --- HUD Overlay Definition ---
    /**
     * Defines the actual rendering logic for the custom HUD.
     * This lambda is executed by Forge's GUI rendering system.
     */
    public static final IGuiOverlay HUD_OVERLAY = (mc, guiGraphics, screenWidth, screenHeight, partialTick) -> {
        Minecraft minecraft = Minecraft.getInstance();

        // --- Pre-rendering Checks ---
        // Prevents HUD from rendering if the player is not loaded or the game is paused.
        if (minecraft.player == null || minecraft.isPaused()) {
            return;
        }

        // Safely retrieve the player's custom stats capability.
        Optional<IPlayerStats> playerStatsOptional = minecraft.player.getCapability(ModCapabilities.PLAYER_DATA_CAPABILITY).resolve();

        // Abort rendering if the player stats capability is not present, as HUD relies on it.
        if (playerStatsOptional.isEmpty()) {
            return;
        }

        IPlayerStats playerStats = playerStatsOptional.get();

        // --- HUD Positioning on Screen ---
        // Defines the top-left corner where the HUD will start drawing.
        int hudStartX = 10;
        int hudStartY = 10;

        // --- Render System Setup ---
        // Prepare OpenGL for drawing textures. Sets the shader program and ensures full color rendering.
        RenderSystem.setShader(GameRenderer::getPositionTexShader);
        RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);

        // --- Draw Character Icon and Luck Title Block ---
        // Renders the fixed background element which includes the player icon area and the "Favor" title.
        guiGraphics.blit(
                HUD_TEXTURE,          // The texture atlas to draw from.
                hudStartX, hudStartY, // Screen coordinates (X, Y) to draw the element.
                UV_PLAYER_BLOCK_X, UV_PLAYER_BLOCK_Y, // UV coordinates (X, Y) on the texture atlas.
                PLAYER_BLOCK_W, PLAYER_BLOCK_H,       // Width and height of the portion to draw from the texture.
                256, 256              // Total dimensions of the texture atlas (width, height).
        );

        // Define fixed X positions for the separator and the main bar column.
        final int separadorX = hudStartX + PLAYER_BLOCK_W;     // Separator is positioned right of the character block.
        final int mainBarX = separadorX + SEPARATOR_WIDTH;     // Main bars are positioned right of the separator.

        // A mutable variable to track the current Y position for drawing each bar.
        // This allows bars to be stacked dynamically based on visibility.
        int currentDrawY = hudStartY + 4; // Start with a 4px margin from the top of the HUD block.

        // Counter to keep track of how many dynamic (stat-based) bars have been drawn.
        int dynamicBarsDrawnCount = 0;

        // --- Draw Dynamic Stat Bars (in a predefined order: Health, Protection, Mana, Vigor) ---

        // 1. Health Bar: Always drawn first if a player has health.
        if (minecraft.player.getMaxHealth() > 0) {
            float currentHealth = minecraft.player.getHealth();
            float maxHealth = minecraft.player.getMaxHealth();
            drawMainStatBar(guiGraphics, currentDrawY, separadorX, mainBarX, UV_HEALTH_FILL_Y, currentHealth, maxHealth);

            // Draw Innate Protection Bar, horizontally aligned with Health, if applicable for the player's race.
            if (playerStats.getMaxInnateProtection() > 0) {
                float currentInnateProtection = playerStats.getCurrentInnateProtection();
                float maxInnateProtection = playerStats.getMaxInnateProtection();
                // Calculate percentage, safely handling division by zero for maxInnateProtection.
                float innateProtectionPercentage = maxInnateProtection > 0 ? currentInnateProtection / maxInnateProtection : 0.0f;
                int innateBarX = mainBarX + MAIN_BAR_W + MAIN_INNATE_H_MARGIN; // Positioned right of the main health bar.
                drawInnateProtectionBar(guiGraphics, innateBarX, currentDrawY, innateProtectionPercentage); // Vertically aligned.
            }
            currentDrawY += MAIN_BAR_H; // Advance Y position for the next bar slot.
            dynamicBarsDrawnCount++;
        }

        // 2. Regular Protection Bar: Drawn only if the player has equipped armor.
        if (minecraft.player.getArmorValue() > 0) {
            float currentProtection = playerStats.getCurrentProtection();
            float maxProtection = playerStats.getMaxProtection();
            drawMainStatBar(guiGraphics, currentDrawY, separadorX, mainBarX, UV_PROTECTION_FILL_Y, currentProtection, maxProtection);
            currentDrawY += MAIN_BAR_H;
            dynamicBarsDrawnCount++;
        }

        // 3. Mana Bar: Drawn only if the player has a maximum Mana capacity greater than zero.
        if (playerStats.getMaxMana() > 0) {
            float currentMana = playerStats.getCurrentMana();
            float maxMana = playerStats.getMaxMana();
            drawMainStatBar(guiGraphics, currentDrawY, separadorX, mainBarX, UV_MANA_FILL_Y, currentMana, maxMana);
            currentDrawY += MAIN_BAR_H;
            dynamicBarsDrawnCount++;
        }

        // 4. Vigor Bar: Drawn only if the player has a maximum Vigor capacity greater than zero.
        if (playerStats.getMaxVigor() > 0) {
            float currentVigor = playerStats.getCurrentVigor();
            float maxVigor = playerStats.getMaxVigor();
            drawMainStatBar(guiGraphics, currentDrawY, separadorX, mainBarX, UV_VIGOR_FILL_Y, currentVigor, maxVigor);
            currentDrawY += MAIN_BAR_H;
            dynamicBarsDrawnCount++;
        }

        // --- Fill Remaining Slots with "No Statistic" Bars ---
        // Ensures a consistent total of 4 main bar slots are always displayed,
        // filling any empty slots with static placeholder bars.
        int numStaticBarsToDraw = 4 - dynamicBarsDrawnCount;
        for (int i = 0; i < numStaticBarsToDraw; i++) {
            drawNoStatisticBar(guiGraphics, currentDrawY, separadorX, mainBarX);
            currentDrawY += MAIN_BAR_H; // Advance Y for the next bar slot.
        }
    };

    // --- Helper Methods for Drawing Bars ---

    /**
     * Draws a single main stat bar (Health, Protection, Mana, Vigor).
     * This method abstracts away the repetitive drawing logic for the main bars,
     * including background, fill, limit strip, and overlay.
     *
     * @param guiGraphics  The GuiGraphics instance for drawing.
     * @param currentY     The current Y position on screen for this bar.
     * @param separadorX   The X position on screen for the separator element.
     * @param mainBarX     The X position on screen for the main bar elements.
     * @param uvFillY      The Y-coordinate on the texture atlas for the stat's fill texture.
     * @param currentValue The current value of the stat to display.
     * @param maxValue     The maximum value of the stat, used to calculate fill percentage.
     */
    private static void drawMainStatBar(GuiGraphics guiGraphics, int currentY,
                                        int separadorX, int mainBarX, int uvFillY, float currentValue, float maxValue) {
        // Calculate the fill percentage for the bar, safely handling division by zero.
        float percentage = maxValue > 0 ? currentValue / maxValue : 0.0f;
        int fillWidth = (int)(MAIN_BAR_W * percentage); // Determine the width of the filled portion.

        // Draw the Separator element to the left of the bar.
        guiGraphics.blit(HUD_TEXTURE, separadorX, currentY, UV_SEPARATOR_X, UV_SEPARATOR_Y, SEPARATOR_WIDTH, SEPARATOR_HEIGHT, 256, 256);

        // Draw the Background of the main stat bar.
        guiGraphics.blit(HUD_TEXTURE, mainBarX, currentY, UV_MAIN_BAR_BACKGROUND_X, UV_MAIN_BAR_BACKGROUND_Y, MAIN_STAT_BAR_W, MAIN_STAT_BAR_H, 256, 256);

        // Draw the Fill portion of the bar, representing the current value.
        // UV_HEALTH_FILL_X is used as the base X for all main bar fills, while uvFillY selects the specific stat's texture.
        guiGraphics.blit(HUD_TEXTURE, mainBarX, currentY, UV_HEALTH_FILL_X, uvFillY, fillWidth, MAIN_BAR_H, 256, 256);

        // Draw the Limit Strip if the bar has any fill, to visually indicate the current value's end.
        if (fillWidth > 0) {
            int limitStripX = mainBarX + fillWidth - LIMIT_STRIP_WIDTH; // Position it at the end of the fill.
            guiGraphics.blit(HUD_TEXTURE, limitStripX, currentY, UV_LIMIT_STRIP_X, UV_LIMIT_STRIP_Y, LIMIT_STRIP_WIDTH, LIMIT_STRIP_HEIGHT, 256, 256);
        }

        // Draw the Overlay layer for the main stat bar, always on top for decorative purposes.
        guiGraphics.blit(HUD_TEXTURE, mainBarX, currentY, UV_MAIN_BAR_OVERLAY_X, UV_MAIN_BAR_OVERLAY_Y, MAIN_STAT_BAR_W, MAIN_STAT_BAR_H, 256, 256);
    }

    /**
     * Draws the dedicated Innate Protection bar.
     * This method handles the drawing of its background, fill, limit strip, and overlay.
     *
     * @param guiGraphics The GuiGraphics instance for drawing.
     * @param x           The X position on screen for the bar.
     * @param y           The Y position on screen for the bar.
     * @param percentage  The fill percentage of the bar, representing current innate protection.
     */
    private static void drawInnateProtectionBar(GuiGraphics guiGraphics, int x, int y, float percentage) {
        // Draw the Background for the Innate Protection bar.
        guiGraphics.blit(HUD_TEXTURE, x, y, UV_IN_PROTECTION_BG_X, UV_IN_PROTECTION_BG_Y, INNATE_BAR_W, INNATE_BAR_H, 256, 256);

        // Draw the Fill for the Innate Protection bar.
        guiGraphics.blit(HUD_TEXTURE, x, y, UV_IN_PROTECTION_FILL_X, UV_IN_PROTECTION_FILL_Y, (int)(INNATE_BAR_W * percentage), INNATE_BAR_H, 256, 256);

        // Draw the Limit Strip for the Innate Protection bar if it has any fill.
        if ((int)(INNATE_BAR_W * percentage) > 0) {
            int limitStripX = x + (int)(INNATE_BAR_W * percentage) - LIMIT_STRIP_WIDTH;
            guiGraphics.blit(HUD_TEXTURE, limitStripX, y, UV_LIMIT_STRIP_X, UV_LIMIT_STRIP_Y, LIMIT_STRIP_WIDTH, LIMIT_STRIP_HEIGHT, 256, 256);
        }

        // Draw the Overlay for the Innate Protection bar.
        guiGraphics.blit(HUD_TEXTURE, x, y, UV_IN_PROTECTION_OVERLAY_X, UV_IN_PROTECTION_OVERLAY_Y, INNATE_BAR_W, INNATE_BAR_H, 256, 256);
    }

    /**
     * Helper method to draw a "no statistic" (static) bar.
     * This bar acts as a placeholder for dynamic bars that are currently hidden (e.g., if a player has no Mana).
     * It's always drawn as a full bar using a dedicated static texture.
     *
     * @param guiGraphics The GuiGraphics instance for drawing.
     * @param currentY    The current Y position for this bar.
     * @param separadorX  The X position for the separator.
     * @param mainBarX    The X position for the main bar elements.
     */
    private static void drawNoStatisticBar(GuiGraphics guiGraphics, int currentY, int separadorX, int mainBarX) {
        // Draw the Separator element, maintaining consistent visual alignment.
        guiGraphics.blit(
                HUD_TEXTURE,
                separadorX, currentY,
                UV_SEPARATOR_X, UV_SEPARATOR_Y,
                SEPARATOR_WIDTH, SEPARATOR_HEIGHT,
                256, 256
        );

        // Draw the static placeholder bar. Its texture is taken from UV_STATIC_FILL_Y,
        // which represents a permanently full bar.
        guiGraphics.blit(
                HUD_TEXTURE,
                mainBarX, currentY,
                UV_HEALTH_FILL_X, UV_STATIC_FILL_Y, // Use UV_HEALTH_FILL_X for consistent X positioning.
                MAIN_BAR_W, MAIN_BAR_H,
                256, 256
        );
    }

    // --- GUI Overlay Registration Event ---
    /**
     * Registers the custom HUD overlay with Forge's GUI system.
     * This ensures the HUD_OVERLAY lambda is correctly integrated and called by the rendering system
     * whenever GUI overlays are drawn. The "aboveAll" parameter ensures it's rendered on top.
     *
     * @param event The event for registering GUI overlays.
     */
    @SubscribeEvent
    public static void registerGuiOverlays(RegisterGuiOverlaysEvent event) {
        // Register the custom HUD overlay to be rendered above all other vanilla overlays.
        event.registerAboveAll("stats_bar", HUD_OVERLAY);
    }
}