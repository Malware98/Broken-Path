package com.malware98.brokenpath.util;

import net.minecraft.world.item.ArmorItem;

/**
 * Utility class for managing custom armor statistics.
 * Provides methods to transform vanilla armor properties into mod-specific stats,
 * such as Protection.
 */
public class ModArmorStats {

    /**
     * Calculates the Protection value from a given ArmorItem.
     * By default, it directly converts vanilla defense into Protection.
     * This is the place to add complex logic for custom armor items or materials.
     *
     * @param armorItem The ArmorItem to calculate the Protection value for.
     * @return The calculated Protection value.
     */
    public static float getProtectionValue(ArmorItem armorItem) {
        // --- Vanilla Armor to Protection Logic ---
        // By default, we are directly converting vanilla defense to Protection.
        // Complex logic could be added here, for example:
        //
        // Example: If leather armor should give half its defense as Protection:
        // if (armorItem.getMaterial() == net.minecraft.world.item.ArmorMaterials.LEATHER) {
        //     return armorItem.getDefense() * 0.5f;
        // }
        //
        // Example: If you have your own custom armor classes:
        // if (armorItem instanceof com.malware98.brokenpath.item.MyCustomArmorItem) {
        //     // If your custom armor has a method to get its Protection value
        //     return ((com.malware98.brokenpath.item.MyCustomArmorItem) armorItem).getBrokenPathProtection();
        // }

        // For now, simply return the vanilla defense value.
        return armorItem.getDefense();
    }

    /**
     * Calculates the Toughness value from a given ArmorItem.
     * Currently returns 0.0f, as toughness is handled by the mod's custom protection system.
     * @param armorItem The ArmorItem to calculate the Toughness value for.
     * @return The calculated Toughness value (currently 0.0f).
     */
    public static float getToughnessValue(ArmorItem armorItem) {
        return 0.0f;
    }

    // Add more methods here for other custom armor properties if needed,
    // e.g., for getting armor set bonuses, etc.
}