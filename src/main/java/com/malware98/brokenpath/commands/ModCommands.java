package com.malware98.brokenpath.commands;

import com.malware98.brokenpath.BrokenPath;
import com.malware98.brokenpath.capabilities.registries.ModCapabilities;
import com.malware98.brokenpath.commands.suggestions.RaceSuggestions;
import com.malware98.brokenpath.data.ModConfigs;
import com.malware98.brokenpath.events.PlayerStatEventHandler;
import com.malware98.brokenpath.util.CapabilityUtils;
import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.arguments.IntegerArgumentType;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.exceptions.CommandSyntaxException;
import net.minecraft.commands.CommandSourceStack;
import net.minecraft.commands.Commands;
import net.minecraft.network.chat.Component;
import net.minecraft.world.entity.player.Player;
import net.minecraftforge.event.RegisterCommandsEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;

import java.util.Locale;

/*
 * Clase principal de tu mod "BrokenPath".
 * Encargada de la inicialización principal: registro de eventos,
 * capacidades, tipos de daño, efectos de mob y configuraciones.
 */
@Mod.EventBusSubscriber(modid = BrokenPath.MOD_ID)
public class ModCommands {

    // Manejador de eventos para el registro de comandos
    @SubscribeEvent
    public static void onRegisterCommands(RegisterCommandsEvent event) {
        CommandDispatcher<CommandSourceStack> dispatcher = event.getDispatcher();
        register(dispatcher);
    }

    // Registra todos los comandos del mod
    public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
        dispatcher.register(
                Commands.literal("bp")
                        .then(Commands.literal("setrace")
                                .then(Commands.argument("race_name", StringArgumentType.string())
                                        .suggests(RaceSuggestions.INSTANCE)
                                        .executes(context -> setRace(context, StringArgumentType.getString(context, "race_name")))
                                )
                        )
                        .then(Commands.literal("addxp")
                                .then(Commands.argument("amount", IntegerArgumentType.integer(1))
                                        .executes(context -> addExperience(context, IntegerArgumentType.getInteger(context, "amount")))
                                )
                        )
                        .then(Commands.literal("resetdata")
                                .executes(ModCommands::resetExperience)
                        )
                        .then(Commands.literal("getdata")
                                .executes(ModCommands::getPlayerData)
                        )
        );
    }

    // --- Implementaciones de los Comandos ---

    // Establece la raza del jugador
    private static int setRace(CommandContext<CommandSourceStack> context, String raceName) throws CommandSyntaxException {
        Player player = context.getSource().getPlayerOrException();
        String normalizedRaceName = raceName.toUpperCase(Locale.ROOT);

        if (!ModConfigs.getInstance().raceSettings.containsKey(normalizedRaceName)) {
            StringBuilder validRaces = new StringBuilder();
            boolean first = true;
            for (String r : ModConfigs.getInstance().raceSettings.keySet()) {
                if (!first) {
                    validRaces.append(", ");
                }
                validRaces.append(r.toLowerCase(Locale.ROOT));
                first = false;
            }
            context.getSource().sendFailure(Component.literal("Error: La raza '" + raceName + "' no existe. Razas válidas: " + validRaces.toString()));
            return 0;
        }

        CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
            playerStats.setRace(normalizedRaceName);
            context.getSource().sendSuccess(() -> Component.literal("Tu raza ha sido establecida a: " + normalizedRaceName), false);
            PlayerStatEventHandler.recalculateAndApplyStats(player); // Recalcula y sincroniza las estadísticas del jugador
        });

        return 1;
    }

    // Añade experiencia al jugador
    private static int addExperience(CommandContext<CommandSourceStack> context, int amount) throws CommandSyntaxException {
        Player player = context.getSource().getPlayerOrException();

        player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
            playerXP.addExperience(amount);
            context.getSource().sendSuccess(() -> Component.literal("Se añadió " + amount + " de experiencia. XP actual: " + playerXP.getExperience() + ", Nivel: " + playerXP.getLevel()), false);
        });

        return 1;
    }

    // Reinicia la experiencia y las estadísticas del jugador
    private static int resetExperience(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
        Player player = context.getSource().getPlayerOrException();

        player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
            playerXP.resetXP();
            context.getSource().sendSuccess(() -> Component.literal("Tu XP ha sido reiniciada. XP actual: " + playerXP.getExperience() + ", Nivel: " + playerXP.getLevel()), false);
        });

        CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
            playerStats.resetData();
            context.getSource().sendSuccess(() -> Component.literal("Tus estadísticas también han sido reiniciadas a los valores por defecto."), false);
        });

        return 1;
    }

    // Obtiene y muestra los datos del jugador
    private static int getPlayerData(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
        Player player = context.getSource().getPlayerOrException();

        CapabilityUtils.ifPlayerStatsPresent(player, playerStats -> {
            StringBuilder messageBuilder = new StringBuilder();

            messageBuilder.append("--- Player Data ---\n");
            player.getCapability(ModCapabilities.PLAYER_XP_CAPABILITY).ifPresent(playerXP -> {
                messageBuilder.append("XP Level: ").append(playerXP.getLevel()).append("\n");
                messageBuilder.append("Current XP: ").append(playerXP.getExperience()).append("\n");
                messageBuilder.append("XP Debt: ").append(playerXP.getXPDebt()).append("\n");
            });

            messageBuilder.append("Attribute Points: ").append(playerStats.getAttributePoints()).append("\n");
            messageBuilder.append("Race: ").append(playerStats.getRace()).append("\n");
            messageBuilder.append("Class: ").append(playerStats.getPlayerClass()).append("\n");
            messageBuilder.append("Specialization: ").append(playerStats.getSpecialization()).append("\n");
            messageBuilder.append("Skill Points: ").append(playerStats.getSkillPoints()).append("\n");

            if (!playerStats.getProfessions().isEmpty()) {
                messageBuilder.append("Professions:\n");
                playerStats.getProfessions().forEach((name, level) ->
                        messageBuilder.append("  - ").append(name).append(": Level ").append(level).append("\n")
                );
            } else {
                messageBuilder.append("No tienes profesiones.\n");
            }

            messageBuilder.append("--- Core Attributes (Manual) ---\n");
            messageBuilder.append("Constitution: ").append(playerStats.getConstitution()).append("\n");
            messageBuilder.append("Strength: ").append(playerStats.getStrength()).append("\n");
            messageBuilder.append("Dexterity: ").append(playerStats.getDexterity()).append("\n");
            messageBuilder.append("Intelligence: ").append(playerStats.getIntelligence()).append("\n");

            messageBuilder.append("--- Primary Stats (Calculated) ---\n");

            messageBuilder.append("Health: ")
                    .append(String.format(Locale.US, "%.1f", playerStats.getCurrentHealth()))
                    .append(" / ")
                    .append(String.format(Locale.US, "%.1f", playerStats.getMaxHealth()))
                    .append("\n");

            // Muestra la Protección basada en STR (Fuerza)
            messageBuilder.append("Protection (STR-based): ")
                    .append(String.format(Locale.US, "%.1f", playerStats.getCurrentProtection()))
                    .append(" / ")
                    .append(String.format(Locale.US, "%.1f", playerStats.getMaxProtection()))
                    .append("\n");

            // Muestra la Protección Innata
            messageBuilder.append("Innate Protection: ")
                    .append(String.format(Locale.US, "%.1f", playerStats.getCurrentInnateProtection()))
                    .append(" / ")
                    .append(String.format(Locale.US, "%.1f", playerStats.getMaxInnateProtection()))
                    .append("\n");

            messageBuilder.append("Mana: ")
                    .append(String.format(Locale.US, "%.1f", playerStats.getCurrentMana()))
                    .append(" / ")
                    .append(String.format(Locale.US, "%.1f", playerStats.getMaxMana()))
                    .append("\n");

            messageBuilder.append("Vigor: ")
                    .append(String.format(Locale.US, "%.1f", playerStats.getCurrentVigor()))
                    .append(" / ")
                    .append(String.format(Locale.US, "%.1f", playerStats.getMaxVigor()))
                    .append("\n");

            // Muestra el Favor (antes Luck)
            messageBuilder.append("Favor: ")
                    .append(String.format(Locale.US, "%.1f", playerStats.getFavor()))
                    .append("\n");
            // Muestra el Multiplicador de Bonificación de Favor (antes Luck Bonus Multiplier)
            messageBuilder.append("Favor Bonus Multiplier: ")
                    .append(String.format(Locale.US, "%.2f", playerStats.getFavorBonusMultiplier()))
                    .append("\n");

            messageBuilder.append("Hunger Stage: ").append(playerStats.getHungerStage()).append("\n");

            messageBuilder.append("-------------------------");

            context.getSource().sendSuccess(() -> Component.literal(messageBuilder.toString()), false);
        });

        return 1;
    }
}